
mc1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000033c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d0  00800060  000033c0  00003454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800130  00800130  00003524  2**0
                  ALLOC
  3 .stab         00002e68  00000000  00000000  00003524  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016e8  00000000  00000000  0000638c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000996d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a858  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b608  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b768  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b9f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c1c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 4e 0f 	jmp	0x1e9c	; 0x1e9c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 14 19 	jmp	0x3228	; 0x3228 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 81 0f 	jmp	0x1f02	; 0x1f02 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ec       	ldi	r30, 0xC0	; 192
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 33       	cpi	r26, 0x30	; 48
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e3       	ldi	r26, 0x30	; 48
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 34       	cpi	r26, 0x48	; 72
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 de 19 	jmp	0x33bc	; 0x33bc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 62 19 	jmp	0x32c4	; 0x32c4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e2       	ldi	r26, 0x26	; 38
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7e 19 	jmp	0x32fc	; 0x32fc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6e 19 	jmp	0x32dc	; 0x32dc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8a 19 	jmp	0x3314	; 0x3314 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6e 19 	jmp	0x32dc	; 0x32dc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8a 19 	jmp	0x3314	; 0x3314 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 62 19 	jmp	0x32c4	; 0x32c4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	86 e2       	ldi	r24, 0x26	; 38
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7e 19 	jmp	0x32fc	; 0x32fc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6e 19 	jmp	0x32dc	; 0x32dc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8a 19 	jmp	0x3314	; 0x3314 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 6e 19 	jmp	0x32dc	; 0x32dc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8a 19 	jmp	0x3314	; 0x3314 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 6e 19 	jmp	0x32dc	; 0x32dc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8a 19 	jmp	0x3314	; 0x3314 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 72 19 	jmp	0x32e4	; 0x32e4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 8e 19 	jmp	0x331c	; 0x331c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
 * Timer call back function when the buzzer are on
 */
void callBackFunction_buzzer ();

int main(void)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c1 58       	subi	r28, 0x81	; 129
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
	/* Enable I-Bit for Interrupts*/
	SREG |=(1<<7);
     b60:	af e5       	ldi	r26, 0x5F	; 95
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	ef e5       	ldi	r30, 0x5F	; 95
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	80 68       	ori	r24, 0x80	; 128
     b6c:	8c 93       	st	X, r24
	 * 4.Asynchronous
	 * 5.Disable Parity
	 * 6.one stop bit
	 */
	usart_ConfigType usart_Config;
	usart_Config.speed=DOUBLE_SPEED;
     b6e:	fe 01       	movw	r30, r28
     b70:	ef 58       	subi	r30, 0x8F	; 143
     b72:	ff 4f       	sbci	r31, 0xFF	; 255
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	80 83       	st	Z, r24
	usart_Config.receiveInterrupt=ENABLE_RX;
     b78:	fe 01       	movw	r30, r28
     b7a:	ef 58       	subi	r30, 0x8F	; 143
     b7c:	ff 4f       	sbci	r31, 0xFF	; 255
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	81 83       	std	Z+1, r24	; 0x01
	usart_Config.CharacterSize=EIGHT_BIT;
     b82:	fe 01       	movw	r30, r28
     b84:	ef 58       	subi	r30, 0x8F	; 143
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	83 e0       	ldi	r24, 0x03	; 3
     b8a:	83 83       	std	Z+3, r24	; 0x03
	usart_Config.modeSelect=ASYNCHRONOUS;
     b8c:	fe 01       	movw	r30, r28
     b8e:	ef 58       	subi	r30, 0x8F	; 143
     b90:	ff 4f       	sbci	r31, 0xFF	; 255
     b92:	14 82       	std	Z+4, r1	; 0x04
	usart_Config.ParityMode=DISABLE_PARITY;
     b94:	fe 01       	movw	r30, r28
     b96:	ef 58       	subi	r30, 0x8F	; 143
     b98:	ff 4f       	sbci	r31, 0xFF	; 255
     b9a:	15 82       	std	Z+5, r1	; 0x05
	usart_Config.stopBitSelect=ONE_BIT;
     b9c:	fe 01       	movw	r30, r28
     b9e:	ef 58       	subi	r30, 0x8F	; 143
     ba0:	ff 4f       	sbci	r31, 0xFF	; 255
     ba2:	16 82       	std	Z+6, r1	; 0x06
	/* Initialize the UART driver with Baud-rate = 9600 bits/sec */
	UART_init(&usart_Config, 9600);
     ba4:	ce 01       	movw	r24, r28
     ba6:	8f 58       	subi	r24, 0x8F	; 143
     ba8:	9f 4f       	sbci	r25, 0xFF	; 255
     baa:	40 e8       	ldi	r20, 0x80	; 128
     bac:	55 e2       	ldi	r21, 0x25	; 37
     bae:	60 e0       	ldi	r22, 0x00	; 0
     bb0:	70 e0       	ldi	r23, 0x00	; 0
     bb2:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <UART_init>
	 * 2.Timer0 InitialValue=0
	 * 3.Timer0 prescaler=1024
	 * 4.Over Flow Interrupt Enabled
	 */
	Timer0_ConfigType Timer0_Config;
	Timer0_Config.Timer0_mode=NORMAL_MODE;
     bb6:	fe 01       	movw	r30, r28
     bb8:	e7 58       	subi	r30, 0x87	; 135
     bba:	ff 4f       	sbci	r31, 0xFF	; 255
     bbc:	10 82       	st	Z, r1
	Timer0_Config.Timer0_InitialValue=0;
     bbe:	fe 01       	movw	r30, r28
     bc0:	e7 58       	subi	r30, 0x87	; 135
     bc2:	ff 4f       	sbci	r31, 0xFF	; 255
     bc4:	11 82       	std	Z+1, r1	; 0x01
	Timer0_Config.Timer0_CombareValue=0;
     bc6:	fe 01       	movw	r30, r28
     bc8:	e7 58       	subi	r30, 0x87	; 135
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	12 82       	std	Z+2, r1	; 0x02
	Timer0_Config.OC0_PinBehavior=NORMAL_OC0_DISCONNECTED;
     bce:	fe 01       	movw	r30, r28
     bd0:	e7 58       	subi	r30, 0x87	; 135
     bd2:	ff 4f       	sbci	r31, 0xFF	; 255
     bd4:	13 82       	std	Z+3, r1	; 0x03
	Timer0_Config.Timer0_prescaler=Timer0_F_CPU_1024;
     bd6:	fe 01       	movw	r30, r28
     bd8:	e7 58       	subi	r30, 0x87	; 135
     bda:	ff 4f       	sbci	r31, 0xFF	; 255
     bdc:	85 e0       	ldi	r24, 0x05	; 5
     bde:	84 83       	std	Z+4, r24	; 0x04
	Timer0_Config.Over_Flow_Interrupt=Over_Flow_Interrupt_Enable;
     be0:	fe 01       	movw	r30, r28
     be2:	e7 58       	subi	r30, 0x87	; 135
     be4:	ff 4f       	sbci	r31, 0xFF	; 255
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	85 83       	std	Z+5, r24	; 0x05
	Timer0_Config.Compare_Match_Interrupt=Compare_Match_Interrupt_Disable;
     bea:	fe 01       	movw	r30, r28
     bec:	e7 58       	subi	r30, 0x87	; 135
     bee:	ff 4f       	sbci	r31, 0xFF	; 255
     bf0:	16 82       	std	Z+6, r1	; 0x06
	 * Description :
	 * Initialize the LCD:
	 * 1. Setup the LCD pins directions by use the GPIO driver.
	 * 2. Setup the LCD Data Mode 8-bits.
	 */
	LCD_init();
     bf2:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <LCD_init>


	while(1)
	{
		if(g_First_use==0)
     bf6:	80 91 30 01 	lds	r24, 0x0130
     bfa:	88 23       	and	r24, r24
     bfc:	09 f0       	breq	.+2      	; 0xc00 <main+0xba>
     bfe:	cc c1       	rjmp	.+920    	; 0xf98 <main+0x452>
			/*
			 * 1.Clear the LCD
			 * 2.Display the required Message
			 * 3.Move the cursor to the location where we type the password
			 */
			LCD_clearScreen();
     c00:	0e 94 99 17 	call	0x2f32	; 0x2f32 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Enter New Pass:");
     c04:	20 e6       	ldi	r18, 0x60	; 96
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	60 e0       	ldi	r22, 0x00	; 0
     c0c:	a9 01       	movw	r20, r18
     c0e:	0e 94 5d 17 	call	0x2eba	; 0x2eba <LCD_displayStringRowColumn>
			LCD_moveCursor(1, 0);
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	60 e0       	ldi	r22, 0x00	; 0
     c16:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_moveCursor>

			/*
			 * Function to get the first password entered and store it in Array
			 */
			getPassword(g_a_firstPass);
     c1a:	86 e3       	ldi	r24, 0x36	; 54
     c1c:	91 e0       	ldi	r25, 0x01	; 1
     c1e:	0e 94 df 0b 	call	0x17be	; 0x17be <getPassword>
			/*
			 * 1.Clear the LCD
			 * 2.Display the required Message
			 * 3.Move the cursor to the location where we type the password
			 */
			LCD_clearScreen();
     c22:	0e 94 99 17 	call	0x2f32	; 0x2f32 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Renter Pass:");
     c26:	20 e7       	ldi	r18, 0x70	; 112
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	a9 01       	movw	r20, r18
     c30:	0e 94 5d 17 	call	0x2eba	; 0x2eba <LCD_displayStringRowColumn>
			LCD_moveCursor(1, 0);
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_moveCursor>

			/*
			 * Function to get the Second password entered and store it in Array
			 */
			getPassword(g_a_secondPass);
     c3c:	81 e4       	ldi	r24, 0x41	; 65
     c3e:	91 e0       	ldi	r25, 0x01	; 1
     c40:	0e 94 df 0b 	call	0x17be	; 0x17be <getPassword>

			/*
			 * Check if the first password matches with the second one
			 */
			g_compare=compareTwoPasswords(g_a_firstPass, g_a_secondPass);
     c44:	86 e3       	ldi	r24, 0x36	; 54
     c46:	91 e0       	ldi	r25, 0x01	; 1
     c48:	21 e4       	ldi	r18, 0x41	; 65
     c4a:	31 e0       	ldi	r19, 0x01	; 1
     c4c:	b9 01       	movw	r22, r18
     c4e:	0e 94 8d 0c 	call	0x191a	; 0x191a <compareTwoPasswords>
     c52:	80 93 31 01 	sts	0x0131, r24
			if (g_compare == 0)
     c56:	80 91 31 01 	lds	r24, 0x0131
     c5a:	88 23       	and	r24, r24
     c5c:	09 f0       	breq	.+2      	; 0xc60 <main+0x11a>
     c5e:	d5 c0       	rjmp	.+426    	; 0xe0a <main+0x2c4>
			{
				/* Make the flag equal one to go to the Main option */
				g_First_use=1;
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	80 93 30 01 	sts	0x0130, r24

				LCD_clearScreen();
     c66:	0e 94 99 17 	call	0x2f32	; 0x2f32 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 4, "Password");
     c6a:	2d e7       	ldi	r18, 0x7D	; 125
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	64 e0       	ldi	r22, 0x04	; 4
     c72:	a9 01       	movw	r20, r18
     c74:	0e 94 5d 17 	call	0x2eba	; 0x2eba <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1, 5, "Match");
     c78:	26 e8       	ldi	r18, 0x86	; 134
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	65 e0       	ldi	r22, 0x05	; 5
     c80:	a9 01       	movw	r20, r18
     c82:	0e 94 5d 17 	call	0x2eba	; 0x2eba <LCD_displayStringRowColumn>
     c86:	fe 01       	movw	r30, r28
     c88:	e3 59       	subi	r30, 0x93	; 147
     c8a:	ff 4f       	sbci	r31, 0xFF	; 255
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	aa e7       	ldi	r26, 0x7A	; 122
     c92:	b4 e4       	ldi	r27, 0x44	; 68
     c94:	80 83       	st	Z, r24
     c96:	91 83       	std	Z+1, r25	; 0x01
     c98:	a2 83       	std	Z+2, r26	; 0x02
     c9a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c9c:	8e 01       	movw	r16, r28
     c9e:	07 59       	subi	r16, 0x97	; 151
     ca0:	1f 4f       	sbci	r17, 0xFF	; 255
     ca2:	fe 01       	movw	r30, r28
     ca4:	e3 59       	subi	r30, 0x93	; 147
     ca6:	ff 4f       	sbci	r31, 0xFF	; 255
     ca8:	60 81       	ld	r22, Z
     caa:	71 81       	ldd	r23, Z+1	; 0x01
     cac:	82 81       	ldd	r24, Z+2	; 0x02
     cae:	93 81       	ldd	r25, Z+3	; 0x03
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	4a e7       	ldi	r20, 0x7A	; 122
     cb6:	53 e4       	ldi	r21, 0x43	; 67
     cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cbc:	dc 01       	movw	r26, r24
     cbe:	cb 01       	movw	r24, r22
     cc0:	f8 01       	movw	r30, r16
     cc2:	80 83       	st	Z, r24
     cc4:	91 83       	std	Z+1, r25	; 0x01
     cc6:	a2 83       	std	Z+2, r26	; 0x02
     cc8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     cca:	fe 01       	movw	r30, r28
     ccc:	e7 59       	subi	r30, 0x97	; 151
     cce:	ff 4f       	sbci	r31, 0xFF	; 255
     cd0:	60 81       	ld	r22, Z
     cd2:	71 81       	ldd	r23, Z+1	; 0x01
     cd4:	82 81       	ldd	r24, Z+2	; 0x02
     cd6:	93 81       	ldd	r25, Z+3	; 0x03
     cd8:	20 e0       	ldi	r18, 0x00	; 0
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	40 e8       	ldi	r20, 0x80	; 128
     cde:	5f e3       	ldi	r21, 0x3F	; 63
     ce0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ce4:	88 23       	and	r24, r24
     ce6:	44 f4       	brge	.+16     	; 0xcf8 <main+0x1b2>
		__ticks = 1;
     ce8:	fe 01       	movw	r30, r28
     cea:	e9 59       	subi	r30, 0x99	; 153
     cec:	ff 4f       	sbci	r31, 0xFF	; 255
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	91 83       	std	Z+1, r25	; 0x01
     cf4:	80 83       	st	Z, r24
     cf6:	64 c0       	rjmp	.+200    	; 0xdc0 <main+0x27a>
	else if (__tmp > 65535)
     cf8:	fe 01       	movw	r30, r28
     cfa:	e7 59       	subi	r30, 0x97	; 151
     cfc:	ff 4f       	sbci	r31, 0xFF	; 255
     cfe:	60 81       	ld	r22, Z
     d00:	71 81       	ldd	r23, Z+1	; 0x01
     d02:	82 81       	ldd	r24, Z+2	; 0x02
     d04:	93 81       	ldd	r25, Z+3	; 0x03
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	3f ef       	ldi	r19, 0xFF	; 255
     d0a:	4f e7       	ldi	r20, 0x7F	; 127
     d0c:	57 e4       	ldi	r21, 0x47	; 71
     d0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d12:	18 16       	cp	r1, r24
     d14:	0c f0       	brlt	.+2      	; 0xd18 <main+0x1d2>
     d16:	43 c0       	rjmp	.+134    	; 0xd9e <main+0x258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d18:	fe 01       	movw	r30, r28
     d1a:	e3 59       	subi	r30, 0x93	; 147
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	60 81       	ld	r22, Z
     d20:	71 81       	ldd	r23, Z+1	; 0x01
     d22:	82 81       	ldd	r24, Z+2	; 0x02
     d24:	93 81       	ldd	r25, Z+3	; 0x03
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	40 e2       	ldi	r20, 0x20	; 32
     d2c:	51 e4       	ldi	r21, 0x41	; 65
     d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d32:	dc 01       	movw	r26, r24
     d34:	cb 01       	movw	r24, r22
     d36:	8e 01       	movw	r16, r28
     d38:	09 59       	subi	r16, 0x99	; 153
     d3a:	1f 4f       	sbci	r17, 0xFF	; 255
     d3c:	bc 01       	movw	r22, r24
     d3e:	cd 01       	movw	r24, r26
     d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d44:	dc 01       	movw	r26, r24
     d46:	cb 01       	movw	r24, r22
     d48:	f8 01       	movw	r30, r16
     d4a:	91 83       	std	Z+1, r25	; 0x01
     d4c:	80 83       	st	Z, r24
     d4e:	1f c0       	rjmp	.+62     	; 0xd8e <main+0x248>
     d50:	fe 01       	movw	r30, r28
     d52:	eb 59       	subi	r30, 0x9B	; 155
     d54:	ff 4f       	sbci	r31, 0xFF	; 255
     d56:	89 e1       	ldi	r24, 0x19	; 25
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	91 83       	std	Z+1, r25	; 0x01
     d5c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d5e:	fe 01       	movw	r30, r28
     d60:	eb 59       	subi	r30, 0x9B	; 155
     d62:	ff 4f       	sbci	r31, 0xFF	; 255
     d64:	80 81       	ld	r24, Z
     d66:	91 81       	ldd	r25, Z+1	; 0x01
     d68:	01 97       	sbiw	r24, 0x01	; 1
     d6a:	f1 f7       	brne	.-4      	; 0xd68 <main+0x222>
     d6c:	fe 01       	movw	r30, r28
     d6e:	eb 59       	subi	r30, 0x9B	; 155
     d70:	ff 4f       	sbci	r31, 0xFF	; 255
     d72:	91 83       	std	Z+1, r25	; 0x01
     d74:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d76:	de 01       	movw	r26, r28
     d78:	a9 59       	subi	r26, 0x99	; 153
     d7a:	bf 4f       	sbci	r27, 0xFF	; 255
     d7c:	fe 01       	movw	r30, r28
     d7e:	e9 59       	subi	r30, 0x99	; 153
     d80:	ff 4f       	sbci	r31, 0xFF	; 255
     d82:	80 81       	ld	r24, Z
     d84:	91 81       	ldd	r25, Z+1	; 0x01
     d86:	01 97       	sbiw	r24, 0x01	; 1
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	9c 93       	st	X, r25
     d8c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d8e:	fe 01       	movw	r30, r28
     d90:	e9 59       	subi	r30, 0x99	; 153
     d92:	ff 4f       	sbci	r31, 0xFF	; 255
     d94:	80 81       	ld	r24, Z
     d96:	91 81       	ldd	r25, Z+1	; 0x01
     d98:	00 97       	sbiw	r24, 0x00	; 0
     d9a:	d1 f6       	brne	.-76     	; 0xd50 <main+0x20a>
     d9c:	27 c0       	rjmp	.+78     	; 0xdec <main+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d9e:	8e 01       	movw	r16, r28
     da0:	09 59       	subi	r16, 0x99	; 153
     da2:	1f 4f       	sbci	r17, 0xFF	; 255
     da4:	fe 01       	movw	r30, r28
     da6:	e7 59       	subi	r30, 0x97	; 151
     da8:	ff 4f       	sbci	r31, 0xFF	; 255
     daa:	60 81       	ld	r22, Z
     dac:	71 81       	ldd	r23, Z+1	; 0x01
     dae:	82 81       	ldd	r24, Z+2	; 0x02
     db0:	93 81       	ldd	r25, Z+3	; 0x03
     db2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     db6:	dc 01       	movw	r26, r24
     db8:	cb 01       	movw	r24, r22
     dba:	f8 01       	movw	r30, r16
     dbc:	91 83       	std	Z+1, r25	; 0x01
     dbe:	80 83       	st	Z, r24
     dc0:	de 01       	movw	r26, r28
     dc2:	ad 59       	subi	r26, 0x9D	; 157
     dc4:	bf 4f       	sbci	r27, 0xFF	; 255
     dc6:	fe 01       	movw	r30, r28
     dc8:	e9 59       	subi	r30, 0x99	; 153
     dca:	ff 4f       	sbci	r31, 0xFF	; 255
     dcc:	80 81       	ld	r24, Z
     dce:	91 81       	ldd	r25, Z+1	; 0x01
     dd0:	8d 93       	st	X+, r24
     dd2:	9c 93       	st	X, r25
     dd4:	fe 01       	movw	r30, r28
     dd6:	ed 59       	subi	r30, 0x9D	; 157
     dd8:	ff 4f       	sbci	r31, 0xFF	; 255
     dda:	80 81       	ld	r24, Z
     ddc:	91 81       	ldd	r25, Z+1	; 0x01
     dde:	01 97       	sbiw	r24, 0x01	; 1
     de0:	f1 f7       	brne	.-4      	; 0xdde <main+0x298>
     de2:	fe 01       	movw	r30, r28
     de4:	ed 59       	subi	r30, 0x9D	; 157
     de6:	ff 4f       	sbci	r31, 0xFF	; 255
     de8:	91 83       	std	Z+1, r25	; 0x01
     dea:	80 83       	st	Z, r24
				/* delay to display the required message */
				_delay_ms(1000);

				prepareToSend(g_a_firstPass, g_a_Pass_send);
     dec:	86 e3       	ldi	r24, 0x36	; 54
     dee:	91 e0       	ldi	r25, 0x01	; 1
     df0:	2b e3       	ldi	r18, 0x3B	; 59
     df2:	31 e0       	ldi	r19, 0x01	; 1
     df4:	b9 01       	movw	r22, r18
     df6:	0e 94 c6 0c 	call	0x198c	; 0x198c <prepareToSend>

				UART_sendByte(SAVE_PASSWORD);
     dfa:	82 e0       	ldi	r24, 0x02	; 2
     dfc:	0e 94 82 18 	call	0x3104	; 0x3104 <UART_sendByte>
				UART_sendString(g_a_Pass_send);
     e00:	8b e3       	ldi	r24, 0x3B	; 59
     e02:	91 e0       	ldi	r25, 0x01	; 1
     e04:	0e 94 a8 18 	call	0x3150	; 0x3150 <UART_sendString>
     e08:	f6 ce       	rjmp	.-532    	; 0xbf6 <main+0xb0>
			}
			else
			{
				/* Clear the flag to go to the First step again */
				g_First_use=0;
     e0a:	10 92 30 01 	sts	0x0130, r1

				LCD_clearScreen();
     e0e:	0e 94 99 17 	call	0x2f32	; 0x2f32 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 0, "Pass Not Match");
     e12:	2c e8       	ldi	r18, 0x8C	; 140
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	60 e0       	ldi	r22, 0x00	; 0
     e1a:	a9 01       	movw	r20, r18
     e1c:	0e 94 5d 17 	call	0x2eba	; 0x2eba <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1, 0, "Please ReEnter");
     e20:	2b e9       	ldi	r18, 0x9B	; 155
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	60 e0       	ldi	r22, 0x00	; 0
     e28:	a9 01       	movw	r20, r18
     e2a:	0e 94 5d 17 	call	0x2eba	; 0x2eba <LCD_displayStringRowColumn>
     e2e:	fe 01       	movw	r30, r28
     e30:	e1 5a       	subi	r30, 0xA1	; 161
     e32:	ff 4f       	sbci	r31, 0xFF	; 255
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	aa e7       	ldi	r26, 0x7A	; 122
     e3a:	b4 e4       	ldi	r27, 0x44	; 68
     e3c:	80 83       	st	Z, r24
     e3e:	91 83       	std	Z+1, r25	; 0x01
     e40:	a2 83       	std	Z+2, r26	; 0x02
     e42:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e44:	8e 01       	movw	r16, r28
     e46:	05 5a       	subi	r16, 0xA5	; 165
     e48:	1f 4f       	sbci	r17, 0xFF	; 255
     e4a:	fe 01       	movw	r30, r28
     e4c:	e1 5a       	subi	r30, 0xA1	; 161
     e4e:	ff 4f       	sbci	r31, 0xFF	; 255
     e50:	60 81       	ld	r22, Z
     e52:	71 81       	ldd	r23, Z+1	; 0x01
     e54:	82 81       	ldd	r24, Z+2	; 0x02
     e56:	93 81       	ldd	r25, Z+3	; 0x03
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	4a e7       	ldi	r20, 0x7A	; 122
     e5e:	53 e4       	ldi	r21, 0x43	; 67
     e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e64:	dc 01       	movw	r26, r24
     e66:	cb 01       	movw	r24, r22
     e68:	f8 01       	movw	r30, r16
     e6a:	80 83       	st	Z, r24
     e6c:	91 83       	std	Z+1, r25	; 0x01
     e6e:	a2 83       	std	Z+2, r26	; 0x02
     e70:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e72:	fe 01       	movw	r30, r28
     e74:	e5 5a       	subi	r30, 0xA5	; 165
     e76:	ff 4f       	sbci	r31, 0xFF	; 255
     e78:	60 81       	ld	r22, Z
     e7a:	71 81       	ldd	r23, Z+1	; 0x01
     e7c:	82 81       	ldd	r24, Z+2	; 0x02
     e7e:	93 81       	ldd	r25, Z+3	; 0x03
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	40 e8       	ldi	r20, 0x80	; 128
     e86:	5f e3       	ldi	r21, 0x3F	; 63
     e88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e8c:	88 23       	and	r24, r24
     e8e:	44 f4       	brge	.+16     	; 0xea0 <main+0x35a>
		__ticks = 1;
     e90:	fe 01       	movw	r30, r28
     e92:	e7 5a       	subi	r30, 0xA7	; 167
     e94:	ff 4f       	sbci	r31, 0xFF	; 255
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	91 83       	std	Z+1, r25	; 0x01
     e9c:	80 83       	st	Z, r24
     e9e:	64 c0       	rjmp	.+200    	; 0xf68 <main+0x422>
	else if (__tmp > 65535)
     ea0:	fe 01       	movw	r30, r28
     ea2:	e5 5a       	subi	r30, 0xA5	; 165
     ea4:	ff 4f       	sbci	r31, 0xFF	; 255
     ea6:	60 81       	ld	r22, Z
     ea8:	71 81       	ldd	r23, Z+1	; 0x01
     eaa:	82 81       	ldd	r24, Z+2	; 0x02
     eac:	93 81       	ldd	r25, Z+3	; 0x03
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	3f ef       	ldi	r19, 0xFF	; 255
     eb2:	4f e7       	ldi	r20, 0x7F	; 127
     eb4:	57 e4       	ldi	r21, 0x47	; 71
     eb6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     eba:	18 16       	cp	r1, r24
     ebc:	0c f0       	brlt	.+2      	; 0xec0 <main+0x37a>
     ebe:	43 c0       	rjmp	.+134    	; 0xf46 <main+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ec0:	fe 01       	movw	r30, r28
     ec2:	e1 5a       	subi	r30, 0xA1	; 161
     ec4:	ff 4f       	sbci	r31, 0xFF	; 255
     ec6:	60 81       	ld	r22, Z
     ec8:	71 81       	ldd	r23, Z+1	; 0x01
     eca:	82 81       	ldd	r24, Z+2	; 0x02
     ecc:	93 81       	ldd	r25, Z+3	; 0x03
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	40 e2       	ldi	r20, 0x20	; 32
     ed4:	51 e4       	ldi	r21, 0x41	; 65
     ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eda:	dc 01       	movw	r26, r24
     edc:	cb 01       	movw	r24, r22
     ede:	8e 01       	movw	r16, r28
     ee0:	07 5a       	subi	r16, 0xA7	; 167
     ee2:	1f 4f       	sbci	r17, 0xFF	; 255
     ee4:	bc 01       	movw	r22, r24
     ee6:	cd 01       	movw	r24, r26
     ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eec:	dc 01       	movw	r26, r24
     eee:	cb 01       	movw	r24, r22
     ef0:	f8 01       	movw	r30, r16
     ef2:	91 83       	std	Z+1, r25	; 0x01
     ef4:	80 83       	st	Z, r24
     ef6:	1f c0       	rjmp	.+62     	; 0xf36 <main+0x3f0>
     ef8:	fe 01       	movw	r30, r28
     efa:	e9 5a       	subi	r30, 0xA9	; 169
     efc:	ff 4f       	sbci	r31, 0xFF	; 255
     efe:	89 e1       	ldi	r24, 0x19	; 25
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	91 83       	std	Z+1, r25	; 0x01
     f04:	80 83       	st	Z, r24
     f06:	fe 01       	movw	r30, r28
     f08:	e9 5a       	subi	r30, 0xA9	; 169
     f0a:	ff 4f       	sbci	r31, 0xFF	; 255
     f0c:	80 81       	ld	r24, Z
     f0e:	91 81       	ldd	r25, Z+1	; 0x01
     f10:	01 97       	sbiw	r24, 0x01	; 1
     f12:	f1 f7       	brne	.-4      	; 0xf10 <main+0x3ca>
     f14:	fe 01       	movw	r30, r28
     f16:	e9 5a       	subi	r30, 0xA9	; 169
     f18:	ff 4f       	sbci	r31, 0xFF	; 255
     f1a:	91 83       	std	Z+1, r25	; 0x01
     f1c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f1e:	de 01       	movw	r26, r28
     f20:	a7 5a       	subi	r26, 0xA7	; 167
     f22:	bf 4f       	sbci	r27, 0xFF	; 255
     f24:	fe 01       	movw	r30, r28
     f26:	e7 5a       	subi	r30, 0xA7	; 167
     f28:	ff 4f       	sbci	r31, 0xFF	; 255
     f2a:	80 81       	ld	r24, Z
     f2c:	91 81       	ldd	r25, Z+1	; 0x01
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	11 96       	adiw	r26, 0x01	; 1
     f32:	9c 93       	st	X, r25
     f34:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f36:	fe 01       	movw	r30, r28
     f38:	e7 5a       	subi	r30, 0xA7	; 167
     f3a:	ff 4f       	sbci	r31, 0xFF	; 255
     f3c:	80 81       	ld	r24, Z
     f3e:	91 81       	ldd	r25, Z+1	; 0x01
     f40:	00 97       	sbiw	r24, 0x00	; 0
     f42:	d1 f6       	brne	.-76     	; 0xef8 <main+0x3b2>
     f44:	58 ce       	rjmp	.-848    	; 0xbf6 <main+0xb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f46:	8e 01       	movw	r16, r28
     f48:	07 5a       	subi	r16, 0xA7	; 167
     f4a:	1f 4f       	sbci	r17, 0xFF	; 255
     f4c:	fe 01       	movw	r30, r28
     f4e:	e5 5a       	subi	r30, 0xA5	; 165
     f50:	ff 4f       	sbci	r31, 0xFF	; 255
     f52:	60 81       	ld	r22, Z
     f54:	71 81       	ldd	r23, Z+1	; 0x01
     f56:	82 81       	ldd	r24, Z+2	; 0x02
     f58:	93 81       	ldd	r25, Z+3	; 0x03
     f5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f5e:	dc 01       	movw	r26, r24
     f60:	cb 01       	movw	r24, r22
     f62:	f8 01       	movw	r30, r16
     f64:	91 83       	std	Z+1, r25	; 0x01
     f66:	80 83       	st	Z, r24
     f68:	de 01       	movw	r26, r28
     f6a:	ab 5a       	subi	r26, 0xAB	; 171
     f6c:	bf 4f       	sbci	r27, 0xFF	; 255
     f6e:	fe 01       	movw	r30, r28
     f70:	e7 5a       	subi	r30, 0xA7	; 167
     f72:	ff 4f       	sbci	r31, 0xFF	; 255
     f74:	80 81       	ld	r24, Z
     f76:	91 81       	ldd	r25, Z+1	; 0x01
     f78:	11 96       	adiw	r26, 0x01	; 1
     f7a:	9c 93       	st	X, r25
     f7c:	8e 93       	st	-X, r24
     f7e:	fe 01       	movw	r30, r28
     f80:	eb 5a       	subi	r30, 0xAB	; 171
     f82:	ff 4f       	sbci	r31, 0xFF	; 255
     f84:	80 81       	ld	r24, Z
     f86:	91 81       	ldd	r25, Z+1	; 0x01
     f88:	01 97       	sbiw	r24, 0x01	; 1
     f8a:	f1 f7       	brne	.-4      	; 0xf88 <main+0x442>
     f8c:	fe 01       	movw	r30, r28
     f8e:	eb 5a       	subi	r30, 0xAB	; 171
     f90:	ff 4f       	sbci	r31, 0xFF	; 255
     f92:	91 83       	std	Z+1, r25	; 0x01
     f94:	80 83       	st	Z, r24
     f96:	2f ce       	rjmp	.-930    	; 0xbf6 <main+0xb0>
			}
		}

		else
		{
			LCD_clearScreen();
     f98:	0e 94 99 17 	call	0x2f32	; 0x2f32 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "+ : Open Door   ");
     f9c:	2a ea       	ldi	r18, 0xAA	; 170
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	60 e0       	ldi	r22, 0x00	; 0
     fa4:	a9 01       	movw	r20, r18
     fa6:	0e 94 5d 17 	call	0x2eba	; 0x2eba <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "- : Change Pass");
     faa:	2b eb       	ldi	r18, 0xBB	; 187
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	60 e0       	ldi	r22, 0x00	; 0
     fb2:	a9 01       	movw	r20, r18
     fb4:	0e 94 5d 17 	call	0x2eba	; 0x2eba <LCD_displayStringRowColumn>

			g_keyPressed=KEYPAD_getPressedKey();
     fb8:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <KEYPAD_getPressedKey>
     fbc:	80 93 46 01 	sts	0x0146, r24

			if(g_keyPressed=='+')
     fc0:	80 91 46 01 	lds	r24, 0x0146
     fc4:	8b 32       	cpi	r24, 0x2B	; 43
     fc6:	09 f0       	breq	.+2      	; 0xfca <main+0x484>
     fc8:	58 c1       	rjmp	.+688    	; 0x127a <main+0x734>
			{
				LCD_clearScreen();
     fca:	0e 94 99 17 	call	0x2f32	; 0x2f32 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 0,"Enter Pass:");
     fce:	2b ec       	ldi	r18, 0xCB	; 203
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	a9 01       	movw	r20, r18
     fd8:	0e 94 5d 17 	call	0x2eba	; 0x2eba <LCD_displayStringRowColumn>
				LCD_moveCursor(1, 0);
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	60 e0       	ldi	r22, 0x00	; 0
     fe0:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_moveCursor>
     fe4:	fe 01       	movw	r30, r28
     fe6:	ef 5a       	subi	r30, 0xAF	; 175
     fe8:	ff 4f       	sbci	r31, 0xFF	; 255
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	aa ef       	ldi	r26, 0xFA	; 250
     ff0:	b3 e4       	ldi	r27, 0x43	; 67
     ff2:	80 83       	st	Z, r24
     ff4:	91 83       	std	Z+1, r25	; 0x01
     ff6:	a2 83       	std	Z+2, r26	; 0x02
     ff8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ffa:	8e 01       	movw	r16, r28
     ffc:	03 5b       	subi	r16, 0xB3	; 179
     ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    1000:	fe 01       	movw	r30, r28
    1002:	ef 5a       	subi	r30, 0xAF	; 175
    1004:	ff 4f       	sbci	r31, 0xFF	; 255
    1006:	60 81       	ld	r22, Z
    1008:	71 81       	ldd	r23, Z+1	; 0x01
    100a:	82 81       	ldd	r24, Z+2	; 0x02
    100c:	93 81       	ldd	r25, Z+3	; 0x03
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	4a e7       	ldi	r20, 0x7A	; 122
    1014:	53 e4       	ldi	r21, 0x43	; 67
    1016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    101a:	dc 01       	movw	r26, r24
    101c:	cb 01       	movw	r24, r22
    101e:	f8 01       	movw	r30, r16
    1020:	80 83       	st	Z, r24
    1022:	91 83       	std	Z+1, r25	; 0x01
    1024:	a2 83       	std	Z+2, r26	; 0x02
    1026:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1028:	fe 01       	movw	r30, r28
    102a:	e3 5b       	subi	r30, 0xB3	; 179
    102c:	ff 4f       	sbci	r31, 0xFF	; 255
    102e:	60 81       	ld	r22, Z
    1030:	71 81       	ldd	r23, Z+1	; 0x01
    1032:	82 81       	ldd	r24, Z+2	; 0x02
    1034:	93 81       	ldd	r25, Z+3	; 0x03
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	40 e8       	ldi	r20, 0x80	; 128
    103c:	5f e3       	ldi	r21, 0x3F	; 63
    103e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1042:	88 23       	and	r24, r24
    1044:	44 f4       	brge	.+16     	; 0x1056 <main+0x510>
		__ticks = 1;
    1046:	fe 01       	movw	r30, r28
    1048:	e5 5b       	subi	r30, 0xB5	; 181
    104a:	ff 4f       	sbci	r31, 0xFF	; 255
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	91 83       	std	Z+1, r25	; 0x01
    1052:	80 83       	st	Z, r24
    1054:	64 c0       	rjmp	.+200    	; 0x111e <main+0x5d8>
	else if (__tmp > 65535)
    1056:	fe 01       	movw	r30, r28
    1058:	e3 5b       	subi	r30, 0xB3	; 179
    105a:	ff 4f       	sbci	r31, 0xFF	; 255
    105c:	60 81       	ld	r22, Z
    105e:	71 81       	ldd	r23, Z+1	; 0x01
    1060:	82 81       	ldd	r24, Z+2	; 0x02
    1062:	93 81       	ldd	r25, Z+3	; 0x03
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	3f ef       	ldi	r19, 0xFF	; 255
    1068:	4f e7       	ldi	r20, 0x7F	; 127
    106a:	57 e4       	ldi	r21, 0x47	; 71
    106c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1070:	18 16       	cp	r1, r24
    1072:	0c f0       	brlt	.+2      	; 0x1076 <main+0x530>
    1074:	43 c0       	rjmp	.+134    	; 0x10fc <main+0x5b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1076:	fe 01       	movw	r30, r28
    1078:	ef 5a       	subi	r30, 0xAF	; 175
    107a:	ff 4f       	sbci	r31, 0xFF	; 255
    107c:	60 81       	ld	r22, Z
    107e:	71 81       	ldd	r23, Z+1	; 0x01
    1080:	82 81       	ldd	r24, Z+2	; 0x02
    1082:	93 81       	ldd	r25, Z+3	; 0x03
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	40 e2       	ldi	r20, 0x20	; 32
    108a:	51 e4       	ldi	r21, 0x41	; 65
    108c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1090:	dc 01       	movw	r26, r24
    1092:	cb 01       	movw	r24, r22
    1094:	8e 01       	movw	r16, r28
    1096:	05 5b       	subi	r16, 0xB5	; 181
    1098:	1f 4f       	sbci	r17, 0xFF	; 255
    109a:	bc 01       	movw	r22, r24
    109c:	cd 01       	movw	r24, r26
    109e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a2:	dc 01       	movw	r26, r24
    10a4:	cb 01       	movw	r24, r22
    10a6:	f8 01       	movw	r30, r16
    10a8:	91 83       	std	Z+1, r25	; 0x01
    10aa:	80 83       	st	Z, r24
    10ac:	1f c0       	rjmp	.+62     	; 0x10ec <main+0x5a6>
    10ae:	fe 01       	movw	r30, r28
    10b0:	e7 5b       	subi	r30, 0xB7	; 183
    10b2:	ff 4f       	sbci	r31, 0xFF	; 255
    10b4:	89 e1       	ldi	r24, 0x19	; 25
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	91 83       	std	Z+1, r25	; 0x01
    10ba:	80 83       	st	Z, r24
    10bc:	fe 01       	movw	r30, r28
    10be:	e7 5b       	subi	r30, 0xB7	; 183
    10c0:	ff 4f       	sbci	r31, 0xFF	; 255
    10c2:	80 81       	ld	r24, Z
    10c4:	91 81       	ldd	r25, Z+1	; 0x01
    10c6:	01 97       	sbiw	r24, 0x01	; 1
    10c8:	f1 f7       	brne	.-4      	; 0x10c6 <main+0x580>
    10ca:	fe 01       	movw	r30, r28
    10cc:	e7 5b       	subi	r30, 0xB7	; 183
    10ce:	ff 4f       	sbci	r31, 0xFF	; 255
    10d0:	91 83       	std	Z+1, r25	; 0x01
    10d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d4:	de 01       	movw	r26, r28
    10d6:	a5 5b       	subi	r26, 0xB5	; 181
    10d8:	bf 4f       	sbci	r27, 0xFF	; 255
    10da:	fe 01       	movw	r30, r28
    10dc:	e5 5b       	subi	r30, 0xB5	; 181
    10de:	ff 4f       	sbci	r31, 0xFF	; 255
    10e0:	80 81       	ld	r24, Z
    10e2:	91 81       	ldd	r25, Z+1	; 0x01
    10e4:	01 97       	sbiw	r24, 0x01	; 1
    10e6:	11 96       	adiw	r26, 0x01	; 1
    10e8:	9c 93       	st	X, r25
    10ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ec:	fe 01       	movw	r30, r28
    10ee:	e5 5b       	subi	r30, 0xB5	; 181
    10f0:	ff 4f       	sbci	r31, 0xFF	; 255
    10f2:	80 81       	ld	r24, Z
    10f4:	91 81       	ldd	r25, Z+1	; 0x01
    10f6:	00 97       	sbiw	r24, 0x00	; 0
    10f8:	d1 f6       	brne	.-76     	; 0x10ae <main+0x568>
    10fa:	27 c0       	rjmp	.+78     	; 0x114a <main+0x604>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10fc:	8e 01       	movw	r16, r28
    10fe:	05 5b       	subi	r16, 0xB5	; 181
    1100:	1f 4f       	sbci	r17, 0xFF	; 255
    1102:	fe 01       	movw	r30, r28
    1104:	e3 5b       	subi	r30, 0xB3	; 179
    1106:	ff 4f       	sbci	r31, 0xFF	; 255
    1108:	60 81       	ld	r22, Z
    110a:	71 81       	ldd	r23, Z+1	; 0x01
    110c:	82 81       	ldd	r24, Z+2	; 0x02
    110e:	93 81       	ldd	r25, Z+3	; 0x03
    1110:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1114:	dc 01       	movw	r26, r24
    1116:	cb 01       	movw	r24, r22
    1118:	f8 01       	movw	r30, r16
    111a:	91 83       	std	Z+1, r25	; 0x01
    111c:	80 83       	st	Z, r24
    111e:	de 01       	movw	r26, r28
    1120:	a9 5b       	subi	r26, 0xB9	; 185
    1122:	bf 4f       	sbci	r27, 0xFF	; 255
    1124:	fe 01       	movw	r30, r28
    1126:	e5 5b       	subi	r30, 0xB5	; 181
    1128:	ff 4f       	sbci	r31, 0xFF	; 255
    112a:	80 81       	ld	r24, Z
    112c:	91 81       	ldd	r25, Z+1	; 0x01
    112e:	8d 93       	st	X+, r24
    1130:	9c 93       	st	X, r25
    1132:	fe 01       	movw	r30, r28
    1134:	e9 5b       	subi	r30, 0xB9	; 185
    1136:	ff 4f       	sbci	r31, 0xFF	; 255
    1138:	80 81       	ld	r24, Z
    113a:	91 81       	ldd	r25, Z+1	; 0x01
    113c:	01 97       	sbiw	r24, 0x01	; 1
    113e:	f1 f7       	brne	.-4      	; 0x113c <main+0x5f6>
    1140:	fe 01       	movw	r30, r28
    1142:	e9 5b       	subi	r30, 0xB9	; 185
    1144:	ff 4f       	sbci	r31, 0xFF	; 255
    1146:	91 83       	std	Z+1, r25	; 0x01
    1148:	80 83       	st	Z, r24
				/* delay to display the required message */
				_delay_ms(500);

				getPassword(g_a_firstPass);
    114a:	86 e3       	ldi	r24, 0x36	; 54
    114c:	91 e0       	ldi	r25, 0x01	; 1
    114e:	0e 94 df 0b 	call	0x17be	; 0x17be <getPassword>
				prepareToSend(g_a_firstPass, g_a_Pass_send);
    1152:	86 e3       	ldi	r24, 0x36	; 54
    1154:	91 e0       	ldi	r25, 0x01	; 1
    1156:	2b e3       	ldi	r18, 0x3B	; 59
    1158:	31 e0       	ldi	r19, 0x01	; 1
    115a:	b9 01       	movw	r22, r18
    115c:	0e 94 c6 0c 	call	0x198c	; 0x198c <prepareToSend>

				UART_sendByte(OPEN_DOOR);
    1160:	84 e0       	ldi	r24, 0x04	; 4
    1162:	0e 94 82 18 	call	0x3104	; 0x3104 <UART_sendByte>
				UART_sendString(g_a_Pass_send);
    1166:	8b e3       	ldi	r24, 0x3B	; 59
    1168:	91 e0       	ldi	r25, 0x01	; 1
    116a:	0e 94 a8 18 	call	0x3150	; 0x3150 <UART_sendString>
    116e:	fe 01       	movw	r30, r28
    1170:	ed 5b       	subi	r30, 0xBD	; 189
    1172:	ff 4f       	sbci	r31, 0xFF	; 255
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	aa ef       	ldi	r26, 0xFA	; 250
    117a:	b3 e4       	ldi	r27, 0x43	; 67
    117c:	80 83       	st	Z, r24
    117e:	91 83       	std	Z+1, r25	; 0x01
    1180:	a2 83       	std	Z+2, r26	; 0x02
    1182:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1184:	8e 01       	movw	r16, r28
    1186:	01 5c       	subi	r16, 0xC1	; 193
    1188:	1f 4f       	sbci	r17, 0xFF	; 255
    118a:	fe 01       	movw	r30, r28
    118c:	ed 5b       	subi	r30, 0xBD	; 189
    118e:	ff 4f       	sbci	r31, 0xFF	; 255
    1190:	60 81       	ld	r22, Z
    1192:	71 81       	ldd	r23, Z+1	; 0x01
    1194:	82 81       	ldd	r24, Z+2	; 0x02
    1196:	93 81       	ldd	r25, Z+3	; 0x03
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	4a e7       	ldi	r20, 0x7A	; 122
    119e:	53 e4       	ldi	r21, 0x43	; 67
    11a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a4:	dc 01       	movw	r26, r24
    11a6:	cb 01       	movw	r24, r22
    11a8:	f8 01       	movw	r30, r16
    11aa:	80 83       	st	Z, r24
    11ac:	91 83       	std	Z+1, r25	; 0x01
    11ae:	a2 83       	std	Z+2, r26	; 0x02
    11b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11b2:	fe 01       	movw	r30, r28
    11b4:	ff 96       	adiw	r30, 0x3f	; 63
    11b6:	60 81       	ld	r22, Z
    11b8:	71 81       	ldd	r23, Z+1	; 0x01
    11ba:	82 81       	ldd	r24, Z+2	; 0x02
    11bc:	93 81       	ldd	r25, Z+3	; 0x03
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	40 e8       	ldi	r20, 0x80	; 128
    11c4:	5f e3       	ldi	r21, 0x3F	; 63
    11c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11ca:	88 23       	and	r24, r24
    11cc:	2c f4       	brge	.+10     	; 0x11d8 <main+0x692>
		__ticks = 1;
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	9e af       	std	Y+62, r25	; 0x3e
    11d4:	8d af       	std	Y+61, r24	; 0x3d
    11d6:	46 c0       	rjmp	.+140    	; 0x1264 <main+0x71e>
	else if (__tmp > 65535)
    11d8:	fe 01       	movw	r30, r28
    11da:	ff 96       	adiw	r30, 0x3f	; 63
    11dc:	60 81       	ld	r22, Z
    11de:	71 81       	ldd	r23, Z+1	; 0x01
    11e0:	82 81       	ldd	r24, Z+2	; 0x02
    11e2:	93 81       	ldd	r25, Z+3	; 0x03
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	3f ef       	ldi	r19, 0xFF	; 255
    11e8:	4f e7       	ldi	r20, 0x7F	; 127
    11ea:	57 e4       	ldi	r21, 0x47	; 71
    11ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11f0:	18 16       	cp	r1, r24
    11f2:	64 f5       	brge	.+88     	; 0x124c <main+0x706>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11f4:	fe 01       	movw	r30, r28
    11f6:	ed 5b       	subi	r30, 0xBD	; 189
    11f8:	ff 4f       	sbci	r31, 0xFF	; 255
    11fa:	60 81       	ld	r22, Z
    11fc:	71 81       	ldd	r23, Z+1	; 0x01
    11fe:	82 81       	ldd	r24, Z+2	; 0x02
    1200:	93 81       	ldd	r25, Z+3	; 0x03
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	40 e2       	ldi	r20, 0x20	; 32
    1208:	51 e4       	ldi	r21, 0x41	; 65
    120a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    120e:	dc 01       	movw	r26, r24
    1210:	cb 01       	movw	r24, r22
    1212:	bc 01       	movw	r22, r24
    1214:	cd 01       	movw	r24, r26
    1216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    121a:	dc 01       	movw	r26, r24
    121c:	cb 01       	movw	r24, r22
    121e:	9e af       	std	Y+62, r25	; 0x3e
    1220:	8d af       	std	Y+61, r24	; 0x3d
    1222:	0f c0       	rjmp	.+30     	; 0x1242 <main+0x6fc>
    1224:	89 e1       	ldi	r24, 0x19	; 25
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	9c af       	std	Y+60, r25	; 0x3c
    122a:	8b af       	std	Y+59, r24	; 0x3b
    122c:	8b ad       	ldd	r24, Y+59	; 0x3b
    122e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1230:	01 97       	sbiw	r24, 0x01	; 1
    1232:	f1 f7       	brne	.-4      	; 0x1230 <main+0x6ea>
    1234:	9c af       	std	Y+60, r25	; 0x3c
    1236:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1238:	8d ad       	ldd	r24, Y+61	; 0x3d
    123a:	9e ad       	ldd	r25, Y+62	; 0x3e
    123c:	01 97       	sbiw	r24, 0x01	; 1
    123e:	9e af       	std	Y+62, r25	; 0x3e
    1240:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1242:	8d ad       	ldd	r24, Y+61	; 0x3d
    1244:	9e ad       	ldd	r25, Y+62	; 0x3e
    1246:	00 97       	sbiw	r24, 0x00	; 0
    1248:	69 f7       	brne	.-38     	; 0x1224 <main+0x6de>
    124a:	1f c1       	rjmp	.+574    	; 0x148a <main+0x944>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    124c:	fe 01       	movw	r30, r28
    124e:	ff 96       	adiw	r30, 0x3f	; 63
    1250:	60 81       	ld	r22, Z
    1252:	71 81       	ldd	r23, Z+1	; 0x01
    1254:	82 81       	ldd	r24, Z+2	; 0x02
    1256:	93 81       	ldd	r25, Z+3	; 0x03
    1258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    125c:	dc 01       	movw	r26, r24
    125e:	cb 01       	movw	r24, r22
    1260:	9e af       	std	Y+62, r25	; 0x3e
    1262:	8d af       	std	Y+61, r24	; 0x3d
    1264:	8d ad       	ldd	r24, Y+61	; 0x3d
    1266:	9e ad       	ldd	r25, Y+62	; 0x3e
    1268:	9a af       	std	Y+58, r25	; 0x3a
    126a:	89 af       	std	Y+57, r24	; 0x39
    126c:	89 ad       	ldd	r24, Y+57	; 0x39
    126e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1270:	01 97       	sbiw	r24, 0x01	; 1
    1272:	f1 f7       	brne	.-4      	; 0x1270 <main+0x72a>
    1274:	9a af       	std	Y+58, r25	; 0x3a
    1276:	89 af       	std	Y+57, r24	; 0x39
    1278:	08 c1       	rjmp	.+528    	; 0x148a <main+0x944>

				/* delay until the second Micro send message before entering the switch case */
				_delay_ms(500);
			}
			else if(g_keyPressed=='-')
    127a:	80 91 46 01 	lds	r24, 0x0146
    127e:	8d 32       	cpi	r24, 0x2D	; 45
    1280:	09 f0       	breq	.+2      	; 0x1284 <main+0x73e>
    1282:	03 c1       	rjmp	.+518    	; 0x148a <main+0x944>
			{

				LCD_clearScreen();
    1284:	0e 94 99 17 	call	0x2f32	; 0x2f32 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 0,"Enter Pass:");
    1288:	2b ec       	ldi	r18, 0xCB	; 203
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	60 e0       	ldi	r22, 0x00	; 0
    1290:	a9 01       	movw	r20, r18
    1292:	0e 94 5d 17 	call	0x2eba	; 0x2eba <LCD_displayStringRowColumn>
				LCD_moveCursor(1, 0);
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	60 e0       	ldi	r22, 0x00	; 0
    129a:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_moveCursor>
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	aa ef       	ldi	r26, 0xFA	; 250
    12a4:	b3 e4       	ldi	r27, 0x43	; 67
    12a6:	8d ab       	std	Y+53, r24	; 0x35
    12a8:	9e ab       	std	Y+54, r25	; 0x36
    12aa:	af ab       	std	Y+55, r26	; 0x37
    12ac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ae:	6d a9       	ldd	r22, Y+53	; 0x35
    12b0:	7e a9       	ldd	r23, Y+54	; 0x36
    12b2:	8f a9       	ldd	r24, Y+55	; 0x37
    12b4:	98 ad       	ldd	r25, Y+56	; 0x38
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	4a e7       	ldi	r20, 0x7A	; 122
    12bc:	53 e4       	ldi	r21, 0x43	; 67
    12be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	89 ab       	std	Y+49, r24	; 0x31
    12c8:	9a ab       	std	Y+50, r25	; 0x32
    12ca:	ab ab       	std	Y+51, r26	; 0x33
    12cc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    12ce:	69 a9       	ldd	r22, Y+49	; 0x31
    12d0:	7a a9       	ldd	r23, Y+50	; 0x32
    12d2:	8b a9       	ldd	r24, Y+51	; 0x33
    12d4:	9c a9       	ldd	r25, Y+52	; 0x34
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	40 e8       	ldi	r20, 0x80	; 128
    12dc:	5f e3       	ldi	r21, 0x3F	; 63
    12de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12e2:	88 23       	and	r24, r24
    12e4:	2c f4       	brge	.+10     	; 0x12f0 <main+0x7aa>
		__ticks = 1;
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	98 ab       	std	Y+48, r25	; 0x30
    12ec:	8f a7       	std	Y+47, r24	; 0x2f
    12ee:	3f c0       	rjmp	.+126    	; 0x136e <main+0x828>
	else if (__tmp > 65535)
    12f0:	69 a9       	ldd	r22, Y+49	; 0x31
    12f2:	7a a9       	ldd	r23, Y+50	; 0x32
    12f4:	8b a9       	ldd	r24, Y+51	; 0x33
    12f6:	9c a9       	ldd	r25, Y+52	; 0x34
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	3f ef       	ldi	r19, 0xFF	; 255
    12fc:	4f e7       	ldi	r20, 0x7F	; 127
    12fe:	57 e4       	ldi	r21, 0x47	; 71
    1300:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1304:	18 16       	cp	r1, r24
    1306:	4c f5       	brge	.+82     	; 0x135a <main+0x814>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1308:	6d a9       	ldd	r22, Y+53	; 0x35
    130a:	7e a9       	ldd	r23, Y+54	; 0x36
    130c:	8f a9       	ldd	r24, Y+55	; 0x37
    130e:	98 ad       	ldd	r25, Y+56	; 0x38
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	40 e2       	ldi	r20, 0x20	; 32
    1316:	51 e4       	ldi	r21, 0x41	; 65
    1318:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	bc 01       	movw	r22, r24
    1322:	cd 01       	movw	r24, r26
    1324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	98 ab       	std	Y+48, r25	; 0x30
    132e:	8f a7       	std	Y+47, r24	; 0x2f
    1330:	0f c0       	rjmp	.+30     	; 0x1350 <main+0x80a>
    1332:	89 e1       	ldi	r24, 0x19	; 25
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	9e a7       	std	Y+46, r25	; 0x2e
    1338:	8d a7       	std	Y+45, r24	; 0x2d
    133a:	8d a5       	ldd	r24, Y+45	; 0x2d
    133c:	9e a5       	ldd	r25, Y+46	; 0x2e
    133e:	01 97       	sbiw	r24, 0x01	; 1
    1340:	f1 f7       	brne	.-4      	; 0x133e <main+0x7f8>
    1342:	9e a7       	std	Y+46, r25	; 0x2e
    1344:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1346:	8f a5       	ldd	r24, Y+47	; 0x2f
    1348:	98 a9       	ldd	r25, Y+48	; 0x30
    134a:	01 97       	sbiw	r24, 0x01	; 1
    134c:	98 ab       	std	Y+48, r25	; 0x30
    134e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1350:	8f a5       	ldd	r24, Y+47	; 0x2f
    1352:	98 a9       	ldd	r25, Y+48	; 0x30
    1354:	00 97       	sbiw	r24, 0x00	; 0
    1356:	69 f7       	brne	.-38     	; 0x1332 <main+0x7ec>
    1358:	14 c0       	rjmp	.+40     	; 0x1382 <main+0x83c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    135a:	69 a9       	ldd	r22, Y+49	; 0x31
    135c:	7a a9       	ldd	r23, Y+50	; 0x32
    135e:	8b a9       	ldd	r24, Y+51	; 0x33
    1360:	9c a9       	ldd	r25, Y+52	; 0x34
    1362:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	98 ab       	std	Y+48, r25	; 0x30
    136c:	8f a7       	std	Y+47, r24	; 0x2f
    136e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1370:	98 a9       	ldd	r25, Y+48	; 0x30
    1372:	9c a7       	std	Y+44, r25	; 0x2c
    1374:	8b a7       	std	Y+43, r24	; 0x2b
    1376:	8b a5       	ldd	r24, Y+43	; 0x2b
    1378:	9c a5       	ldd	r25, Y+44	; 0x2c
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	f1 f7       	brne	.-4      	; 0x137a <main+0x834>
    137e:	9c a7       	std	Y+44, r25	; 0x2c
    1380:	8b a7       	std	Y+43, r24	; 0x2b
				/* delay to display the required message */
				_delay_ms(500);

				getPassword(g_a_firstPass);
    1382:	86 e3       	ldi	r24, 0x36	; 54
    1384:	91 e0       	ldi	r25, 0x01	; 1
    1386:	0e 94 df 0b 	call	0x17be	; 0x17be <getPassword>
				prepareToSend(g_a_firstPass, g_a_Pass_send);
    138a:	86 e3       	ldi	r24, 0x36	; 54
    138c:	91 e0       	ldi	r25, 0x01	; 1
    138e:	2b e3       	ldi	r18, 0x3B	; 59
    1390:	31 e0       	ldi	r19, 0x01	; 1
    1392:	b9 01       	movw	r22, r18
    1394:	0e 94 c6 0c 	call	0x198c	; 0x198c <prepareToSend>

				UART_sendByte(CHANGE_PASSWORD);
    1398:	83 e0       	ldi	r24, 0x03	; 3
    139a:	0e 94 82 18 	call	0x3104	; 0x3104 <UART_sendByte>
				UART_sendString(g_a_Pass_send);
    139e:	8b e3       	ldi	r24, 0x3B	; 59
    13a0:	91 e0       	ldi	r25, 0x01	; 1
    13a2:	0e 94 a8 18 	call	0x3150	; 0x3150 <UART_sendString>
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	aa ef       	ldi	r26, 0xFA	; 250
    13ac:	b3 e4       	ldi	r27, 0x43	; 67
    13ae:	8f a3       	std	Y+39, r24	; 0x27
    13b0:	98 a7       	std	Y+40, r25	; 0x28
    13b2:	a9 a7       	std	Y+41, r26	; 0x29
    13b4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13b6:	6f a1       	ldd	r22, Y+39	; 0x27
    13b8:	78 a5       	ldd	r23, Y+40	; 0x28
    13ba:	89 a5       	ldd	r24, Y+41	; 0x29
    13bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	4a e7       	ldi	r20, 0x7A	; 122
    13c4:	53 e4       	ldi	r21, 0x43	; 67
    13c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ca:	dc 01       	movw	r26, r24
    13cc:	cb 01       	movw	r24, r22
    13ce:	8b a3       	std	Y+35, r24	; 0x23
    13d0:	9c a3       	std	Y+36, r25	; 0x24
    13d2:	ad a3       	std	Y+37, r26	; 0x25
    13d4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    13d6:	6b a1       	ldd	r22, Y+35	; 0x23
    13d8:	7c a1       	ldd	r23, Y+36	; 0x24
    13da:	8d a1       	ldd	r24, Y+37	; 0x25
    13dc:	9e a1       	ldd	r25, Y+38	; 0x26
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	40 e8       	ldi	r20, 0x80	; 128
    13e4:	5f e3       	ldi	r21, 0x3F	; 63
    13e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13ea:	88 23       	and	r24, r24
    13ec:	2c f4       	brge	.+10     	; 0x13f8 <main+0x8b2>
		__ticks = 1;
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	9a a3       	std	Y+34, r25	; 0x22
    13f4:	89 a3       	std	Y+33, r24	; 0x21
    13f6:	3f c0       	rjmp	.+126    	; 0x1476 <main+0x930>
	else if (__tmp > 65535)
    13f8:	6b a1       	ldd	r22, Y+35	; 0x23
    13fa:	7c a1       	ldd	r23, Y+36	; 0x24
    13fc:	8d a1       	ldd	r24, Y+37	; 0x25
    13fe:	9e a1       	ldd	r25, Y+38	; 0x26
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	3f ef       	ldi	r19, 0xFF	; 255
    1404:	4f e7       	ldi	r20, 0x7F	; 127
    1406:	57 e4       	ldi	r21, 0x47	; 71
    1408:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    140c:	18 16       	cp	r1, r24
    140e:	4c f5       	brge	.+82     	; 0x1462 <main+0x91c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1410:	6f a1       	ldd	r22, Y+39	; 0x27
    1412:	78 a5       	ldd	r23, Y+40	; 0x28
    1414:	89 a5       	ldd	r24, Y+41	; 0x29
    1416:	9a a5       	ldd	r25, Y+42	; 0x2a
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	40 e2       	ldi	r20, 0x20	; 32
    141e:	51 e4       	ldi	r21, 0x41	; 65
    1420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1424:	dc 01       	movw	r26, r24
    1426:	cb 01       	movw	r24, r22
    1428:	bc 01       	movw	r22, r24
    142a:	cd 01       	movw	r24, r26
    142c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	9a a3       	std	Y+34, r25	; 0x22
    1436:	89 a3       	std	Y+33, r24	; 0x21
    1438:	0f c0       	rjmp	.+30     	; 0x1458 <main+0x912>
    143a:	89 e1       	ldi	r24, 0x19	; 25
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	98 a3       	std	Y+32, r25	; 0x20
    1440:	8f 8f       	std	Y+31, r24	; 0x1f
    1442:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1444:	98 a1       	ldd	r25, Y+32	; 0x20
    1446:	01 97       	sbiw	r24, 0x01	; 1
    1448:	f1 f7       	brne	.-4      	; 0x1446 <main+0x900>
    144a:	98 a3       	std	Y+32, r25	; 0x20
    144c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    144e:	89 a1       	ldd	r24, Y+33	; 0x21
    1450:	9a a1       	ldd	r25, Y+34	; 0x22
    1452:	01 97       	sbiw	r24, 0x01	; 1
    1454:	9a a3       	std	Y+34, r25	; 0x22
    1456:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1458:	89 a1       	ldd	r24, Y+33	; 0x21
    145a:	9a a1       	ldd	r25, Y+34	; 0x22
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	69 f7       	brne	.-38     	; 0x143a <main+0x8f4>
    1460:	14 c0       	rjmp	.+40     	; 0x148a <main+0x944>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1462:	6b a1       	ldd	r22, Y+35	; 0x23
    1464:	7c a1       	ldd	r23, Y+36	; 0x24
    1466:	8d a1       	ldd	r24, Y+37	; 0x25
    1468:	9e a1       	ldd	r25, Y+38	; 0x26
    146a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	9a a3       	std	Y+34, r25	; 0x22
    1474:	89 a3       	std	Y+33, r24	; 0x21
    1476:	89 a1       	ldd	r24, Y+33	; 0x21
    1478:	9a a1       	ldd	r25, Y+34	; 0x22
    147a:	9e 8f       	std	Y+30, r25	; 0x1e
    147c:	8d 8f       	std	Y+29, r24	; 0x1d
    147e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1480:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1482:	01 97       	sbiw	r24, 0x01	; 1
    1484:	f1 f7       	brne	.-4      	; 0x1482 <main+0x93c>
    1486:	9e 8f       	std	Y+30, r25	; 0x1e
    1488:	8d 8f       	std	Y+29, r24	; 0x1d

				/* delay until the second Micro send message before entering the switch case */
				_delay_ms(500);
			}

			switch(g_recieved_message)
    148a:	80 91 47 01 	lds	r24, 0x0147
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	c0 58       	subi	r28, 0x80	; 128
    1494:	df 4f       	sbci	r29, 0xFF	; 255
    1496:	39 83       	std	Y+1, r19	; 0x01
    1498:	28 83       	st	Y, r18
    149a:	c0 58       	subi	r28, 0x80	; 128
    149c:	d0 40       	sbci	r29, 0x00	; 0
    149e:	c0 58       	subi	r28, 0x80	; 128
    14a0:	df 4f       	sbci	r29, 0xFF	; 255
    14a2:	88 81       	ld	r24, Y
    14a4:	99 81       	ldd	r25, Y+1	; 0x01
    14a6:	c0 58       	subi	r28, 0x80	; 128
    14a8:	d0 40       	sbci	r29, 0x00	; 0
    14aa:	85 30       	cpi	r24, 0x05	; 5
    14ac:	91 05       	cpc	r25, r1
    14ae:	49 f1       	breq	.+82     	; 0x1502 <main+0x9bc>
    14b0:	c0 58       	subi	r28, 0x80	; 128
    14b2:	df 4f       	sbci	r29, 0xFF	; 255
    14b4:	e8 81       	ld	r30, Y
    14b6:	f9 81       	ldd	r31, Y+1	; 0x01
    14b8:	c0 58       	subi	r28, 0x80	; 128
    14ba:	d0 40       	sbci	r29, 0x00	; 0
    14bc:	e6 30       	cpi	r30, 0x06	; 6
    14be:	f1 05       	cpc	r31, r1
    14c0:	5c f4       	brge	.+22     	; 0x14d8 <main+0x992>
    14c2:	c0 58       	subi	r28, 0x80	; 128
    14c4:	df 4f       	sbci	r29, 0xFF	; 255
    14c6:	28 81       	ld	r18, Y
    14c8:	39 81       	ldd	r19, Y+1	; 0x01
    14ca:	c0 58       	subi	r28, 0x80	; 128
    14cc:	d0 40       	sbci	r29, 0x00	; 0
    14ce:	21 30       	cpi	r18, 0x01	; 1
    14d0:	31 05       	cpc	r19, r1
    14d2:	09 f4       	brne	.+2      	; 0x14d6 <main+0x990>
    14d4:	54 c1       	rjmp	.+680    	; 0x177e <main+0xc38>
    14d6:	8f cb       	rjmp	.-2274   	; 0xbf6 <main+0xb0>
    14d8:	c0 58       	subi	r28, 0x80	; 128
    14da:	df 4f       	sbci	r29, 0xFF	; 255
    14dc:	88 81       	ld	r24, Y
    14de:	99 81       	ldd	r25, Y+1	; 0x01
    14e0:	c0 58       	subi	r28, 0x80	; 128
    14e2:	d0 40       	sbci	r29, 0x00	; 0
    14e4:	86 30       	cpi	r24, 0x06	; 6
    14e6:	91 05       	cpc	r25, r1
    14e8:	09 f4       	brne	.+2      	; 0x14ec <main+0x9a6>
    14ea:	ce c0       	rjmp	.+412    	; 0x1688 <main+0xb42>
    14ec:	c0 58       	subi	r28, 0x80	; 128
    14ee:	df 4f       	sbci	r29, 0xFF	; 255
    14f0:	e8 81       	ld	r30, Y
    14f2:	f9 81       	ldd	r31, Y+1	; 0x01
    14f4:	c0 58       	subi	r28, 0x80	; 128
    14f6:	d0 40       	sbci	r29, 0x00	; 0
    14f8:	e7 30       	cpi	r30, 0x07	; 7
    14fa:	f1 05       	cpc	r31, r1
    14fc:	09 f4       	brne	.+2      	; 0x1500 <main+0x9ba>
    14fe:	44 c1       	rjmp	.+648    	; 0x1788 <main+0xc42>
    1500:	7a cb       	rjmp	.-2316   	; 0xbf6 <main+0xb0>
			/* in every case must clear the g_recieved_message to enter the switch case one time only
			 *  and then stay in default
			 */
			case CORRECT_PASSWORD:

				LCD_clearScreen();
    1502:	0e 94 99 17 	call	0x2f32	; 0x2f32 <LCD_clearScreen>
				LCD_displayString("CORRECT_PASSWORD");
    1506:	87 ed       	ldi	r24, 0xD7	; 215
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <LCD_displayString>
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	a8 ec       	ldi	r26, 0xC8	; 200
    1514:	b3 e4       	ldi	r27, 0x43	; 67
    1516:	89 8f       	std	Y+25, r24	; 0x19
    1518:	9a 8f       	std	Y+26, r25	; 0x1a
    151a:	ab 8f       	std	Y+27, r26	; 0x1b
    151c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    151e:	69 8d       	ldd	r22, Y+25	; 0x19
    1520:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1522:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1524:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1526:	20 e0       	ldi	r18, 0x00	; 0
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	4a e7       	ldi	r20, 0x7A	; 122
    152c:	53 e4       	ldi	r21, 0x43	; 67
    152e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1532:	dc 01       	movw	r26, r24
    1534:	cb 01       	movw	r24, r22
    1536:	8d 8b       	std	Y+21, r24	; 0x15
    1538:	9e 8b       	std	Y+22, r25	; 0x16
    153a:	af 8b       	std	Y+23, r26	; 0x17
    153c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    153e:	6d 89       	ldd	r22, Y+21	; 0x15
    1540:	7e 89       	ldd	r23, Y+22	; 0x16
    1542:	8f 89       	ldd	r24, Y+23	; 0x17
    1544:	98 8d       	ldd	r25, Y+24	; 0x18
    1546:	20 e0       	ldi	r18, 0x00	; 0
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	40 e8       	ldi	r20, 0x80	; 128
    154c:	5f e3       	ldi	r21, 0x3F	; 63
    154e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1552:	88 23       	and	r24, r24
    1554:	2c f4       	brge	.+10     	; 0x1560 <main+0xa1a>
		__ticks = 1;
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	9c 8b       	std	Y+20, r25	; 0x14
    155c:	8b 8b       	std	Y+19, r24	; 0x13
    155e:	3f c0       	rjmp	.+126    	; 0x15de <main+0xa98>
	else if (__tmp > 65535)
    1560:	6d 89       	ldd	r22, Y+21	; 0x15
    1562:	7e 89       	ldd	r23, Y+22	; 0x16
    1564:	8f 89       	ldd	r24, Y+23	; 0x17
    1566:	98 8d       	ldd	r25, Y+24	; 0x18
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	3f ef       	ldi	r19, 0xFF	; 255
    156c:	4f e7       	ldi	r20, 0x7F	; 127
    156e:	57 e4       	ldi	r21, 0x47	; 71
    1570:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1574:	18 16       	cp	r1, r24
    1576:	4c f5       	brge	.+82     	; 0x15ca <main+0xa84>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1578:	69 8d       	ldd	r22, Y+25	; 0x19
    157a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    157c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    157e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	40 e2       	ldi	r20, 0x20	; 32
    1586:	51 e4       	ldi	r21, 0x41	; 65
    1588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    158c:	dc 01       	movw	r26, r24
    158e:	cb 01       	movw	r24, r22
    1590:	bc 01       	movw	r22, r24
    1592:	cd 01       	movw	r24, r26
    1594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1598:	dc 01       	movw	r26, r24
    159a:	cb 01       	movw	r24, r22
    159c:	9c 8b       	std	Y+20, r25	; 0x14
    159e:	8b 8b       	std	Y+19, r24	; 0x13
    15a0:	0f c0       	rjmp	.+30     	; 0x15c0 <main+0xa7a>
    15a2:	89 e1       	ldi	r24, 0x19	; 25
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	9a 8b       	std	Y+18, r25	; 0x12
    15a8:	89 8b       	std	Y+17, r24	; 0x11
    15aa:	89 89       	ldd	r24, Y+17	; 0x11
    15ac:	9a 89       	ldd	r25, Y+18	; 0x12
    15ae:	01 97       	sbiw	r24, 0x01	; 1
    15b0:	f1 f7       	brne	.-4      	; 0x15ae <main+0xa68>
    15b2:	9a 8b       	std	Y+18, r25	; 0x12
    15b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b6:	8b 89       	ldd	r24, Y+19	; 0x13
    15b8:	9c 89       	ldd	r25, Y+20	; 0x14
    15ba:	01 97       	sbiw	r24, 0x01	; 1
    15bc:	9c 8b       	std	Y+20, r25	; 0x14
    15be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c0:	8b 89       	ldd	r24, Y+19	; 0x13
    15c2:	9c 89       	ldd	r25, Y+20	; 0x14
    15c4:	00 97       	sbiw	r24, 0x00	; 0
    15c6:	69 f7       	brne	.-38     	; 0x15a2 <main+0xa5c>
    15c8:	14 c0       	rjmp	.+40     	; 0x15f2 <main+0xaac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ca:	6d 89       	ldd	r22, Y+21	; 0x15
    15cc:	7e 89       	ldd	r23, Y+22	; 0x16
    15ce:	8f 89       	ldd	r24, Y+23	; 0x17
    15d0:	98 8d       	ldd	r25, Y+24	; 0x18
    15d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d6:	dc 01       	movw	r26, r24
    15d8:	cb 01       	movw	r24, r22
    15da:	9c 8b       	std	Y+20, r25	; 0x14
    15dc:	8b 8b       	std	Y+19, r24	; 0x13
    15de:	8b 89       	ldd	r24, Y+19	; 0x13
    15e0:	9c 89       	ldd	r25, Y+20	; 0x14
    15e2:	98 8b       	std	Y+16, r25	; 0x10
    15e4:	8f 87       	std	Y+15, r24	; 0x0f
    15e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    15e8:	98 89       	ldd	r25, Y+16	; 0x10
    15ea:	01 97       	sbiw	r24, 0x01	; 1
    15ec:	f1 f7       	brne	.-4      	; 0x15ea <main+0xaa4>
    15ee:	98 8b       	std	Y+16, r25	; 0x10
    15f0:	8f 87       	std	Y+15, r24	; 0x0f
				/* delay to display the required message */
				_delay_ms(400);

				Timer0_setcallback(callBackFunction_rotateMotor);
    15f2:	81 e1       	ldi	r24, 0x11	; 17
    15f4:	9d e0       	ldi	r25, 0x0D	; 13
    15f6:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <Timer0_setcallback>
				Timer0_Init(&Timer0_Config);
    15fa:	ce 01       	movw	r24, r28
    15fc:	87 58       	subi	r24, 0x87	; 135
    15fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1600:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <Timer0_Init>

				LCD_clearScreen();
    1604:	0e 94 99 17 	call	0x2f32	; 0x2f32 <LCD_clearScreen>
				LCD_displayString("Door Unlocking");
    1608:	88 ee       	ldi	r24, 0xE8	; 232
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <LCD_displayString>

				/* loop until the timer0 complete all interrupts */
				while(g_interrupt_flag !=0){}
    1610:	80 91 2e 01 	lds	r24, 0x012E
    1614:	88 23       	and	r24, r24
    1616:	e1 f7       	brne	.-8      	; 0x1610 <main+0xaca>
				g_interrupt_flag=1;
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	80 93 2e 01 	sts	0x012E, r24
				Timer0_DeInit();
    161e:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <Timer0_DeInit>


				Timer0_setcallback(callBackFunction_holdMotor);
    1622:	8e e2       	ldi	r24, 0x2E	; 46
    1624:	9d e0       	ldi	r25, 0x0D	; 13
    1626:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <Timer0_setcallback>
				Timer0_Init(&Timer0_Config);
    162a:	ce 01       	movw	r24, r28
    162c:	87 58       	subi	r24, 0x87	; 135
    162e:	9f 4f       	sbci	r25, 0xFF	; 255
    1630:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <Timer0_Init>

				LCD_clearScreen();
    1634:	0e 94 99 17 	call	0x2f32	; 0x2f32 <LCD_clearScreen>
				LCD_displayString("Holding Door");
    1638:	87 ef       	ldi	r24, 0xF7	; 247
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <LCD_displayString>

				while(g_interrupt_flag !=0){}
    1640:	80 91 2e 01 	lds	r24, 0x012E
    1644:	88 23       	and	r24, r24
    1646:	e1 f7       	brne	.-8      	; 0x1640 <main+0xafa>
				g_interrupt_flag=1;
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	80 93 2e 01 	sts	0x012E, r24
				Timer0_DeInit();
    164e:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <Timer0_DeInit>


				Timer0_setcallback(callBackFunction_rotateMotor);
    1652:	81 e1       	ldi	r24, 0x11	; 17
    1654:	9d e0       	ldi	r25, 0x0D	; 13
    1656:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <Timer0_setcallback>
				Timer0_Init(&Timer0_Config);
    165a:	ce 01       	movw	r24, r28
    165c:	87 58       	subi	r24, 0x87	; 135
    165e:	9f 4f       	sbci	r25, 0xFF	; 255
    1660:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <Timer0_Init>

				LCD_clearScreen();
    1664:	0e 94 99 17 	call	0x2f32	; 0x2f32 <LCD_clearScreen>
				LCD_displayString("Door locking");
    1668:	84 e0       	ldi	r24, 0x04	; 4
    166a:	91 e0       	ldi	r25, 0x01	; 1
    166c:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <LCD_displayString>

				while(g_interrupt_flag !=0){}
    1670:	80 91 2e 01 	lds	r24, 0x012E
    1674:	88 23       	and	r24, r24
    1676:	e1 f7       	brne	.-8      	; 0x1670 <main+0xb2a>
				g_interrupt_flag=1;
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	80 93 2e 01 	sts	0x012E, r24
				Timer0_DeInit();
    167e:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <Timer0_DeInit>

				g_recieved_message=0;
    1682:	10 92 47 01 	sts	0x0147, r1
    1686:	b7 ca       	rjmp	.-2706   	; 0xbf6 <main+0xb0>

				break;

			case WRONG_PASSWORD:

				LCD_clearScreen();
    1688:	0e 94 99 17 	call	0x2f32	; 0x2f32 <LCD_clearScreen>
				LCD_displayString("WRONG_PASSWORD");
    168c:	81 e1       	ldi	r24, 0x11	; 17
    168e:	91 e0       	ldi	r25, 0x01	; 1
    1690:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <LCD_displayString>
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	aa e7       	ldi	r26, 0x7A	; 122
    169a:	b4 e4       	ldi	r27, 0x44	; 68
    169c:	8b 87       	std	Y+11, r24	; 0x0b
    169e:	9c 87       	std	Y+12, r25	; 0x0c
    16a0:	ad 87       	std	Y+13, r26	; 0x0d
    16a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    16a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    16a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	4a e7       	ldi	r20, 0x7A	; 122
    16b2:	53 e4       	ldi	r21, 0x43	; 67
    16b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	8f 83       	std	Y+7, r24	; 0x07
    16be:	98 87       	std	Y+8, r25	; 0x08
    16c0:	a9 87       	std	Y+9, r26	; 0x09
    16c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16c4:	6f 81       	ldd	r22, Y+7	; 0x07
    16c6:	78 85       	ldd	r23, Y+8	; 0x08
    16c8:	89 85       	ldd	r24, Y+9	; 0x09
    16ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	40 e8       	ldi	r20, 0x80	; 128
    16d2:	5f e3       	ldi	r21, 0x3F	; 63
    16d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16d8:	88 23       	and	r24, r24
    16da:	2c f4       	brge	.+10     	; 0x16e6 <main+0xba0>
		__ticks = 1;
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	9e 83       	std	Y+6, r25	; 0x06
    16e2:	8d 83       	std	Y+5, r24	; 0x05
    16e4:	3f c0       	rjmp	.+126    	; 0x1764 <main+0xc1e>
	else if (__tmp > 65535)
    16e6:	6f 81       	ldd	r22, Y+7	; 0x07
    16e8:	78 85       	ldd	r23, Y+8	; 0x08
    16ea:	89 85       	ldd	r24, Y+9	; 0x09
    16ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	3f ef       	ldi	r19, 0xFF	; 255
    16f2:	4f e7       	ldi	r20, 0x7F	; 127
    16f4:	57 e4       	ldi	r21, 0x47	; 71
    16f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16fa:	18 16       	cp	r1, r24
    16fc:	4c f5       	brge	.+82     	; 0x1750 <main+0xc0a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1700:	7c 85       	ldd	r23, Y+12	; 0x0c
    1702:	8d 85       	ldd	r24, Y+13	; 0x0d
    1704:	9e 85       	ldd	r25, Y+14	; 0x0e
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	40 e2       	ldi	r20, 0x20	; 32
    170c:	51 e4       	ldi	r21, 0x41	; 65
    170e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	bc 01       	movw	r22, r24
    1718:	cd 01       	movw	r24, r26
    171a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	9e 83       	std	Y+6, r25	; 0x06
    1724:	8d 83       	std	Y+5, r24	; 0x05
    1726:	0f c0       	rjmp	.+30     	; 0x1746 <main+0xc00>
    1728:	89 e1       	ldi	r24, 0x19	; 25
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	9c 83       	std	Y+4, r25	; 0x04
    172e:	8b 83       	std	Y+3, r24	; 0x03
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	9c 81       	ldd	r25, Y+4	; 0x04
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	f1 f7       	brne	.-4      	; 0x1734 <main+0xbee>
    1738:	9c 83       	std	Y+4, r25	; 0x04
    173a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    173c:	8d 81       	ldd	r24, Y+5	; 0x05
    173e:	9e 81       	ldd	r25, Y+6	; 0x06
    1740:	01 97       	sbiw	r24, 0x01	; 1
    1742:	9e 83       	std	Y+6, r25	; 0x06
    1744:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1746:	8d 81       	ldd	r24, Y+5	; 0x05
    1748:	9e 81       	ldd	r25, Y+6	; 0x06
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	69 f7       	brne	.-38     	; 0x1728 <main+0xbe2>
    174e:	14 c0       	rjmp	.+40     	; 0x1778 <main+0xc32>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1750:	6f 81       	ldd	r22, Y+7	; 0x07
    1752:	78 85       	ldd	r23, Y+8	; 0x08
    1754:	89 85       	ldd	r24, Y+9	; 0x09
    1756:	9a 85       	ldd	r25, Y+10	; 0x0a
    1758:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	9e 83       	std	Y+6, r25	; 0x06
    1762:	8d 83       	std	Y+5, r24	; 0x05
    1764:	8d 81       	ldd	r24, Y+5	; 0x05
    1766:	9e 81       	ldd	r25, Y+6	; 0x06
    1768:	9a 83       	std	Y+2, r25	; 0x02
    176a:	89 83       	std	Y+1, r24	; 0x01
    176c:	89 81       	ldd	r24, Y+1	; 0x01
    176e:	9a 81       	ldd	r25, Y+2	; 0x02
    1770:	01 97       	sbiw	r24, 0x01	; 1
    1772:	f1 f7       	brne	.-4      	; 0x1770 <main+0xc2a>
    1774:	9a 83       	std	Y+2, r25	; 0x02
    1776:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1000);

				g_recieved_message=0;
    1778:	10 92 47 01 	sts	0x0147, r1
    177c:	3c ca       	rjmp	.-2952   	; 0xbf6 <main+0xb0>

				break;

			case NEW_PASSWORD:

				g_First_use=0;
    177e:	10 92 30 01 	sts	0x0130, r1
				g_recieved_message=0;
    1782:	10 92 47 01 	sts	0x0147, r1
    1786:	37 ca       	rjmp	.-2962   	; 0xbf6 <main+0xb0>

				break;

			case error:

				LCD_clearScreen();
    1788:	0e 94 99 17 	call	0x2f32	; 0x2f32 <LCD_clearScreen>
				LCD_displayString("ERROR");
    178c:	80 e2       	ldi	r24, 0x20	; 32
    178e:	91 e0       	ldi	r25, 0x01	; 1
    1790:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <LCD_displayString>

				Timer0_setcallback(callBackFunction_buzzer);
    1794:	8b e4       	ldi	r24, 0x4B	; 75
    1796:	9d e0       	ldi	r25, 0x0D	; 13
    1798:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <Timer0_setcallback>
				Timer0_Init(&Timer0_Config);
    179c:	ce 01       	movw	r24, r28
    179e:	87 58       	subi	r24, 0x87	; 135
    17a0:	9f 4f       	sbci	r25, 0xFF	; 255
    17a2:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <Timer0_Init>
				while(g_interrupt_flag !=0){}
    17a6:	80 91 2e 01 	lds	r24, 0x012E
    17aa:	88 23       	and	r24, r24
    17ac:	e1 f7       	brne	.-8      	; 0x17a6 <main+0xc60>
				g_interrupt_flag=1;
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	80 93 2e 01 	sts	0x012E, r24
				Timer0_DeInit();
    17b4:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <Timer0_DeInit>

				g_recieved_message=0;
    17b8:	10 92 47 01 	sts	0x0147, r1
    17bc:	1c ca       	rjmp	.-3016   	; 0xbf6 <main+0xb0>

000017be <getPassword>:
 * Description:
 * 1.function get the password from the user and store it in global array
 * 2. display '*' when the user press key on the key pad
 */
void getPassword(uint8 array[])
{
    17be:	df 93       	push	r29
    17c0:	cf 93       	push	r28
    17c2:	cd b7       	in	r28, 0x3d	; 61
    17c4:	de b7       	in	r29, 0x3e	; 62
    17c6:	62 97       	sbiw	r28, 0x12	; 18
    17c8:	0f b6       	in	r0, 0x3f	; 63
    17ca:	f8 94       	cli
    17cc:	de bf       	out	0x3e, r29	; 62
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	cd bf       	out	0x3d, r28	; 61
    17d2:	9a 8b       	std	Y+18, r25	; 0x12
    17d4:	89 8b       	std	Y+17, r24	; 0x11
	/* counter to access the array */
	uint8 i;

	/*variable to store key pressed in Array*/
	uint8 key=0;
    17d6:	1f 86       	std	Y+15, r1	; 0x0f

	for(i=0;i<5;i++)
    17d8:	18 8a       	std	Y+16, r1	; 0x10
    17da:	92 c0       	rjmp	.+292    	; 0x1900 <getPassword+0x142>
	{

		key=KEYPAD_getPressedKey();
    17dc:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <KEYPAD_getPressedKey>
    17e0:	8f 87       	std	Y+15, r24	; 0x0f
		if(key==13)
    17e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    17e4:	8d 30       	cpi	r24, 0x0D	; 13
    17e6:	51 f4       	brne	.+20     	; 0x17fc <getPassword+0x3e>
		{
			array[i]='\0';
    17e8:	88 89       	ldd	r24, Y+16	; 0x10
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	89 89       	ldd	r24, Y+17	; 0x11
    17f0:	9a 89       	ldd	r25, Y+18	; 0x12
    17f2:	fc 01       	movw	r30, r24
    17f4:	e2 0f       	add	r30, r18
    17f6:	f3 1f       	adc	r31, r19
    17f8:	10 82       	st	Z, r1
    17fa:	0d c0       	rjmp	.+26     	; 0x1816 <getPassword+0x58>

		}
		else
		{
			array[i]=key;
    17fc:	88 89       	ldd	r24, Y+16	; 0x10
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	89 89       	ldd	r24, Y+17	; 0x11
    1804:	9a 89       	ldd	r25, Y+18	; 0x12
    1806:	fc 01       	movw	r30, r24
    1808:	e2 0f       	add	r30, r18
    180a:	f3 1f       	adc	r31, r19
    180c:	8f 85       	ldd	r24, Y+15	; 0x0f
    180e:	80 83       	st	Z, r24

			LCD_displayCharacter('*');
    1810:	8a e2       	ldi	r24, 0x2A	; 42
    1812:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <LCD_displayCharacter>
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	a8 ec       	ldi	r26, 0xC8	; 200
    181c:	b3 e4       	ldi	r27, 0x43	; 67
    181e:	8b 87       	std	Y+11, r24	; 0x0b
    1820:	9c 87       	std	Y+12, r25	; 0x0c
    1822:	ad 87       	std	Y+13, r26	; 0x0d
    1824:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1826:	6b 85       	ldd	r22, Y+11	; 0x0b
    1828:	7c 85       	ldd	r23, Y+12	; 0x0c
    182a:	8d 85       	ldd	r24, Y+13	; 0x0d
    182c:	9e 85       	ldd	r25, Y+14	; 0x0e
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	4a e7       	ldi	r20, 0x7A	; 122
    1834:	53 e4       	ldi	r21, 0x43	; 67
    1836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	8f 83       	std	Y+7, r24	; 0x07
    1840:	98 87       	std	Y+8, r25	; 0x08
    1842:	a9 87       	std	Y+9, r26	; 0x09
    1844:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1846:	6f 81       	ldd	r22, Y+7	; 0x07
    1848:	78 85       	ldd	r23, Y+8	; 0x08
    184a:	89 85       	ldd	r24, Y+9	; 0x09
    184c:	9a 85       	ldd	r25, Y+10	; 0x0a
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	40 e8       	ldi	r20, 0x80	; 128
    1854:	5f e3       	ldi	r21, 0x3F	; 63
    1856:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    185a:	88 23       	and	r24, r24
    185c:	2c f4       	brge	.+10     	; 0x1868 <getPassword+0xaa>
		__ticks = 1;
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	9e 83       	std	Y+6, r25	; 0x06
    1864:	8d 83       	std	Y+5, r24	; 0x05
    1866:	3f c0       	rjmp	.+126    	; 0x18e6 <getPassword+0x128>
	else if (__tmp > 65535)
    1868:	6f 81       	ldd	r22, Y+7	; 0x07
    186a:	78 85       	ldd	r23, Y+8	; 0x08
    186c:	89 85       	ldd	r24, Y+9	; 0x09
    186e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	3f ef       	ldi	r19, 0xFF	; 255
    1874:	4f e7       	ldi	r20, 0x7F	; 127
    1876:	57 e4       	ldi	r21, 0x47	; 71
    1878:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    187c:	18 16       	cp	r1, r24
    187e:	4c f5       	brge	.+82     	; 0x18d2 <getPassword+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1880:	6b 85       	ldd	r22, Y+11	; 0x0b
    1882:	7c 85       	ldd	r23, Y+12	; 0x0c
    1884:	8d 85       	ldd	r24, Y+13	; 0x0d
    1886:	9e 85       	ldd	r25, Y+14	; 0x0e
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	40 e2       	ldi	r20, 0x20	; 32
    188e:	51 e4       	ldi	r21, 0x41	; 65
    1890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	bc 01       	movw	r22, r24
    189a:	cd 01       	movw	r24, r26
    189c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	9e 83       	std	Y+6, r25	; 0x06
    18a6:	8d 83       	std	Y+5, r24	; 0x05
    18a8:	0f c0       	rjmp	.+30     	; 0x18c8 <getPassword+0x10a>
    18aa:	89 e1       	ldi	r24, 0x19	; 25
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	9c 83       	std	Y+4, r25	; 0x04
    18b0:	8b 83       	std	Y+3, r24	; 0x03
    18b2:	8b 81       	ldd	r24, Y+3	; 0x03
    18b4:	9c 81       	ldd	r25, Y+4	; 0x04
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	f1 f7       	brne	.-4      	; 0x18b6 <getPassword+0xf8>
    18ba:	9c 83       	std	Y+4, r25	; 0x04
    18bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18be:	8d 81       	ldd	r24, Y+5	; 0x05
    18c0:	9e 81       	ldd	r25, Y+6	; 0x06
    18c2:	01 97       	sbiw	r24, 0x01	; 1
    18c4:	9e 83       	std	Y+6, r25	; 0x06
    18c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ca:	9e 81       	ldd	r25, Y+6	; 0x06
    18cc:	00 97       	sbiw	r24, 0x00	; 0
    18ce:	69 f7       	brne	.-38     	; 0x18aa <getPassword+0xec>
    18d0:	14 c0       	rjmp	.+40     	; 0x18fa <getPassword+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d2:	6f 81       	ldd	r22, Y+7	; 0x07
    18d4:	78 85       	ldd	r23, Y+8	; 0x08
    18d6:	89 85       	ldd	r24, Y+9	; 0x09
    18d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	9e 83       	std	Y+6, r25	; 0x06
    18e4:	8d 83       	std	Y+5, r24	; 0x05
    18e6:	8d 81       	ldd	r24, Y+5	; 0x05
    18e8:	9e 81       	ldd	r25, Y+6	; 0x06
    18ea:	9a 83       	std	Y+2, r25	; 0x02
    18ec:	89 83       	std	Y+1, r24	; 0x01
    18ee:	89 81       	ldd	r24, Y+1	; 0x01
    18f0:	9a 81       	ldd	r25, Y+2	; 0x02
    18f2:	01 97       	sbiw	r24, 0x01	; 1
    18f4:	f1 f7       	brne	.-4      	; 0x18f2 <getPassword+0x134>
    18f6:	9a 83       	std	Y+2, r25	; 0x02
    18f8:	89 83       	std	Y+1, r24	; 0x01
	uint8 i;

	/*variable to store key pressed in Array*/
	uint8 key=0;

	for(i=0;i<5;i++)
    18fa:	88 89       	ldd	r24, Y+16	; 0x10
    18fc:	8f 5f       	subi	r24, 0xFF	; 255
    18fe:	88 8b       	std	Y+16, r24	; 0x10
    1900:	88 89       	ldd	r24, Y+16	; 0x10
    1902:	85 30       	cpi	r24, 0x05	; 5
    1904:	08 f4       	brcc	.+2      	; 0x1908 <getPassword+0x14a>
    1906:	6a cf       	rjmp	.-300    	; 0x17dc <getPassword+0x1e>
			LCD_displayCharacter('*');
		}
		_delay_ms(400);
	}

}
    1908:	62 96       	adiw	r28, 0x12	; 18
    190a:	0f b6       	in	r0, 0x3f	; 63
    190c:	f8 94       	cli
    190e:	de bf       	out	0x3e, r29	; 62
    1910:	0f be       	out	0x3f, r0	; 63
    1912:	cd bf       	out	0x3d, r28	; 61
    1914:	cf 91       	pop	r28
    1916:	df 91       	pop	r29
    1918:	08 95       	ret

0000191a <compareTwoPasswords>:
/*
 * Description:
 * Function compare two array and if they are different increment the count
 */
uint8 compareTwoPasswords(uint8 arr1[], uint8 arr2[])
{
    191a:	df 93       	push	r29
    191c:	cf 93       	push	r28
    191e:	00 d0       	rcall	.+0      	; 0x1920 <compareTwoPasswords+0x6>
    1920:	00 d0       	rcall	.+0      	; 0x1922 <compareTwoPasswords+0x8>
    1922:	00 d0       	rcall	.+0      	; 0x1924 <compareTwoPasswords+0xa>
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
    1928:	9c 83       	std	Y+4, r25	; 0x04
    192a:	8b 83       	std	Y+3, r24	; 0x03
    192c:	7e 83       	std	Y+6, r23	; 0x06
    192e:	6d 83       	std	Y+5, r22	; 0x05
	uint8 count = 0;
    1930:	1a 82       	std	Y+2, r1	; 0x02
	sint8 i;
	for (i = 0; i < 5; i++)
    1932:	19 82       	std	Y+1, r1	; 0x01
    1934:	1e c0       	rjmp	.+60     	; 0x1972 <compareTwoPasswords+0x58>
	{
		if (arr1[i] != arr2[i])
    1936:	89 81       	ldd	r24, Y+1	; 0x01
    1938:	28 2f       	mov	r18, r24
    193a:	33 27       	eor	r19, r19
    193c:	27 fd       	sbrc	r18, 7
    193e:	30 95       	com	r19
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	9c 81       	ldd	r25, Y+4	; 0x04
    1944:	fc 01       	movw	r30, r24
    1946:	e2 0f       	add	r30, r18
    1948:	f3 1f       	adc	r31, r19
    194a:	40 81       	ld	r20, Z
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	28 2f       	mov	r18, r24
    1950:	33 27       	eor	r19, r19
    1952:	27 fd       	sbrc	r18, 7
    1954:	30 95       	com	r19
    1956:	8d 81       	ldd	r24, Y+5	; 0x05
    1958:	9e 81       	ldd	r25, Y+6	; 0x06
    195a:	fc 01       	movw	r30, r24
    195c:	e2 0f       	add	r30, r18
    195e:	f3 1f       	adc	r31, r19
    1960:	80 81       	ld	r24, Z
    1962:	48 17       	cp	r20, r24
    1964:	19 f0       	breq	.+6      	; 0x196c <compareTwoPasswords+0x52>
		{
			count++;
    1966:	8a 81       	ldd	r24, Y+2	; 0x02
    1968:	8f 5f       	subi	r24, 0xFF	; 255
    196a:	8a 83       	std	Y+2, r24	; 0x02
 */
uint8 compareTwoPasswords(uint8 arr1[], uint8 arr2[])
{
	uint8 count = 0;
	sint8 i;
	for (i = 0; i < 5; i++)
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	8f 5f       	subi	r24, 0xFF	; 255
    1970:	89 83       	std	Y+1, r24	; 0x01
    1972:	89 81       	ldd	r24, Y+1	; 0x01
    1974:	85 30       	cpi	r24, 0x05	; 5
    1976:	fc f2       	brlt	.-66     	; 0x1936 <compareTwoPasswords+0x1c>
		if (arr1[i] != arr2[i])
		{
			count++;
		}
	}
	return count;
    1978:	8a 81       	ldd	r24, Y+2	; 0x02
}
    197a:	26 96       	adiw	r28, 0x06	; 6
    197c:	0f b6       	in	r0, 0x3f	; 63
    197e:	f8 94       	cli
    1980:	de bf       	out	0x3e, r29	; 62
    1982:	0f be       	out	0x3f, r0	; 63
    1984:	cd bf       	out	0x3d, r28	; 61
    1986:	cf 91       	pop	r28
    1988:	df 91       	pop	r29
    198a:	08 95       	ret

0000198c <prepareToSend>:
/*
 * Description:
 * Function prepare the array to be send by the UART by adding '#'
 */
void prepareToSend(uint8 array[], uint8 array2[])
{
    198c:	df 93       	push	r29
    198e:	cf 93       	push	r28
    1990:	00 d0       	rcall	.+0      	; 0x1992 <prepareToSend+0x6>
    1992:	00 d0       	rcall	.+0      	; 0x1994 <prepareToSend+0x8>
    1994:	0f 92       	push	r0
    1996:	cd b7       	in	r28, 0x3d	; 61
    1998:	de b7       	in	r29, 0x3e	; 62
    199a:	9b 83       	std	Y+3, r25	; 0x03
    199c:	8a 83       	std	Y+2, r24	; 0x02
    199e:	7d 83       	std	Y+5, r23	; 0x05
    19a0:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i = 0;
    19a2:	19 82       	std	Y+1, r1	; 0x01
    19a4:	15 c0       	rjmp	.+42     	; 0x19d0 <prepareToSend+0x44>
	while(array[i]!='\0')
	{
		array2[i] = array[i];
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	28 2f       	mov	r18, r24
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	8c 81       	ldd	r24, Y+4	; 0x04
    19ae:	9d 81       	ldd	r25, Y+5	; 0x05
    19b0:	dc 01       	movw	r26, r24
    19b2:	a2 0f       	add	r26, r18
    19b4:	b3 1f       	adc	r27, r19
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
    19b8:	28 2f       	mov	r18, r24
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	8a 81       	ldd	r24, Y+2	; 0x02
    19be:	9b 81       	ldd	r25, Y+3	; 0x03
    19c0:	fc 01       	movw	r30, r24
    19c2:	e2 0f       	add	r30, r18
    19c4:	f3 1f       	adc	r31, r19
    19c6:	80 81       	ld	r24, Z
    19c8:	8c 93       	st	X, r24
		i++;
    19ca:	89 81       	ldd	r24, Y+1	; 0x01
    19cc:	8f 5f       	subi	r24, 0xFF	; 255
    19ce:	89 83       	std	Y+1, r24	; 0x01
 * Function prepare the array to be send by the UART by adding '#'
 */
void prepareToSend(uint8 array[], uint8 array2[])
{
	uint8 i = 0;
	while(array[i]!='\0')
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
    19d2:	28 2f       	mov	r18, r24
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	9b 81       	ldd	r25, Y+3	; 0x03
    19da:	fc 01       	movw	r30, r24
    19dc:	e2 0f       	add	r30, r18
    19de:	f3 1f       	adc	r31, r19
    19e0:	80 81       	ld	r24, Z
    19e2:	88 23       	and	r24, r24
    19e4:	01 f7       	brne	.-64     	; 0x19a6 <prepareToSend+0x1a>
	{
		array2[i] = array[i];
		i++;
	}

	array2[i] = '#';
    19e6:	89 81       	ldd	r24, Y+1	; 0x01
    19e8:	28 2f       	mov	r18, r24
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	8c 81       	ldd	r24, Y+4	; 0x04
    19ee:	9d 81       	ldd	r25, Y+5	; 0x05
    19f0:	fc 01       	movw	r30, r24
    19f2:	e2 0f       	add	r30, r18
    19f4:	f3 1f       	adc	r31, r19
    19f6:	83 e2       	ldi	r24, 0x23	; 35
    19f8:	80 83       	st	Z, r24
	i++;
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	8f 5f       	subi	r24, 0xFF	; 255
    19fe:	89 83       	std	Y+1, r24	; 0x01
	array2[i] = '\0';
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
    1a02:	28 2f       	mov	r18, r24
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	8c 81       	ldd	r24, Y+4	; 0x04
    1a08:	9d 81       	ldd	r25, Y+5	; 0x05
    1a0a:	fc 01       	movw	r30, r24
    1a0c:	e2 0f       	add	r30, r18
    1a0e:	f3 1f       	adc	r31, r19
    1a10:	10 82       	st	Z, r1
	//break;
}
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	0f 90       	pop	r0
    1a18:	0f 90       	pop	r0
    1a1a:	0f 90       	pop	r0
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	08 95       	ret

00001a22 <callBackFunction_rotateMotor>:
/*
 * Description:
 * Timer call back function when the motor are rotating
 */
void callBackFunction_rotateMotor ()
{
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
	g_timercounter++;
    1a2a:	80 91 34 01 	lds	r24, 0x0134
    1a2e:	90 91 35 01 	lds	r25, 0x0135
    1a32:	01 96       	adiw	r24, 0x01	; 1
    1a34:	90 93 35 01 	sts	0x0135, r25
    1a38:	80 93 34 01 	sts	0x0134, r24
	if(g_timercounter == NUMBER_OVER_FLOW_ROTATE)
    1a3c:	80 91 34 01 	lds	r24, 0x0134
    1a40:	90 91 35 01 	lds	r25, 0x0135
    1a44:	87 33       	cpi	r24, 0x37	; 55
    1a46:	91 05       	cpc	r25, r1
    1a48:	31 f4       	brne	.+12     	; 0x1a56 <callBackFunction_rotateMotor+0x34>
	{
		g_interrupt_flag=0;
    1a4a:	10 92 2e 01 	sts	0x012E, r1
		g_timercounter=0;
    1a4e:	10 92 35 01 	sts	0x0135, r1
    1a52:	10 92 34 01 	sts	0x0134, r1
	}
}
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	08 95       	ret

00001a5c <callBackFunction_holdMotor>:
/*
 * Description:
 * Timer call back function when the motor are holding
 */
void callBackFunction_holdMotor ()
{
    1a5c:	df 93       	push	r29
    1a5e:	cf 93       	push	r28
    1a60:	cd b7       	in	r28, 0x3d	; 61
    1a62:	de b7       	in	r29, 0x3e	; 62
	g_timercounter++;
    1a64:	80 91 34 01 	lds	r24, 0x0134
    1a68:	90 91 35 01 	lds	r25, 0x0135
    1a6c:	01 96       	adiw	r24, 0x01	; 1
    1a6e:	90 93 35 01 	sts	0x0135, r25
    1a72:	80 93 34 01 	sts	0x0134, r24
	if(g_timercounter == NUMBER_OVER_FLOW_HOLD)
    1a76:	80 91 34 01 	lds	r24, 0x0134
    1a7a:	90 91 35 01 	lds	r25, 0x0135
    1a7e:	8f 30       	cpi	r24, 0x0F	; 15
    1a80:	91 05       	cpc	r25, r1
    1a82:	31 f4       	brne	.+12     	; 0x1a90 <callBackFunction_holdMotor+0x34>
	{
		g_interrupt_flag=0;
    1a84:	10 92 2e 01 	sts	0x012E, r1
		g_timercounter=0;
    1a88:	10 92 35 01 	sts	0x0135, r1
    1a8c:	10 92 34 01 	sts	0x0134, r1
	}
}
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	08 95       	ret

00001a96 <callBackFunction_buzzer>:
/*
 * Description:
 * Timer call back function when the buzzer are on
 */
void callBackFunction_buzzer ()
{
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
	g_timercounter++;
    1a9e:	80 91 34 01 	lds	r24, 0x0134
    1aa2:	90 91 35 01 	lds	r25, 0x0135
    1aa6:	01 96       	adiw	r24, 0x01	; 1
    1aa8:	90 93 35 01 	sts	0x0135, r25
    1aac:	80 93 34 01 	sts	0x0134, r24
	if(g_timercounter == NUMBER_OVER_FLOW_BUZZER)
    1ab0:	80 91 34 01 	lds	r24, 0x0134
    1ab4:	90 91 35 01 	lds	r25, 0x0135
    1ab8:	8a 3f       	cpi	r24, 0xFA	; 250
    1aba:	91 05       	cpc	r25, r1
    1abc:	31 f4       	brne	.+12     	; 0x1aca <callBackFunction_buzzer+0x34>
	{
		g_interrupt_flag=0;
    1abe:	10 92 2e 01 	sts	0x012E, r1
		g_timercounter=0;
    1ac2:	10 92 35 01 	sts	0x0135, r1
    1ac6:	10 92 34 01 	sts	0x0134, r1
	}
}
    1aca:	cf 91       	pop	r28
    1acc:	df 91       	pop	r29
    1ace:	08 95       	ret

00001ad0 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1ad0:	df 93       	push	r29
    1ad2:	cf 93       	push	r28
    1ad4:	00 d0       	rcall	.+0      	; 0x1ad6 <KEYPAD_getPressedKey+0x6>
    1ad6:	0f 92       	push	r0
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
	uint8 row,col;
	uint8 keypad_port_value = 0;
    1adc:	19 82       	std	Y+1, r1	; 0x01

	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++)
    1ade:	1a 82       	std	Y+2, r1	; 0x02
    1ae0:	43 c0       	rjmp	.+134    	; 0x1b68 <KEYPAD_getPressedKey+0x98>
		{
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	60 e0       	ldi	r22, 0x00	; 0
    1ae6:	0e 94 25 12 	call	0x244a	; 0x244a <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,col+KEYPAD_FIRST_COLUMN_PIN_ID,PIN_OUTPUT);
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	98 2f       	mov	r25, r24
    1aee:	9c 5f       	subi	r25, 0xFC	; 252
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	69 2f       	mov	r22, r25
    1af4:	41 e0       	ldi	r20, 0x01	; 1
    1af6:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <GPIO_setupPinDirection>

#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/*Clear the column output pin and set the rest pins value */
			keypad_port_value= ~(1<<(col+KEYPAD_FIRST_COLUMN_PIN_ID));
    1afa:	8a 81       	ldd	r24, Y+2	; 0x02
    1afc:	88 2f       	mov	r24, r24
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	9c 01       	movw	r18, r24
    1b02:	2c 5f       	subi	r18, 0xFC	; 252
    1b04:	3f 4f       	sbci	r19, 0xFF	; 255
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	02 c0       	rjmp	.+4      	; 0x1b10 <KEYPAD_getPressedKey+0x40>
    1b0c:	88 0f       	add	r24, r24
    1b0e:	99 1f       	adc	r25, r25
    1b10:	2a 95       	dec	r18
    1b12:	e2 f7       	brpl	.-8      	; 0x1b0c <KEYPAD_getPressedKey+0x3c>
    1b14:	80 95       	com	r24
    1b16:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	69 81       	ldd	r22, Y+1	; 0x01
    1b1c:	0e 94 69 12 	call	0x24d2	; 0x24d2 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++)
    1b20:	1b 82       	std	Y+3, r1	; 0x03
    1b22:	1c c0       	rjmp	.+56     	; 0x1b5c <KEYPAD_getPressedKey+0x8c>
			{
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID)==KEYPAD_BUTTON_PRESSED)
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	6b 81       	ldd	r22, Y+3	; 0x03
    1b28:	0e 94 8a 11 	call	0x2314	; 0x2314 <GPIO_readPin>
    1b2c:	88 23       	and	r24, r24
    1b2e:	99 f4       	brne	.+38     	; 0x1b56 <KEYPAD_getPressedKey+0x86>
				{
#if (KEYPAD_NUM_COLS == 3)
					return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
#elif (KEYPAD_NUM_COLS == 4)
					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	88 2f       	mov	r24, r24
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	88 0f       	add	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	88 0f       	add	r24, r24
    1b3c:	99 1f       	adc	r25, r25
    1b3e:	98 2f       	mov	r25, r24
    1b40:	8a 81       	ldd	r24, Y+2	; 0x02
    1b42:	89 0f       	add	r24, r25
    1b44:	8f 5f       	subi	r24, 0xFF	; 255
    1b46:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <KEYPAD_4x4_adjustKeyNumber>
				}
			}

		}
	}
}
    1b4a:	0f 90       	pop	r0
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	cf 91       	pop	r28
    1b52:	df 91       	pop	r29
    1b54:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++)
    1b56:	8b 81       	ldd	r24, Y+3	; 0x03
    1b58:	8f 5f       	subi	r24, 0xFF	; 255
    1b5a:	8b 83       	std	Y+3, r24	; 0x03
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	84 30       	cpi	r24, 0x04	; 4
    1b60:	08 f3       	brcs	.-62     	; 0x1b24 <KEYPAD_getPressedKey+0x54>
	uint8 row,col;
	uint8 keypad_port_value = 0;

	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++)
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	8f 5f       	subi	r24, 0xFF	; 255
    1b66:	8a 83       	std	Y+2, r24	; 0x02
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	84 30       	cpi	r24, 0x04	; 4
    1b6c:	08 f4       	brcc	.+2      	; 0x1b70 <KEYPAD_getPressedKey+0xa0>
    1b6e:	b9 cf       	rjmp	.-142    	; 0x1ae2 <KEYPAD_getPressedKey+0x12>
    1b70:	b6 cf       	rjmp	.-148    	; 0x1ade <KEYPAD_getPressedKey+0xe>

00001b72 <KEYPAD_4x4_adjustKeyNumber>:
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
#elif(KEYPAD_NUM_COLS==4)
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1b72:	df 93       	push	r29
    1b74:	cf 93       	push	r28
    1b76:	00 d0       	rcall	.+0      	; 0x1b78 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1b78:	00 d0       	rcall	.+0      	; 0x1b7a <KEYPAD_4x4_adjustKeyNumber+0x8>
    1b7a:	cd b7       	in	r28, 0x3d	; 61
    1b7c:	de b7       	in	r29, 0x3e	; 62
    1b7e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1b80:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	28 2f       	mov	r18, r24
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	3c 83       	std	Y+4, r19	; 0x04
    1b8a:	2b 83       	std	Y+3, r18	; 0x03
    1b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b90:	88 30       	cpi	r24, 0x08	; 8
    1b92:	91 05       	cpc	r25, r1
    1b94:	09 f4       	brne	.+2      	; 0x1b98 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1b96:	70 c0       	rjmp	.+224    	; 0x1c78 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1b98:	2b 81       	ldd	r18, Y+3	; 0x03
    1b9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b9c:	29 30       	cpi	r18, 0x09	; 9
    1b9e:	31 05       	cpc	r19, r1
    1ba0:	5c f5       	brge	.+86     	; 0x1bf8 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba6:	84 30       	cpi	r24, 0x04	; 4
    1ba8:	91 05       	cpc	r25, r1
    1baa:	09 f4       	brne	.+2      	; 0x1bae <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1bac:	59 c0       	rjmp	.+178    	; 0x1c60 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1bae:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb0:	3c 81       	ldd	r19, Y+4	; 0x04
    1bb2:	25 30       	cpi	r18, 0x05	; 5
    1bb4:	31 05       	cpc	r19, r1
    1bb6:	9c f4       	brge	.+38     	; 0x1bde <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbc:	82 30       	cpi	r24, 0x02	; 2
    1bbe:	91 05       	cpc	r25, r1
    1bc0:	09 f4       	brne	.+2      	; 0x1bc4 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1bc2:	48 c0       	rjmp	.+144    	; 0x1c54 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1bc4:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc6:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc8:	23 30       	cpi	r18, 0x03	; 3
    1bca:	31 05       	cpc	r19, r1
    1bcc:	0c f0       	brlt	.+2      	; 0x1bd0 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1bce:	45 c0       	rjmp	.+138    	; 0x1c5a <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd4:	81 30       	cpi	r24, 0x01	; 1
    1bd6:	91 05       	cpc	r25, r1
    1bd8:	09 f4       	brne	.+2      	; 0x1bdc <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1bda:	39 c0       	rjmp	.+114    	; 0x1c4e <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1bdc:	67 c0       	rjmp	.+206    	; 0x1cac <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1bde:	2b 81       	ldd	r18, Y+3	; 0x03
    1be0:	3c 81       	ldd	r19, Y+4	; 0x04
    1be2:	26 30       	cpi	r18, 0x06	; 6
    1be4:	31 05       	cpc	r19, r1
    1be6:	09 f4       	brne	.+2      	; 0x1bea <KEYPAD_4x4_adjustKeyNumber+0x78>
    1be8:	41 c0       	rjmp	.+130    	; 0x1c6c <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	9c 81       	ldd	r25, Y+4	; 0x04
    1bee:	87 30       	cpi	r24, 0x07	; 7
    1bf0:	91 05       	cpc	r25, r1
    1bf2:	0c f0       	brlt	.+2      	; 0x1bf6 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1bf4:	3e c0       	rjmp	.+124    	; 0x1c72 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1bf6:	37 c0       	rjmp	.+110    	; 0x1c66 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1bf8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bfa:	3c 81       	ldd	r19, Y+4	; 0x04
    1bfc:	2c 30       	cpi	r18, 0x0C	; 12
    1bfe:	31 05       	cpc	r19, r1
    1c00:	09 f4       	brne	.+2      	; 0x1c04 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1c02:	46 c0       	rjmp	.+140    	; 0x1c90 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1c04:	8b 81       	ldd	r24, Y+3	; 0x03
    1c06:	9c 81       	ldd	r25, Y+4	; 0x04
    1c08:	8d 30       	cpi	r24, 0x0D	; 13
    1c0a:	91 05       	cpc	r25, r1
    1c0c:	5c f4       	brge	.+22     	; 0x1c24 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1c0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c10:	3c 81       	ldd	r19, Y+4	; 0x04
    1c12:	2a 30       	cpi	r18, 0x0A	; 10
    1c14:	31 05       	cpc	r19, r1
    1c16:	b1 f1       	breq	.+108    	; 0x1c84 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1c18:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1c:	8b 30       	cpi	r24, 0x0B	; 11
    1c1e:	91 05       	cpc	r25, r1
    1c20:	a4 f5       	brge	.+104    	; 0x1c8a <KEYPAD_4x4_adjustKeyNumber+0x118>
    1c22:	2d c0       	rjmp	.+90     	; 0x1c7e <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1c24:	2b 81       	ldd	r18, Y+3	; 0x03
    1c26:	3c 81       	ldd	r19, Y+4	; 0x04
    1c28:	2e 30       	cpi	r18, 0x0E	; 14
    1c2a:	31 05       	cpc	r19, r1
    1c2c:	b9 f1       	breq	.+110    	; 0x1c9c <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c30:	9c 81       	ldd	r25, Y+4	; 0x04
    1c32:	8e 30       	cpi	r24, 0x0E	; 14
    1c34:	91 05       	cpc	r25, r1
    1c36:	7c f1       	brlt	.+94     	; 0x1c96 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1c38:	2b 81       	ldd	r18, Y+3	; 0x03
    1c3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c3c:	2f 30       	cpi	r18, 0x0F	; 15
    1c3e:	31 05       	cpc	r19, r1
    1c40:	79 f1       	breq	.+94     	; 0x1ca0 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1c42:	8b 81       	ldd	r24, Y+3	; 0x03
    1c44:	9c 81       	ldd	r25, Y+4	; 0x04
    1c46:	80 31       	cpi	r24, 0x10	; 16
    1c48:	91 05       	cpc	r25, r1
    1c4a:	69 f1       	breq	.+90     	; 0x1ca6 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1c4c:	2f c0       	rjmp	.+94     	; 0x1cac <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
	case 1: keypad_button = 7;
    1c4e:	87 e0       	ldi	r24, 0x07	; 7
    1c50:	89 83       	std	Y+1, r24	; 0x01
    1c52:	2e c0       	rjmp	.+92     	; 0x1cb0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 2: keypad_button = 8;
    1c54:	88 e0       	ldi	r24, 0x08	; 8
    1c56:	89 83       	std	Y+1, r24	; 0x01
    1c58:	2b c0       	rjmp	.+86     	; 0x1cb0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 3: keypad_button = 9;
    1c5a:	89 e0       	ldi	r24, 0x09	; 9
    1c5c:	89 83       	std	Y+1, r24	; 0x01
    1c5e:	28 c0       	rjmp	.+80     	; 0x1cb0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 4: keypad_button = '%'; // ASCII Code of %
    1c60:	85 e2       	ldi	r24, 0x25	; 37
    1c62:	89 83       	std	Y+1, r24	; 0x01
    1c64:	25 c0       	rjmp	.+74     	; 0x1cb0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 5: keypad_button = 4;
    1c66:	84 e0       	ldi	r24, 0x04	; 4
    1c68:	89 83       	std	Y+1, r24	; 0x01
    1c6a:	22 c0       	rjmp	.+68     	; 0x1cb0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 6: keypad_button = 5;
    1c6c:	85 e0       	ldi	r24, 0x05	; 5
    1c6e:	89 83       	std	Y+1, r24	; 0x01
    1c70:	1f c0       	rjmp	.+62     	; 0x1cb0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 7: keypad_button = 6;
    1c72:	86 e0       	ldi	r24, 0x06	; 6
    1c74:	89 83       	std	Y+1, r24	; 0x01
    1c76:	1c c0       	rjmp	.+56     	; 0x1cb0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1c78:	8a e2       	ldi	r24, 0x2A	; 42
    1c7a:	89 83       	std	Y+1, r24	; 0x01
    1c7c:	19 c0       	rjmp	.+50     	; 0x1cb0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 9: keypad_button = 1;
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	89 83       	std	Y+1, r24	; 0x01
    1c82:	16 c0       	rjmp	.+44     	; 0x1cb0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 10: keypad_button = 2;
    1c84:	82 e0       	ldi	r24, 0x02	; 2
    1c86:	89 83       	std	Y+1, r24	; 0x01
    1c88:	13 c0       	rjmp	.+38     	; 0x1cb0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 11: keypad_button = 3;
    1c8a:	83 e0       	ldi	r24, 0x03	; 3
    1c8c:	89 83       	std	Y+1, r24	; 0x01
    1c8e:	10 c0       	rjmp	.+32     	; 0x1cb0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1c90:	8d e2       	ldi	r24, 0x2D	; 45
    1c92:	89 83       	std	Y+1, r24	; 0x01
    1c94:	0d c0       	rjmp	.+26     	; 0x1cb0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 13: keypad_button = 13;  /* ASCII of Enter */
    1c96:	8d e0       	ldi	r24, 0x0D	; 13
    1c98:	89 83       	std	Y+1, r24	; 0x01
    1c9a:	0a c0       	rjmp	.+20     	; 0x1cb0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 14: keypad_button = 0;
    1c9c:	19 82       	std	Y+1, r1	; 0x01
    1c9e:	08 c0       	rjmp	.+16     	; 0x1cb0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 15: keypad_button = '='; /* ASCII Code of '=' */
    1ca0:	8d e3       	ldi	r24, 0x3D	; 61
    1ca2:	89 83       	std	Y+1, r24	; 0x01
    1ca4:	05 c0       	rjmp	.+10     	; 0x1cb0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1ca6:	8b e2       	ldi	r24, 0x2B	; 43
    1ca8:	89 83       	std	Y+1, r24	; 0x01
    1caa:	02 c0       	rjmp	.+4      	; 0x1cb0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	default: keypad_button = button_number;
    1cac:	8a 81       	ldd	r24, Y+2	; 0x02
    1cae:	89 83       	std	Y+1, r24	; 0x01
	break;
	}
	return keypad_button;
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cb2:	0f 90       	pop	r0
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	0f 90       	pop	r0
    1cba:	cf 91       	pop	r28
    1cbc:	df 91       	pop	r29
    1cbe:	08 95       	ret

00001cc0 <Timer0_Init>:
 * 	2.Initial start value for Timer0
 * 	3.Initial Compare value for Timer0
 * 	4.Initialize the pre-scaler value
 */
void Timer0_Init(const Timer0_ConfigType * Config_Ptr)
{
    1cc0:	df 93       	push	r29
    1cc2:	cf 93       	push	r28
    1cc4:	00 d0       	rcall	.+0      	; 0x1cc6 <Timer0_Init+0x6>
    1cc6:	00 d0       	rcall	.+0      	; 0x1cc8 <Timer0_Init+0x8>
    1cc8:	0f 92       	push	r0
    1cca:	cd b7       	in	r28, 0x3d	; 61
    1ccc:	de b7       	in	r29, 0x3e	; 62
    1cce:	9a 83       	std	Y+2, r25	; 0x02
    1cd0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Check if the timer will operate in Normal mode or Compare mode
	 * If it's normal mode put Initial value to start the timer from in TCNT0
	 * If Compare or PWM mode Put compare value in OCR0
	 */
	if(Config_Ptr->Timer0_mode == NORMAL_MODE)
    1cd2:	e9 81       	ldd	r30, Y+1	; 0x01
    1cd4:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd6:	80 81       	ld	r24, Z
    1cd8:	88 23       	and	r24, r24
    1cda:	49 f4       	brne	.+18     	; 0x1cee <Timer0_Init+0x2e>
	{
		/*Initial start value for Timer0*/
		TCNT0=Config_Ptr->Timer0_InitialValue;
    1cdc:	e2 e5       	ldi	r30, 0x52	; 82
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	a9 81       	ldd	r26, Y+1	; 0x01
    1ce2:	ba 81       	ldd	r27, Y+2	; 0x02
    1ce4:	11 96       	adiw	r26, 0x01	; 1
    1ce6:	8c 91       	ld	r24, X
    1ce8:	11 97       	sbiw	r26, 0x01	; 1
    1cea:	80 83       	st	Z, r24
    1cec:	08 c0       	rjmp	.+16     	; 0x1cfe <Timer0_Init+0x3e>
	}
	else
	{
		/*Initial Compare value for Timer0*/
		OCR0=Config_Ptr->Timer0_InitialValue;
    1cee:	ec e5       	ldi	r30, 0x5C	; 92
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	a9 81       	ldd	r26, Y+1	; 0x01
    1cf4:	ba 81       	ldd	r27, Y+2	; 0x02
    1cf6:	11 96       	adiw	r26, 0x01	; 1
    1cf8:	8c 91       	ld	r24, X
    1cfa:	11 97       	sbiw	r26, 0x01	; 1
    1cfc:	80 83       	st	Z, r24

	/*
	 * Force Output Compare
	 * FOC0 bit is active only when the timer0 mode a non-PWM mode
	 */
	TCCR0 = ( (!(Config_Ptr->Timer0_mode) & 0x01) <<FOC0);
    1cfe:	83 e5       	ldi	r24, 0x53	; 83
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	9d 83       	std	Y+5, r25	; 0x05
    1d04:	8c 83       	std	Y+4, r24	; 0x04
    1d06:	e9 81       	ldd	r30, Y+1	; 0x01
    1d08:	fa 81       	ldd	r31, Y+2	; 0x02
    1d0a:	80 81       	ld	r24, Z
    1d0c:	88 23       	and	r24, r24
    1d0e:	19 f4       	brne	.+6      	; 0x1d16 <Timer0_Init+0x56>
    1d10:	90 e8       	ldi	r25, 0x80	; 128
    1d12:	9b 83       	std	Y+3, r25	; 0x03
    1d14:	01 c0       	rjmp	.+2      	; 0x1d18 <Timer0_Init+0x58>
    1d16:	1b 82       	std	Y+3, r1	; 0x03
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	ec 81       	ldd	r30, Y+4	; 0x04
    1d1c:	fd 81       	ldd	r31, Y+5	; 0x05
    1d1e:	80 83       	st	Z, r24

	/*
	 * Initialize Timer0 mode by WGM00 & WGM01 bits
	 */
	TCCR0 |= (((Config_Ptr->Timer0_mode) & 0x01) <<WGM00) |((((Config_Ptr->Timer0_mode) & 0x02)>>1) <<WGM01);
    1d20:	a3 e5       	ldi	r26, 0x53	; 83
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	e3 e5       	ldi	r30, 0x53	; 83
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	38 2f       	mov	r19, r24
    1d2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d30:	80 81       	ld	r24, Z
    1d32:	88 2f       	mov	r24, r24
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	81 70       	andi	r24, 0x01	; 1
    1d38:	90 70       	andi	r25, 0x00	; 0
    1d3a:	00 24       	eor	r0, r0
    1d3c:	96 95       	lsr	r25
    1d3e:	87 95       	ror	r24
    1d40:	07 94       	ror	r0
    1d42:	96 95       	lsr	r25
    1d44:	87 95       	ror	r24
    1d46:	07 94       	ror	r0
    1d48:	98 2f       	mov	r25, r24
    1d4a:	80 2d       	mov	r24, r0
    1d4c:	28 2f       	mov	r18, r24
    1d4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d50:	fa 81       	ldd	r31, Y+2	; 0x02
    1d52:	80 81       	ld	r24, Z
    1d54:	88 2f       	mov	r24, r24
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	82 70       	andi	r24, 0x02	; 2
    1d5a:	90 70       	andi	r25, 0x00	; 0
    1d5c:	95 95       	asr	r25
    1d5e:	87 95       	ror	r24
    1d60:	88 0f       	add	r24, r24
    1d62:	99 1f       	adc	r25, r25
    1d64:	88 0f       	add	r24, r24
    1d66:	99 1f       	adc	r25, r25
    1d68:	88 0f       	add	r24, r24
    1d6a:	99 1f       	adc	r25, r25
    1d6c:	82 2b       	or	r24, r18
    1d6e:	83 2b       	or	r24, r19
    1d70:	8c 93       	st	X, r24

	/*
	 * when working in CTC or PWM mode you can use OC0 pin
	 * we adjust the behavior of pin OC0 by COM00 & COM01 bits
	 */
	TCCR0 |=((  (Config_Ptr->OC0_PinBehavior) & 0x01) <<COM00);
    1d72:	a3 e5       	ldi	r26, 0x53	; 83
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	e3 e5       	ldi	r30, 0x53	; 83
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	28 2f       	mov	r18, r24
    1d7e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d80:	fa 81       	ldd	r31, Y+2	; 0x02
    1d82:	83 81       	ldd	r24, Z+3	; 0x03
    1d84:	88 2f       	mov	r24, r24
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	81 70       	andi	r24, 0x01	; 1
    1d8a:	90 70       	andi	r25, 0x00	; 0
    1d8c:	82 95       	swap	r24
    1d8e:	92 95       	swap	r25
    1d90:	90 7f       	andi	r25, 0xF0	; 240
    1d92:	98 27       	eor	r25, r24
    1d94:	80 7f       	andi	r24, 0xF0	; 240
    1d96:	98 27       	eor	r25, r24
    1d98:	82 2b       	or	r24, r18
    1d9a:	8c 93       	st	X, r24
	TCCR0 |=((( (Config_Ptr->OC0_PinBehavior) & 0x02) >>1) <<COM01);
    1d9c:	a3 e5       	ldi	r26, 0x53	; 83
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	e3 e5       	ldi	r30, 0x53	; 83
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	28 2f       	mov	r18, r24
    1da8:	e9 81       	ldd	r30, Y+1	; 0x01
    1daa:	fa 81       	ldd	r31, Y+2	; 0x02
    1dac:	83 81       	ldd	r24, Z+3	; 0x03
    1dae:	88 2f       	mov	r24, r24
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	82 70       	andi	r24, 0x02	; 2
    1db4:	90 70       	andi	r25, 0x00	; 0
    1db6:	95 95       	asr	r25
    1db8:	87 95       	ror	r24
    1dba:	88 0f       	add	r24, r24
    1dbc:	99 1f       	adc	r25, r25
    1dbe:	82 95       	swap	r24
    1dc0:	92 95       	swap	r25
    1dc2:	90 7f       	andi	r25, 0xF0	; 240
    1dc4:	98 27       	eor	r25, r24
    1dc6:	80 7f       	andi	r24, 0xF0	; 240
    1dc8:	98 27       	eor	r25, r24
    1dca:	82 2b       	or	r24, r18
    1dcc:	8c 93       	st	X, r24

	/*
	 * Initialize the pre-scaler value by using CS02 & CS01 & CS00  bits
	 */
	TCCR0 |= (((Config_Ptr->Timer0_prescaler & 0x04)>>2) <<CS02);
    1dce:	a3 e5       	ldi	r26, 0x53	; 83
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	e3 e5       	ldi	r30, 0x53	; 83
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	98 2f       	mov	r25, r24
    1dda:	e9 81       	ldd	r30, Y+1	; 0x01
    1ddc:	fa 81       	ldd	r31, Y+2	; 0x02
    1dde:	84 81       	ldd	r24, Z+4	; 0x04
    1de0:	84 70       	andi	r24, 0x04	; 4
    1de2:	89 2b       	or	r24, r25
    1de4:	8c 93       	st	X, r24
	TCCR0 |= (((Config_Ptr->Timer0_prescaler & 0x02)>>1) <<CS01);
    1de6:	a3 e5       	ldi	r26, 0x53	; 83
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	e3 e5       	ldi	r30, 0x53	; 83
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
    1df0:	98 2f       	mov	r25, r24
    1df2:	e9 81       	ldd	r30, Y+1	; 0x01
    1df4:	fa 81       	ldd	r31, Y+2	; 0x02
    1df6:	84 81       	ldd	r24, Z+4	; 0x04
    1df8:	82 70       	andi	r24, 0x02	; 2
    1dfa:	89 2b       	or	r24, r25
    1dfc:	8c 93       	st	X, r24
	TCCR0 |= ((Config_Ptr->Timer0_prescaler & 0x01) <<CS00);
    1dfe:	a3 e5       	ldi	r26, 0x53	; 83
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	e3 e5       	ldi	r30, 0x53	; 83
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	98 2f       	mov	r25, r24
    1e0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e0e:	84 81       	ldd	r24, Z+4	; 0x04
    1e10:	81 70       	andi	r24, 0x01	; 1
    1e12:	89 2b       	or	r24, r25
    1e14:	8c 93       	st	X, r24

/*
 * Enable OR Disable Interrupt when  timer0 over flow occur
 */
	TIMSK |= (Config_Ptr->Over_Flow_Interrupt<<TOIE0);
    1e16:	a9 e5       	ldi	r26, 0x59	; 89
    1e18:	b0 e0       	ldi	r27, 0x00	; 0
    1e1a:	e9 e5       	ldi	r30, 0x59	; 89
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	90 81       	ld	r25, Z
    1e20:	e9 81       	ldd	r30, Y+1	; 0x01
    1e22:	fa 81       	ldd	r31, Y+2	; 0x02
    1e24:	85 81       	ldd	r24, Z+5	; 0x05
    1e26:	89 2b       	or	r24, r25
    1e28:	8c 93       	st	X, r24

	/*
	 * ENable or disable Interrupt when timer0 compare match occur
	 */
	TIMSK |= (Config_Ptr->Compare_Match_Interrupt<<OCIE0);
    1e2a:	a9 e5       	ldi	r26, 0x59	; 89
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	e9 e5       	ldi	r30, 0x59	; 89
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	28 2f       	mov	r18, r24
    1e36:	e9 81       	ldd	r30, Y+1	; 0x01
    1e38:	fa 81       	ldd	r31, Y+2	; 0x02
    1e3a:	86 81       	ldd	r24, Z+6	; 0x06
    1e3c:	88 2f       	mov	r24, r24
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	88 0f       	add	r24, r24
    1e42:	99 1f       	adc	r25, r25
    1e44:	82 2b       	or	r24, r18
    1e46:	8c 93       	st	X, r24
}
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	cf 91       	pop	r28
    1e54:	df 91       	pop	r29
    1e56:	08 95       	ret

00001e58 <Timer0_setcallback>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer0_setcallback(void(*a_ptr)(void))
{
    1e58:	df 93       	push	r29
    1e5a:	cf 93       	push	r28
    1e5c:	00 d0       	rcall	.+0      	; 0x1e5e <Timer0_setcallback+0x6>
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
    1e62:	9a 83       	std	Y+2, r25	; 0x02
    1e64:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    1e66:	89 81       	ldd	r24, Y+1	; 0x01
    1e68:	9a 81       	ldd	r25, Y+2	; 0x02
    1e6a:	90 93 33 01 	sts	0x0133, r25
    1e6e:	80 93 32 01 	sts	0x0132, r24
}
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	cf 91       	pop	r28
    1e78:	df 91       	pop	r29
    1e7a:	08 95       	ret

00001e7c <Timer0_DeInit>:


void Timer0_DeInit(void)
{
    1e7c:	df 93       	push	r29
    1e7e:	cf 93       	push	r28
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
	/*
	 * when CS02:CS00 =0 then timer is stopped
	 */
	TCCR0 = 0;
    1e84:	e3 e5       	ldi	r30, 0x53	; 83
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	10 82       	st	Z, r1
	TCNT0=0;
    1e8a:	e2 e5       	ldi	r30, 0x52	; 82
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	10 82       	st	Z, r1
	OCR0=0;
    1e90:	ec e5       	ldi	r30, 0x5C	; 92
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	10 82       	st	Z, r1
}
    1e96:	cf 91       	pop	r28
    1e98:	df 91       	pop	r29
    1e9a:	08 95       	ret

00001e9c <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    1e9c:	1f 92       	push	r1
    1e9e:	0f 92       	push	r0
    1ea0:	0f b6       	in	r0, 0x3f	; 63
    1ea2:	0f 92       	push	r0
    1ea4:	11 24       	eor	r1, r1
    1ea6:	2f 93       	push	r18
    1ea8:	3f 93       	push	r19
    1eaa:	4f 93       	push	r20
    1eac:	5f 93       	push	r21
    1eae:	6f 93       	push	r22
    1eb0:	7f 93       	push	r23
    1eb2:	8f 93       	push	r24
    1eb4:	9f 93       	push	r25
    1eb6:	af 93       	push	r26
    1eb8:	bf 93       	push	r27
    1eba:	ef 93       	push	r30
    1ebc:	ff 93       	push	r31
    1ebe:	df 93       	push	r29
    1ec0:	cf 93       	push	r28
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1ec6:	80 91 32 01 	lds	r24, 0x0132
    1eca:	90 91 33 01 	lds	r25, 0x0133
    1ece:	00 97       	sbiw	r24, 0x00	; 0
    1ed0:	29 f0       	breq	.+10     	; 0x1edc <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1ed2:	e0 91 32 01 	lds	r30, 0x0132
    1ed6:	f0 91 33 01 	lds	r31, 0x0133
    1eda:	09 95       	icall
	}
}
    1edc:	cf 91       	pop	r28
    1ede:	df 91       	pop	r29
    1ee0:	ff 91       	pop	r31
    1ee2:	ef 91       	pop	r30
    1ee4:	bf 91       	pop	r27
    1ee6:	af 91       	pop	r26
    1ee8:	9f 91       	pop	r25
    1eea:	8f 91       	pop	r24
    1eec:	7f 91       	pop	r23
    1eee:	6f 91       	pop	r22
    1ef0:	5f 91       	pop	r21
    1ef2:	4f 91       	pop	r20
    1ef4:	3f 91       	pop	r19
    1ef6:	2f 91       	pop	r18
    1ef8:	0f 90       	pop	r0
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	0f 90       	pop	r0
    1efe:	1f 90       	pop	r1
    1f00:	18 95       	reti

00001f02 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    1f02:	1f 92       	push	r1
    1f04:	0f 92       	push	r0
    1f06:	0f b6       	in	r0, 0x3f	; 63
    1f08:	0f 92       	push	r0
    1f0a:	11 24       	eor	r1, r1
    1f0c:	2f 93       	push	r18
    1f0e:	3f 93       	push	r19
    1f10:	4f 93       	push	r20
    1f12:	5f 93       	push	r21
    1f14:	6f 93       	push	r22
    1f16:	7f 93       	push	r23
    1f18:	8f 93       	push	r24
    1f1a:	9f 93       	push	r25
    1f1c:	af 93       	push	r26
    1f1e:	bf 93       	push	r27
    1f20:	ef 93       	push	r30
    1f22:	ff 93       	push	r31
    1f24:	df 93       	push	r29
    1f26:	cf 93       	push	r28
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1f2c:	80 91 32 01 	lds	r24, 0x0132
    1f30:	90 91 33 01 	lds	r25, 0x0133
    1f34:	00 97       	sbiw	r24, 0x00	; 0
    1f36:	29 f0       	breq	.+10     	; 0x1f42 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1f38:	e0 91 32 01 	lds	r30, 0x0132
    1f3c:	f0 91 33 01 	lds	r31, 0x0133
    1f40:	09 95       	icall
	}
}
    1f42:	cf 91       	pop	r28
    1f44:	df 91       	pop	r29
    1f46:	ff 91       	pop	r31
    1f48:	ef 91       	pop	r30
    1f4a:	bf 91       	pop	r27
    1f4c:	af 91       	pop	r26
    1f4e:	9f 91       	pop	r25
    1f50:	8f 91       	pop	r24
    1f52:	7f 91       	pop	r23
    1f54:	6f 91       	pop	r22
    1f56:	5f 91       	pop	r21
    1f58:	4f 91       	pop	r20
    1f5a:	3f 91       	pop	r19
    1f5c:	2f 91       	pop	r18
    1f5e:	0f 90       	pop	r0
    1f60:	0f be       	out	0x3f, r0	; 63
    1f62:	0f 90       	pop	r0
    1f64:	1f 90       	pop	r1
    1f66:	18 95       	reti

00001f68 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1f68:	df 93       	push	r29
    1f6a:	cf 93       	push	r28
    1f6c:	00 d0       	rcall	.+0      	; 0x1f6e <GPIO_setupPinDirection+0x6>
    1f6e:	00 d0       	rcall	.+0      	; 0x1f70 <GPIO_setupPinDirection+0x8>
    1f70:	0f 92       	push	r0
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
    1f76:	89 83       	std	Y+1, r24	; 0x01
    1f78:	6a 83       	std	Y+2, r22	; 0x02
    1f7a:	4b 83       	std	Y+3, r20	; 0x03
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7e:	88 30       	cpi	r24, 0x08	; 8
    1f80:	08 f0       	brcs	.+2      	; 0x1f84 <GPIO_setupPinDirection+0x1c>
    1f82:	d5 c0       	rjmp	.+426    	; 0x212e <GPIO_setupPinDirection+0x1c6>
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	84 30       	cpi	r24, 0x04	; 4
    1f88:	08 f0       	brcs	.+2      	; 0x1f8c <GPIO_setupPinDirection+0x24>
    1f8a:	d1 c0       	rjmp	.+418    	; 0x212e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1f8c:	89 81       	ldd	r24, Y+1	; 0x01
    1f8e:	28 2f       	mov	r18, r24
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	3d 83       	std	Y+5, r19	; 0x05
    1f94:	2c 83       	std	Y+4, r18	; 0x04
    1f96:	8c 81       	ldd	r24, Y+4	; 0x04
    1f98:	9d 81       	ldd	r25, Y+5	; 0x05
    1f9a:	81 30       	cpi	r24, 0x01	; 1
    1f9c:	91 05       	cpc	r25, r1
    1f9e:	09 f4       	brne	.+2      	; 0x1fa2 <GPIO_setupPinDirection+0x3a>
    1fa0:	43 c0       	rjmp	.+134    	; 0x2028 <GPIO_setupPinDirection+0xc0>
    1fa2:	2c 81       	ldd	r18, Y+4	; 0x04
    1fa4:	3d 81       	ldd	r19, Y+5	; 0x05
    1fa6:	22 30       	cpi	r18, 0x02	; 2
    1fa8:	31 05       	cpc	r19, r1
    1faa:	2c f4       	brge	.+10     	; 0x1fb6 <GPIO_setupPinDirection+0x4e>
    1fac:	8c 81       	ldd	r24, Y+4	; 0x04
    1fae:	9d 81       	ldd	r25, Y+5	; 0x05
    1fb0:	00 97       	sbiw	r24, 0x00	; 0
    1fb2:	71 f0       	breq	.+28     	; 0x1fd0 <GPIO_setupPinDirection+0x68>
    1fb4:	bc c0       	rjmp	.+376    	; 0x212e <GPIO_setupPinDirection+0x1c6>
    1fb6:	2c 81       	ldd	r18, Y+4	; 0x04
    1fb8:	3d 81       	ldd	r19, Y+5	; 0x05
    1fba:	22 30       	cpi	r18, 0x02	; 2
    1fbc:	31 05       	cpc	r19, r1
    1fbe:	09 f4       	brne	.+2      	; 0x1fc2 <GPIO_setupPinDirection+0x5a>
    1fc0:	5f c0       	rjmp	.+190    	; 0x2080 <GPIO_setupPinDirection+0x118>
    1fc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc4:	9d 81       	ldd	r25, Y+5	; 0x05
    1fc6:	83 30       	cpi	r24, 0x03	; 3
    1fc8:	91 05       	cpc	r25, r1
    1fca:	09 f4       	brne	.+2      	; 0x1fce <GPIO_setupPinDirection+0x66>
    1fcc:	85 c0       	rjmp	.+266    	; 0x20d8 <GPIO_setupPinDirection+0x170>
    1fce:	af c0       	rjmp	.+350    	; 0x212e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd2:	81 30       	cpi	r24, 0x01	; 1
    1fd4:	a1 f4       	brne	.+40     	; 0x1ffe <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1fd6:	aa e3       	ldi	r26, 0x3A	; 58
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	ea e3       	ldi	r30, 0x3A	; 58
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	48 2f       	mov	r20, r24
    1fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe4:	28 2f       	mov	r18, r24
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	02 2e       	mov	r0, r18
    1fee:	02 c0       	rjmp	.+4      	; 0x1ff4 <GPIO_setupPinDirection+0x8c>
    1ff0:	88 0f       	add	r24, r24
    1ff2:	99 1f       	adc	r25, r25
    1ff4:	0a 94       	dec	r0
    1ff6:	e2 f7       	brpl	.-8      	; 0x1ff0 <GPIO_setupPinDirection+0x88>
    1ff8:	84 2b       	or	r24, r20
    1ffa:	8c 93       	st	X, r24
    1ffc:	98 c0       	rjmp	.+304    	; 0x212e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1ffe:	aa e3       	ldi	r26, 0x3A	; 58
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	ea e3       	ldi	r30, 0x3A	; 58
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	48 2f       	mov	r20, r24
    200a:	8a 81       	ldd	r24, Y+2	; 0x02
    200c:	28 2f       	mov	r18, r24
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	02 2e       	mov	r0, r18
    2016:	02 c0       	rjmp	.+4      	; 0x201c <GPIO_setupPinDirection+0xb4>
    2018:	88 0f       	add	r24, r24
    201a:	99 1f       	adc	r25, r25
    201c:	0a 94       	dec	r0
    201e:	e2 f7       	brpl	.-8      	; 0x2018 <GPIO_setupPinDirection+0xb0>
    2020:	80 95       	com	r24
    2022:	84 23       	and	r24, r20
    2024:	8c 93       	st	X, r24
    2026:	83 c0       	rjmp	.+262    	; 0x212e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    2028:	8b 81       	ldd	r24, Y+3	; 0x03
    202a:	81 30       	cpi	r24, 0x01	; 1
    202c:	a1 f4       	brne	.+40     	; 0x2056 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    202e:	a7 e3       	ldi	r26, 0x37	; 55
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	e7 e3       	ldi	r30, 0x37	; 55
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	48 2f       	mov	r20, r24
    203a:	8a 81       	ldd	r24, Y+2	; 0x02
    203c:	28 2f       	mov	r18, r24
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	02 2e       	mov	r0, r18
    2046:	02 c0       	rjmp	.+4      	; 0x204c <GPIO_setupPinDirection+0xe4>
    2048:	88 0f       	add	r24, r24
    204a:	99 1f       	adc	r25, r25
    204c:	0a 94       	dec	r0
    204e:	e2 f7       	brpl	.-8      	; 0x2048 <GPIO_setupPinDirection+0xe0>
    2050:	84 2b       	or	r24, r20
    2052:	8c 93       	st	X, r24
    2054:	6c c0       	rjmp	.+216    	; 0x212e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    2056:	a7 e3       	ldi	r26, 0x37	; 55
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	e7 e3       	ldi	r30, 0x37	; 55
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	48 2f       	mov	r20, r24
    2062:	8a 81       	ldd	r24, Y+2	; 0x02
    2064:	28 2f       	mov	r18, r24
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	02 2e       	mov	r0, r18
    206e:	02 c0       	rjmp	.+4      	; 0x2074 <GPIO_setupPinDirection+0x10c>
    2070:	88 0f       	add	r24, r24
    2072:	99 1f       	adc	r25, r25
    2074:	0a 94       	dec	r0
    2076:	e2 f7       	brpl	.-8      	; 0x2070 <GPIO_setupPinDirection+0x108>
    2078:	80 95       	com	r24
    207a:	84 23       	and	r24, r20
    207c:	8c 93       	st	X, r24
    207e:	57 c0       	rjmp	.+174    	; 0x212e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
    2082:	81 30       	cpi	r24, 0x01	; 1
    2084:	a1 f4       	brne	.+40     	; 0x20ae <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    2086:	a4 e3       	ldi	r26, 0x34	; 52
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	e4 e3       	ldi	r30, 0x34	; 52
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	48 2f       	mov	r20, r24
    2092:	8a 81       	ldd	r24, Y+2	; 0x02
    2094:	28 2f       	mov	r18, r24
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	02 2e       	mov	r0, r18
    209e:	02 c0       	rjmp	.+4      	; 0x20a4 <GPIO_setupPinDirection+0x13c>
    20a0:	88 0f       	add	r24, r24
    20a2:	99 1f       	adc	r25, r25
    20a4:	0a 94       	dec	r0
    20a6:	e2 f7       	brpl	.-8      	; 0x20a0 <GPIO_setupPinDirection+0x138>
    20a8:	84 2b       	or	r24, r20
    20aa:	8c 93       	st	X, r24
    20ac:	40 c0       	rjmp	.+128    	; 0x212e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    20ae:	a4 e3       	ldi	r26, 0x34	; 52
    20b0:	b0 e0       	ldi	r27, 0x00	; 0
    20b2:	e4 e3       	ldi	r30, 0x34	; 52
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	80 81       	ld	r24, Z
    20b8:	48 2f       	mov	r20, r24
    20ba:	8a 81       	ldd	r24, Y+2	; 0x02
    20bc:	28 2f       	mov	r18, r24
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	02 2e       	mov	r0, r18
    20c6:	02 c0       	rjmp	.+4      	; 0x20cc <GPIO_setupPinDirection+0x164>
    20c8:	88 0f       	add	r24, r24
    20ca:	99 1f       	adc	r25, r25
    20cc:	0a 94       	dec	r0
    20ce:	e2 f7       	brpl	.-8      	; 0x20c8 <GPIO_setupPinDirection+0x160>
    20d0:	80 95       	com	r24
    20d2:	84 23       	and	r24, r20
    20d4:	8c 93       	st	X, r24
    20d6:	2b c0       	rjmp	.+86     	; 0x212e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    20d8:	8b 81       	ldd	r24, Y+3	; 0x03
    20da:	81 30       	cpi	r24, 0x01	; 1
    20dc:	a1 f4       	brne	.+40     	; 0x2106 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    20de:	a1 e3       	ldi	r26, 0x31	; 49
    20e0:	b0 e0       	ldi	r27, 0x00	; 0
    20e2:	e1 e3       	ldi	r30, 0x31	; 49
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	48 2f       	mov	r20, r24
    20ea:	8a 81       	ldd	r24, Y+2	; 0x02
    20ec:	28 2f       	mov	r18, r24
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	02 2e       	mov	r0, r18
    20f6:	02 c0       	rjmp	.+4      	; 0x20fc <GPIO_setupPinDirection+0x194>
    20f8:	88 0f       	add	r24, r24
    20fa:	99 1f       	adc	r25, r25
    20fc:	0a 94       	dec	r0
    20fe:	e2 f7       	brpl	.-8      	; 0x20f8 <GPIO_setupPinDirection+0x190>
    2100:	84 2b       	or	r24, r20
    2102:	8c 93       	st	X, r24
    2104:	14 c0       	rjmp	.+40     	; 0x212e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    2106:	a1 e3       	ldi	r26, 0x31	; 49
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	e1 e3       	ldi	r30, 0x31	; 49
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	48 2f       	mov	r20, r24
    2112:	8a 81       	ldd	r24, Y+2	; 0x02
    2114:	28 2f       	mov	r18, r24
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	02 2e       	mov	r0, r18
    211e:	02 c0       	rjmp	.+4      	; 0x2124 <GPIO_setupPinDirection+0x1bc>
    2120:	88 0f       	add	r24, r24
    2122:	99 1f       	adc	r25, r25
    2124:	0a 94       	dec	r0
    2126:	e2 f7       	brpl	.-8      	; 0x2120 <GPIO_setupPinDirection+0x1b8>
    2128:	80 95       	com	r24
    212a:	84 23       	and	r24, r20
    212c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    212e:	0f 90       	pop	r0
    2130:	0f 90       	pop	r0
    2132:	0f 90       	pop	r0
    2134:	0f 90       	pop	r0
    2136:	0f 90       	pop	r0
    2138:	cf 91       	pop	r28
    213a:	df 91       	pop	r29
    213c:	08 95       	ret

0000213e <GPIO_writePin>:
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */

void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    213e:	df 93       	push	r29
    2140:	cf 93       	push	r28
    2142:	00 d0       	rcall	.+0      	; 0x2144 <GPIO_writePin+0x6>
    2144:	00 d0       	rcall	.+0      	; 0x2146 <GPIO_writePin+0x8>
    2146:	0f 92       	push	r0
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    214c:	89 83       	std	Y+1, r24	; 0x01
    214e:	6a 83       	std	Y+2, r22	; 0x02
    2150:	4b 83       	std	Y+3, r20	; 0x03
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */

	if((port_num>=NUM_OF_PORTS ) ||(pin_num >=NUM_OF_PINS_PER_PORT))
    2152:	89 81       	ldd	r24, Y+1	; 0x01
    2154:	84 30       	cpi	r24, 0x04	; 4
    2156:	08 f0       	brcs	.+2      	; 0x215a <GPIO_writePin+0x1c>
    2158:	d5 c0       	rjmp	.+426    	; 0x2304 <GPIO_writePin+0x1c6>
    215a:	8a 81       	ldd	r24, Y+2	; 0x02
    215c:	88 30       	cpi	r24, 0x08	; 8
    215e:	08 f0       	brcs	.+2      	; 0x2162 <GPIO_writePin+0x24>
    2160:	d1 c0       	rjmp	.+418    	; 0x2304 <GPIO_writePin+0x1c6>
	{

	}
	else
	{
		switch(port_num)
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	28 2f       	mov	r18, r24
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	3d 83       	std	Y+5, r19	; 0x05
    216a:	2c 83       	std	Y+4, r18	; 0x04
    216c:	8c 81       	ldd	r24, Y+4	; 0x04
    216e:	9d 81       	ldd	r25, Y+5	; 0x05
    2170:	81 30       	cpi	r24, 0x01	; 1
    2172:	91 05       	cpc	r25, r1
    2174:	09 f4       	brne	.+2      	; 0x2178 <GPIO_writePin+0x3a>
    2176:	43 c0       	rjmp	.+134    	; 0x21fe <GPIO_writePin+0xc0>
    2178:	2c 81       	ldd	r18, Y+4	; 0x04
    217a:	3d 81       	ldd	r19, Y+5	; 0x05
    217c:	22 30       	cpi	r18, 0x02	; 2
    217e:	31 05       	cpc	r19, r1
    2180:	2c f4       	brge	.+10     	; 0x218c <GPIO_writePin+0x4e>
    2182:	8c 81       	ldd	r24, Y+4	; 0x04
    2184:	9d 81       	ldd	r25, Y+5	; 0x05
    2186:	00 97       	sbiw	r24, 0x00	; 0
    2188:	71 f0       	breq	.+28     	; 0x21a6 <GPIO_writePin+0x68>
    218a:	bc c0       	rjmp	.+376    	; 0x2304 <GPIO_writePin+0x1c6>
    218c:	2c 81       	ldd	r18, Y+4	; 0x04
    218e:	3d 81       	ldd	r19, Y+5	; 0x05
    2190:	22 30       	cpi	r18, 0x02	; 2
    2192:	31 05       	cpc	r19, r1
    2194:	09 f4       	brne	.+2      	; 0x2198 <GPIO_writePin+0x5a>
    2196:	5f c0       	rjmp	.+190    	; 0x2256 <GPIO_writePin+0x118>
    2198:	8c 81       	ldd	r24, Y+4	; 0x04
    219a:	9d 81       	ldd	r25, Y+5	; 0x05
    219c:	83 30       	cpi	r24, 0x03	; 3
    219e:	91 05       	cpc	r25, r1
    21a0:	09 f4       	brne	.+2      	; 0x21a4 <GPIO_writePin+0x66>
    21a2:	85 c0       	rjmp	.+266    	; 0x22ae <GPIO_writePin+0x170>
    21a4:	af c0       	rjmp	.+350    	; 0x2304 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    21a6:	8b 81       	ldd	r24, Y+3	; 0x03
    21a8:	81 30       	cpi	r24, 0x01	; 1
    21aa:	a1 f4       	brne	.+40     	; 0x21d4 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    21ac:	ab e3       	ldi	r26, 0x3B	; 59
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	eb e3       	ldi	r30, 0x3B	; 59
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	48 2f       	mov	r20, r24
    21b8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ba:	28 2f       	mov	r18, r24
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	02 2e       	mov	r0, r18
    21c4:	02 c0       	rjmp	.+4      	; 0x21ca <GPIO_writePin+0x8c>
    21c6:	88 0f       	add	r24, r24
    21c8:	99 1f       	adc	r25, r25
    21ca:	0a 94       	dec	r0
    21cc:	e2 f7       	brpl	.-8      	; 0x21c6 <GPIO_writePin+0x88>
    21ce:	84 2b       	or	r24, r20
    21d0:	8c 93       	st	X, r24
    21d2:	98 c0       	rjmp	.+304    	; 0x2304 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    21d4:	ab e3       	ldi	r26, 0x3B	; 59
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	eb e3       	ldi	r30, 0x3B	; 59
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	48 2f       	mov	r20, r24
    21e0:	8a 81       	ldd	r24, Y+2	; 0x02
    21e2:	28 2f       	mov	r18, r24
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	02 2e       	mov	r0, r18
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <GPIO_writePin+0xb4>
    21ee:	88 0f       	add	r24, r24
    21f0:	99 1f       	adc	r25, r25
    21f2:	0a 94       	dec	r0
    21f4:	e2 f7       	brpl	.-8      	; 0x21ee <GPIO_writePin+0xb0>
    21f6:	80 95       	com	r24
    21f8:	84 23       	and	r24, r20
    21fa:	8c 93       	st	X, r24
    21fc:	83 c0       	rjmp	.+262    	; 0x2304 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	81 30       	cpi	r24, 0x01	; 1
    2202:	a1 f4       	brne	.+40     	; 0x222c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2204:	a8 e3       	ldi	r26, 0x38	; 56
    2206:	b0 e0       	ldi	r27, 0x00	; 0
    2208:	e8 e3       	ldi	r30, 0x38	; 56
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	80 81       	ld	r24, Z
    220e:	48 2f       	mov	r20, r24
    2210:	8a 81       	ldd	r24, Y+2	; 0x02
    2212:	28 2f       	mov	r18, r24
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	02 2e       	mov	r0, r18
    221c:	02 c0       	rjmp	.+4      	; 0x2222 <GPIO_writePin+0xe4>
    221e:	88 0f       	add	r24, r24
    2220:	99 1f       	adc	r25, r25
    2222:	0a 94       	dec	r0
    2224:	e2 f7       	brpl	.-8      	; 0x221e <GPIO_writePin+0xe0>
    2226:	84 2b       	or	r24, r20
    2228:	8c 93       	st	X, r24
    222a:	6c c0       	rjmp	.+216    	; 0x2304 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    222c:	a8 e3       	ldi	r26, 0x38	; 56
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	e8 e3       	ldi	r30, 0x38	; 56
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	48 2f       	mov	r20, r24
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	28 2f       	mov	r18, r24
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	02 2e       	mov	r0, r18
    2244:	02 c0       	rjmp	.+4      	; 0x224a <GPIO_writePin+0x10c>
    2246:	88 0f       	add	r24, r24
    2248:	99 1f       	adc	r25, r25
    224a:	0a 94       	dec	r0
    224c:	e2 f7       	brpl	.-8      	; 0x2246 <GPIO_writePin+0x108>
    224e:	80 95       	com	r24
    2250:	84 23       	and	r24, r20
    2252:	8c 93       	st	X, r24
    2254:	57 c0       	rjmp	.+174    	; 0x2304 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2256:	8b 81       	ldd	r24, Y+3	; 0x03
    2258:	81 30       	cpi	r24, 0x01	; 1
    225a:	a1 f4       	brne	.+40     	; 0x2284 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    225c:	a5 e3       	ldi	r26, 0x35	; 53
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	e5 e3       	ldi	r30, 0x35	; 53
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	48 2f       	mov	r20, r24
    2268:	8a 81       	ldd	r24, Y+2	; 0x02
    226a:	28 2f       	mov	r18, r24
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	02 2e       	mov	r0, r18
    2274:	02 c0       	rjmp	.+4      	; 0x227a <GPIO_writePin+0x13c>
    2276:	88 0f       	add	r24, r24
    2278:	99 1f       	adc	r25, r25
    227a:	0a 94       	dec	r0
    227c:	e2 f7       	brpl	.-8      	; 0x2276 <GPIO_writePin+0x138>
    227e:	84 2b       	or	r24, r20
    2280:	8c 93       	st	X, r24
    2282:	40 c0       	rjmp	.+128    	; 0x2304 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2284:	a5 e3       	ldi	r26, 0x35	; 53
    2286:	b0 e0       	ldi	r27, 0x00	; 0
    2288:	e5 e3       	ldi	r30, 0x35	; 53
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	48 2f       	mov	r20, r24
    2290:	8a 81       	ldd	r24, Y+2	; 0x02
    2292:	28 2f       	mov	r18, r24
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	02 2e       	mov	r0, r18
    229c:	02 c0       	rjmp	.+4      	; 0x22a2 <GPIO_writePin+0x164>
    229e:	88 0f       	add	r24, r24
    22a0:	99 1f       	adc	r25, r25
    22a2:	0a 94       	dec	r0
    22a4:	e2 f7       	brpl	.-8      	; 0x229e <GPIO_writePin+0x160>
    22a6:	80 95       	com	r24
    22a8:	84 23       	and	r24, r20
    22aa:	8c 93       	st	X, r24
    22ac:	2b c0       	rjmp	.+86     	; 0x2304 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    22ae:	8b 81       	ldd	r24, Y+3	; 0x03
    22b0:	81 30       	cpi	r24, 0x01	; 1
    22b2:	a1 f4       	brne	.+40     	; 0x22dc <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    22b4:	a2 e3       	ldi	r26, 0x32	; 50
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	e2 e3       	ldi	r30, 0x32	; 50
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	48 2f       	mov	r20, r24
    22c0:	8a 81       	ldd	r24, Y+2	; 0x02
    22c2:	28 2f       	mov	r18, r24
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	02 2e       	mov	r0, r18
    22cc:	02 c0       	rjmp	.+4      	; 0x22d2 <GPIO_writePin+0x194>
    22ce:	88 0f       	add	r24, r24
    22d0:	99 1f       	adc	r25, r25
    22d2:	0a 94       	dec	r0
    22d4:	e2 f7       	brpl	.-8      	; 0x22ce <GPIO_writePin+0x190>
    22d6:	84 2b       	or	r24, r20
    22d8:	8c 93       	st	X, r24
    22da:	14 c0       	rjmp	.+40     	; 0x2304 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    22dc:	a2 e3       	ldi	r26, 0x32	; 50
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	e2 e3       	ldi	r30, 0x32	; 50
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	80 81       	ld	r24, Z
    22e6:	48 2f       	mov	r20, r24
    22e8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ea:	28 2f       	mov	r18, r24
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	02 2e       	mov	r0, r18
    22f4:	02 c0       	rjmp	.+4      	; 0x22fa <GPIO_writePin+0x1bc>
    22f6:	88 0f       	add	r24, r24
    22f8:	99 1f       	adc	r25, r25
    22fa:	0a 94       	dec	r0
    22fc:	e2 f7       	brpl	.-8      	; 0x22f6 <GPIO_writePin+0x1b8>
    22fe:	80 95       	com	r24
    2300:	84 23       	and	r24, r20
    2302:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2304:	0f 90       	pop	r0
    2306:	0f 90       	pop	r0
    2308:	0f 90       	pop	r0
    230a:	0f 90       	pop	r0
    230c:	0f 90       	pop	r0
    230e:	cf 91       	pop	r28
    2310:	df 91       	pop	r29
    2312:	08 95       	ret

00002314 <GPIO_readPin>:
 * Description:
 * Read and return the value for the required pin, it should be logic High or Logic Low.
 * If the input port or pin number are not correct, the function will return logic low
 */
uint8 GPIO_readPin(uint8 port_num,uint8 pin_num)
{
    2314:	df 93       	push	r29
    2316:	cf 93       	push	r28
    2318:	00 d0       	rcall	.+0      	; 0x231a <GPIO_readPin+0x6>
    231a:	00 d0       	rcall	.+0      	; 0x231c <GPIO_readPin+0x8>
    231c:	0f 92       	push	r0
    231e:	cd b7       	in	r28, 0x3d	; 61
    2320:	de b7       	in	r29, 0x3e	; 62
    2322:	8a 83       	std	Y+2, r24	; 0x02
    2324:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2326:	19 82       	std	Y+1, r1	; 0x01
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */

	if((port_num>=NUM_OF_PORTS ) ||(pin_num >=NUM_OF_PINS_PER_PORT))
    2328:	8a 81       	ldd	r24, Y+2	; 0x02
    232a:	84 30       	cpi	r24, 0x04	; 4
    232c:	08 f0       	brcs	.+2      	; 0x2330 <GPIO_readPin+0x1c>
    232e:	84 c0       	rjmp	.+264    	; 0x2438 <GPIO_readPin+0x124>
    2330:	8b 81       	ldd	r24, Y+3	; 0x03
    2332:	88 30       	cpi	r24, 0x08	; 8
    2334:	08 f0       	brcs	.+2      	; 0x2338 <GPIO_readPin+0x24>
    2336:	80 c0       	rjmp	.+256    	; 0x2438 <GPIO_readPin+0x124>
		 */
	}
	else
	{
		/*Read The Pin Value as Required */
		switch (port_num)
    2338:	8a 81       	ldd	r24, Y+2	; 0x02
    233a:	28 2f       	mov	r18, r24
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	3d 83       	std	Y+5, r19	; 0x05
    2340:	2c 83       	std	Y+4, r18	; 0x04
    2342:	4c 81       	ldd	r20, Y+4	; 0x04
    2344:	5d 81       	ldd	r21, Y+5	; 0x05
    2346:	41 30       	cpi	r20, 0x01	; 1
    2348:	51 05       	cpc	r21, r1
    234a:	79 f1       	breq	.+94     	; 0x23aa <GPIO_readPin+0x96>
    234c:	8c 81       	ldd	r24, Y+4	; 0x04
    234e:	9d 81       	ldd	r25, Y+5	; 0x05
    2350:	82 30       	cpi	r24, 0x02	; 2
    2352:	91 05       	cpc	r25, r1
    2354:	34 f4       	brge	.+12     	; 0x2362 <GPIO_readPin+0x4e>
    2356:	2c 81       	ldd	r18, Y+4	; 0x04
    2358:	3d 81       	ldd	r19, Y+5	; 0x05
    235a:	21 15       	cp	r18, r1
    235c:	31 05       	cpc	r19, r1
    235e:	69 f0       	breq	.+26     	; 0x237a <GPIO_readPin+0x66>
    2360:	6b c0       	rjmp	.+214    	; 0x2438 <GPIO_readPin+0x124>
    2362:	4c 81       	ldd	r20, Y+4	; 0x04
    2364:	5d 81       	ldd	r21, Y+5	; 0x05
    2366:	42 30       	cpi	r20, 0x02	; 2
    2368:	51 05       	cpc	r21, r1
    236a:	b9 f1       	breq	.+110    	; 0x23da <GPIO_readPin+0xc6>
    236c:	8c 81       	ldd	r24, Y+4	; 0x04
    236e:	9d 81       	ldd	r25, Y+5	; 0x05
    2370:	83 30       	cpi	r24, 0x03	; 3
    2372:	91 05       	cpc	r25, r1
    2374:	09 f4       	brne	.+2      	; 0x2378 <GPIO_readPin+0x64>
    2376:	49 c0       	rjmp	.+146    	; 0x240a <GPIO_readPin+0xf6>
    2378:	5f c0       	rjmp	.+190    	; 0x2438 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    237a:	e9 e3       	ldi	r30, 0x39	; 57
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	80 81       	ld	r24, Z
    2380:	28 2f       	mov	r18, r24
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	8b 81       	ldd	r24, Y+3	; 0x03
    2386:	88 2f       	mov	r24, r24
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	a9 01       	movw	r20, r18
    238c:	02 c0       	rjmp	.+4      	; 0x2392 <GPIO_readPin+0x7e>
    238e:	55 95       	asr	r21
    2390:	47 95       	ror	r20
    2392:	8a 95       	dec	r24
    2394:	e2 f7       	brpl	.-8      	; 0x238e <GPIO_readPin+0x7a>
    2396:	ca 01       	movw	r24, r20
    2398:	81 70       	andi	r24, 0x01	; 1
    239a:	90 70       	andi	r25, 0x00	; 0
    239c:	88 23       	and	r24, r24
    239e:	19 f0       	breq	.+6      	; 0x23a6 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	89 83       	std	Y+1, r24	; 0x01
    23a4:	49 c0       	rjmp	.+146    	; 0x2438 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    23a6:	19 82       	std	Y+1, r1	; 0x01
    23a8:	47 c0       	rjmp	.+142    	; 0x2438 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    23aa:	e6 e3       	ldi	r30, 0x36	; 54
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	80 81       	ld	r24, Z
    23b0:	28 2f       	mov	r18, r24
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	8b 81       	ldd	r24, Y+3	; 0x03
    23b6:	88 2f       	mov	r24, r24
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	a9 01       	movw	r20, r18
    23bc:	02 c0       	rjmp	.+4      	; 0x23c2 <GPIO_readPin+0xae>
    23be:	55 95       	asr	r21
    23c0:	47 95       	ror	r20
    23c2:	8a 95       	dec	r24
    23c4:	e2 f7       	brpl	.-8      	; 0x23be <GPIO_readPin+0xaa>
    23c6:	ca 01       	movw	r24, r20
    23c8:	81 70       	andi	r24, 0x01	; 1
    23ca:	90 70       	andi	r25, 0x00	; 0
    23cc:	88 23       	and	r24, r24
    23ce:	19 f0       	breq	.+6      	; 0x23d6 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	89 83       	std	Y+1, r24	; 0x01
    23d4:	31 c0       	rjmp	.+98     	; 0x2438 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    23d6:	19 82       	std	Y+1, r1	; 0x01
    23d8:	2f c0       	rjmp	.+94     	; 0x2438 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    23da:	e3 e3       	ldi	r30, 0x33	; 51
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	80 81       	ld	r24, Z
    23e0:	28 2f       	mov	r18, r24
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	8b 81       	ldd	r24, Y+3	; 0x03
    23e6:	88 2f       	mov	r24, r24
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	a9 01       	movw	r20, r18
    23ec:	02 c0       	rjmp	.+4      	; 0x23f2 <GPIO_readPin+0xde>
    23ee:	55 95       	asr	r21
    23f0:	47 95       	ror	r20
    23f2:	8a 95       	dec	r24
    23f4:	e2 f7       	brpl	.-8      	; 0x23ee <GPIO_readPin+0xda>
    23f6:	ca 01       	movw	r24, r20
    23f8:	81 70       	andi	r24, 0x01	; 1
    23fa:	90 70       	andi	r25, 0x00	; 0
    23fc:	88 23       	and	r24, r24
    23fe:	19 f0       	breq	.+6      	; 0x2406 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	89 83       	std	Y+1, r24	; 0x01
    2404:	19 c0       	rjmp	.+50     	; 0x2438 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2406:	19 82       	std	Y+1, r1	; 0x01
    2408:	17 c0       	rjmp	.+46     	; 0x2438 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    240a:	e0 e3       	ldi	r30, 0x30	; 48
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 81       	ld	r24, Z
    2410:	28 2f       	mov	r18, r24
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	8b 81       	ldd	r24, Y+3	; 0x03
    2416:	88 2f       	mov	r24, r24
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	a9 01       	movw	r20, r18
    241c:	02 c0       	rjmp	.+4      	; 0x2422 <GPIO_readPin+0x10e>
    241e:	55 95       	asr	r21
    2420:	47 95       	ror	r20
    2422:	8a 95       	dec	r24
    2424:	e2 f7       	brpl	.-8      	; 0x241e <GPIO_readPin+0x10a>
    2426:	ca 01       	movw	r24, r20
    2428:	81 70       	andi	r24, 0x01	; 1
    242a:	90 70       	andi	r25, 0x00	; 0
    242c:	88 23       	and	r24, r24
    242e:	19 f0       	breq	.+6      	; 0x2436 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	89 83       	std	Y+1, r24	; 0x01
    2434:	01 c0       	rjmp	.+2      	; 0x2438 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2436:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pin_value;
    2438:	89 81       	ldd	r24, Y+1	; 0x01
}
    243a:	0f 90       	pop	r0
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	0f 90       	pop	r0
    2442:	0f 90       	pop	r0
    2444:	cf 91       	pop	r28
    2446:	df 91       	pop	r29
    2448:	08 95       	ret

0000244a <GPIO_setupPortDirection>:
 * if the direction value is PORT_OUTPUT all pins in this port should be outputs pins
 * if the input port number is not correct, the function will not handle the request.
 */

void GPIO_setupPortDirection(uint8 port_num,GPIO_PortDirectionType direction)
{
    244a:	df 93       	push	r29
    244c:	cf 93       	push	r28
    244e:	00 d0       	rcall	.+0      	; 0x2450 <GPIO_setupPortDirection+0x6>
    2450:	00 d0       	rcall	.+0      	; 0x2452 <GPIO_setupPortDirection+0x8>
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
    2456:	89 83       	std	Y+1, r24	; 0x01
    2458:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */

	if(port_num >= NUM_OF_PORTS)
    245a:	89 81       	ldd	r24, Y+1	; 0x01
    245c:	84 30       	cpi	r24, 0x04	; 4
    245e:	90 f5       	brcc	.+100    	; 0x24c4 <GPIO_setupPortDirection+0x7a>
		/* Do nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2460:	89 81       	ldd	r24, Y+1	; 0x01
    2462:	28 2f       	mov	r18, r24
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	3c 83       	std	Y+4, r19	; 0x04
    2468:	2b 83       	std	Y+3, r18	; 0x03
    246a:	8b 81       	ldd	r24, Y+3	; 0x03
    246c:	9c 81       	ldd	r25, Y+4	; 0x04
    246e:	81 30       	cpi	r24, 0x01	; 1
    2470:	91 05       	cpc	r25, r1
    2472:	d1 f0       	breq	.+52     	; 0x24a8 <GPIO_setupPortDirection+0x5e>
    2474:	2b 81       	ldd	r18, Y+3	; 0x03
    2476:	3c 81       	ldd	r19, Y+4	; 0x04
    2478:	22 30       	cpi	r18, 0x02	; 2
    247a:	31 05       	cpc	r19, r1
    247c:	2c f4       	brge	.+10     	; 0x2488 <GPIO_setupPortDirection+0x3e>
    247e:	8b 81       	ldd	r24, Y+3	; 0x03
    2480:	9c 81       	ldd	r25, Y+4	; 0x04
    2482:	00 97       	sbiw	r24, 0x00	; 0
    2484:	61 f0       	breq	.+24     	; 0x249e <GPIO_setupPortDirection+0x54>
    2486:	1e c0       	rjmp	.+60     	; 0x24c4 <GPIO_setupPortDirection+0x7a>
    2488:	2b 81       	ldd	r18, Y+3	; 0x03
    248a:	3c 81       	ldd	r19, Y+4	; 0x04
    248c:	22 30       	cpi	r18, 0x02	; 2
    248e:	31 05       	cpc	r19, r1
    2490:	81 f0       	breq	.+32     	; 0x24b2 <GPIO_setupPortDirection+0x68>
    2492:	8b 81       	ldd	r24, Y+3	; 0x03
    2494:	9c 81       	ldd	r25, Y+4	; 0x04
    2496:	83 30       	cpi	r24, 0x03	; 3
    2498:	91 05       	cpc	r25, r1
    249a:	81 f0       	breq	.+32     	; 0x24bc <GPIO_setupPortDirection+0x72>
    249c:	13 c0       	rjmp	.+38     	; 0x24c4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    249e:	ea e3       	ldi	r30, 0x3A	; 58
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	8a 81       	ldd	r24, Y+2	; 0x02
    24a4:	80 83       	st	Z, r24
    24a6:	0e c0       	rjmp	.+28     	; 0x24c4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    24a8:	e7 e3       	ldi	r30, 0x37	; 55
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	8a 81       	ldd	r24, Y+2	; 0x02
    24ae:	80 83       	st	Z, r24
    24b0:	09 c0       	rjmp	.+18     	; 0x24c4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    24b2:	e4 e3       	ldi	r30, 0x34	; 52
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	8a 81       	ldd	r24, Y+2	; 0x02
    24b8:	80 83       	st	Z, r24
    24ba:	04 c0       	rjmp	.+8      	; 0x24c4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    24bc:	e1 e3       	ldi	r30, 0x31	; 49
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	8a 81       	ldd	r24, Y+2	; 0x02
    24c2:	80 83       	st	Z, r24
			break;
		}
	}
}
    24c4:	0f 90       	pop	r0
    24c6:	0f 90       	pop	r0
    24c8:	0f 90       	pop	r0
    24ca:	0f 90       	pop	r0
    24cc:	cf 91       	pop	r28
    24ce:	df 91       	pop	r29
    24d0:	08 95       	ret

000024d2 <GPIO_writePort>:
 * if any pin in the port is output pin the value will be written
 * if any pin in the port is input pin this will activate/deactivate the internal pull-up resistor
 * if the input port number is not correct, the function will not handle the request
 */
void GPIO_writePort(uint8 port_num,uint8 value)
{
    24d2:	df 93       	push	r29
    24d4:	cf 93       	push	r28
    24d6:	00 d0       	rcall	.+0      	; 0x24d8 <GPIO_writePort+0x6>
    24d8:	00 d0       	rcall	.+0      	; 0x24da <GPIO_writePort+0x8>
    24da:	cd b7       	in	r28, 0x3d	; 61
    24dc:	de b7       	in	r29, 0x3e	; 62
    24de:	89 83       	std	Y+1, r24	; 0x01
    24e0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */

	if (port_num >= NUM_OF_PORTS)
    24e2:	89 81       	ldd	r24, Y+1	; 0x01
    24e4:	84 30       	cpi	r24, 0x04	; 4
    24e6:	90 f5       	brcc	.+100    	; 0x254c <GPIO_writePort+0x7a>
	{
		/* Do nothing */
	}
	else
	{
		switch (port_num)
    24e8:	89 81       	ldd	r24, Y+1	; 0x01
    24ea:	28 2f       	mov	r18, r24
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	3c 83       	std	Y+4, r19	; 0x04
    24f0:	2b 83       	std	Y+3, r18	; 0x03
    24f2:	8b 81       	ldd	r24, Y+3	; 0x03
    24f4:	9c 81       	ldd	r25, Y+4	; 0x04
    24f6:	81 30       	cpi	r24, 0x01	; 1
    24f8:	91 05       	cpc	r25, r1
    24fa:	d1 f0       	breq	.+52     	; 0x2530 <GPIO_writePort+0x5e>
    24fc:	2b 81       	ldd	r18, Y+3	; 0x03
    24fe:	3c 81       	ldd	r19, Y+4	; 0x04
    2500:	22 30       	cpi	r18, 0x02	; 2
    2502:	31 05       	cpc	r19, r1
    2504:	2c f4       	brge	.+10     	; 0x2510 <GPIO_writePort+0x3e>
    2506:	8b 81       	ldd	r24, Y+3	; 0x03
    2508:	9c 81       	ldd	r25, Y+4	; 0x04
    250a:	00 97       	sbiw	r24, 0x00	; 0
    250c:	61 f0       	breq	.+24     	; 0x2526 <GPIO_writePort+0x54>
    250e:	1e c0       	rjmp	.+60     	; 0x254c <GPIO_writePort+0x7a>
    2510:	2b 81       	ldd	r18, Y+3	; 0x03
    2512:	3c 81       	ldd	r19, Y+4	; 0x04
    2514:	22 30       	cpi	r18, 0x02	; 2
    2516:	31 05       	cpc	r19, r1
    2518:	81 f0       	breq	.+32     	; 0x253a <GPIO_writePort+0x68>
    251a:	8b 81       	ldd	r24, Y+3	; 0x03
    251c:	9c 81       	ldd	r25, Y+4	; 0x04
    251e:	83 30       	cpi	r24, 0x03	; 3
    2520:	91 05       	cpc	r25, r1
    2522:	81 f0       	breq	.+32     	; 0x2544 <GPIO_writePort+0x72>
    2524:	13 c0       	rjmp	.+38     	; 0x254c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2526:	eb e3       	ldi	r30, 0x3B	; 59
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	8a 81       	ldd	r24, Y+2	; 0x02
    252c:	80 83       	st	Z, r24
    252e:	0e c0       	rjmp	.+28     	; 0x254c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2530:	e8 e3       	ldi	r30, 0x38	; 56
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	8a 81       	ldd	r24, Y+2	; 0x02
    2536:	80 83       	st	Z, r24
    2538:	09 c0       	rjmp	.+18     	; 0x254c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    253a:	e5 e3       	ldi	r30, 0x35	; 53
    253c:	f0 e0       	ldi	r31, 0x00	; 0
    253e:	8a 81       	ldd	r24, Y+2	; 0x02
    2540:	80 83       	st	Z, r24
    2542:	04 c0       	rjmp	.+8      	; 0x254c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2544:	e2 e3       	ldi	r30, 0x32	; 50
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	8a 81       	ldd	r24, Y+2	; 0x02
    254a:	80 83       	st	Z, r24
			break;
		}
	}
}
    254c:	0f 90       	pop	r0
    254e:	0f 90       	pop	r0
    2550:	0f 90       	pop	r0
    2552:	0f 90       	pop	r0
    2554:	cf 91       	pop	r28
    2556:	df 91       	pop	r29
    2558:	08 95       	ret

0000255a <GPIO_readPort>:
 * Read and return the value of the required port
 * if the input port number is not correct the function will return ZERO value
 */

uint8 GPIO_readPort(uint8 port_num)
{
    255a:	df 93       	push	r29
    255c:	cf 93       	push	r28
    255e:	00 d0       	rcall	.+0      	; 0x2560 <GPIO_readPort+0x6>
    2560:	00 d0       	rcall	.+0      	; 0x2562 <GPIO_readPort+0x8>
    2562:	cd b7       	in	r28, 0x3d	; 61
    2564:	de b7       	in	r29, 0x3e	; 62
    2566:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2568:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the port number is greater than NUM_OF_PORTS value
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    256a:	8a 81       	ldd	r24, Y+2	; 0x02
    256c:	84 30       	cpi	r24, 0x04	; 4
    256e:	90 f5       	brcc	.+100    	; 0x25d4 <GPIO_readPort+0x7a>
	{
		/* Do nothing */
	}
	else
	{
		switch (port_num)
    2570:	8a 81       	ldd	r24, Y+2	; 0x02
    2572:	28 2f       	mov	r18, r24
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	3c 83       	std	Y+4, r19	; 0x04
    2578:	2b 83       	std	Y+3, r18	; 0x03
    257a:	8b 81       	ldd	r24, Y+3	; 0x03
    257c:	9c 81       	ldd	r25, Y+4	; 0x04
    257e:	81 30       	cpi	r24, 0x01	; 1
    2580:	91 05       	cpc	r25, r1
    2582:	d1 f0       	breq	.+52     	; 0x25b8 <GPIO_readPort+0x5e>
    2584:	2b 81       	ldd	r18, Y+3	; 0x03
    2586:	3c 81       	ldd	r19, Y+4	; 0x04
    2588:	22 30       	cpi	r18, 0x02	; 2
    258a:	31 05       	cpc	r19, r1
    258c:	2c f4       	brge	.+10     	; 0x2598 <GPIO_readPort+0x3e>
    258e:	8b 81       	ldd	r24, Y+3	; 0x03
    2590:	9c 81       	ldd	r25, Y+4	; 0x04
    2592:	00 97       	sbiw	r24, 0x00	; 0
    2594:	61 f0       	breq	.+24     	; 0x25ae <GPIO_readPort+0x54>
    2596:	1e c0       	rjmp	.+60     	; 0x25d4 <GPIO_readPort+0x7a>
    2598:	2b 81       	ldd	r18, Y+3	; 0x03
    259a:	3c 81       	ldd	r19, Y+4	; 0x04
    259c:	22 30       	cpi	r18, 0x02	; 2
    259e:	31 05       	cpc	r19, r1
    25a0:	81 f0       	breq	.+32     	; 0x25c2 <GPIO_readPort+0x68>
    25a2:	8b 81       	ldd	r24, Y+3	; 0x03
    25a4:	9c 81       	ldd	r25, Y+4	; 0x04
    25a6:	83 30       	cpi	r24, 0x03	; 3
    25a8:	91 05       	cpc	r25, r1
    25aa:	81 f0       	breq	.+32     	; 0x25cc <GPIO_readPort+0x72>
    25ac:	13 c0       	rjmp	.+38     	; 0x25d4 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    25ae:	e9 e3       	ldi	r30, 0x39	; 57
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	80 81       	ld	r24, Z
    25b4:	89 83       	std	Y+1, r24	; 0x01
    25b6:	0e c0       	rjmp	.+28     	; 0x25d4 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    25b8:	e6 e3       	ldi	r30, 0x36	; 54
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	80 81       	ld	r24, Z
    25be:	89 83       	std	Y+1, r24	; 0x01
    25c0:	09 c0       	rjmp	.+18     	; 0x25d4 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    25c2:	e3 e3       	ldi	r30, 0x33	; 51
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	80 81       	ld	r24, Z
    25c8:	89 83       	std	Y+1, r24	; 0x01
    25ca:	04 c0       	rjmp	.+8      	; 0x25d4 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    25cc:	e0 e3       	ldi	r30, 0x30	; 48
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	80 81       	ld	r24, Z
    25d2:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    25d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    25d6:	0f 90       	pop	r0
    25d8:	0f 90       	pop	r0
    25da:	0f 90       	pop	r0
    25dc:	0f 90       	pop	r0
    25de:	cf 91       	pop	r28
    25e0:	df 91       	pop	r29
    25e2:	08 95       	ret

000025e4 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    25e4:	df 93       	push	r29
    25e6:	cf 93       	push	r28
    25e8:	cd b7       	in	r28, 0x3d	; 61
    25ea:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    25ec:	83 e0       	ldi	r24, 0x03	; 3
    25ee:	65 e0       	ldi	r22, 0x05	; 5
    25f0:	41 e0       	ldi	r20, 0x01	; 1
    25f2:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    25f6:	83 e0       	ldi	r24, 0x03	; 3
    25f8:	66 e0       	ldi	r22, 0x06	; 6
    25fa:	41 e0       	ldi	r20, 0x01	; 1
    25fc:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2600:	83 e0       	ldi	r24, 0x03	; 3
    2602:	67 e0       	ldi	r22, 0x07	; 7
    2604:	41 e0       	ldi	r20, 0x01	; 1
    2606:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    260a:	82 e0       	ldi	r24, 0x02	; 2
    260c:	6f ef       	ldi	r22, 0xFF	; 255
    260e:	0e 94 25 12 	call	0x244a	; 0x244a <GPIO_setupPortDirection>

	/* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2612:	88 e3       	ldi	r24, 0x38	; 56
    2614:	0e 94 15 13 	call	0x262a	; 0x262a <LCD_sendCommand>
#endif
	/* cursor off */
	LCD_sendCommand(LCD_CURSOR_OFF);
    2618:	8c e0       	ldi	r24, 0x0C	; 12
    261a:	0e 94 15 13 	call	0x262a	; 0x262a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	0e 94 15 13 	call	0x262a	; 0x262a <LCD_sendCommand>
}
    2624:	cf 91       	pop	r28
    2626:	df 91       	pop	r29
    2628:	08 95       	ret

0000262a <LCD_sendCommand>:
/*
 * Description:
 * send required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    262a:	df 93       	push	r29
    262c:	cf 93       	push	r28
    262e:	cd b7       	in	r28, 0x3d	; 61
    2630:	de b7       	in	r29, 0x3e	; 62
    2632:	ea 97       	sbiw	r28, 0x3a	; 58
    2634:	0f b6       	in	r0, 0x3f	; 63
    2636:	f8 94       	cli
    2638:	de bf       	out	0x3e, r29	; 62
    263a:	0f be       	out	0x3f, r0	; 63
    263c:	cd bf       	out	0x3d, r28	; 61
    263e:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    2640:	19 ae       	std	Y+57, r1	; 0x39

	/* Instruction Mode RS=0 */
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
    2642:	83 e0       	ldi	r24, 0x03	; 3
    2644:	65 e0       	ldi	r22, 0x05	; 5
    2646:	40 e0       	ldi	r20, 0x00	; 0
    2648:	0e 94 9f 10 	call	0x213e	; 0x213e <GPIO_writePin>
	/* write data to the LCd R/W =0 */
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
    264c:	83 e0       	ldi	r24, 0x03	; 3
    264e:	66 e0       	ldi	r22, 0x06	; 6
    2650:	40 e0       	ldi	r20, 0x00	; 0
    2652:	0e 94 9f 10 	call	0x213e	; 0x213e <GPIO_writePin>
    2656:	80 e0       	ldi	r24, 0x00	; 0
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	a0 e8       	ldi	r26, 0x80	; 128
    265c:	bf e3       	ldi	r27, 0x3F	; 63
    265e:	8d ab       	std	Y+53, r24	; 0x35
    2660:	9e ab       	std	Y+54, r25	; 0x36
    2662:	af ab       	std	Y+55, r26	; 0x37
    2664:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2666:	6d a9       	ldd	r22, Y+53	; 0x35
    2668:	7e a9       	ldd	r23, Y+54	; 0x36
    266a:	8f a9       	ldd	r24, Y+55	; 0x37
    266c:	98 ad       	ldd	r25, Y+56	; 0x38
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	4a e7       	ldi	r20, 0x7A	; 122
    2674:	53 e4       	ldi	r21, 0x43	; 67
    2676:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    267a:	dc 01       	movw	r26, r24
    267c:	cb 01       	movw	r24, r22
    267e:	89 ab       	std	Y+49, r24	; 0x31
    2680:	9a ab       	std	Y+50, r25	; 0x32
    2682:	ab ab       	std	Y+51, r26	; 0x33
    2684:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2686:	69 a9       	ldd	r22, Y+49	; 0x31
    2688:	7a a9       	ldd	r23, Y+50	; 0x32
    268a:	8b a9       	ldd	r24, Y+51	; 0x33
    268c:	9c a9       	ldd	r25, Y+52	; 0x34
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	40 e8       	ldi	r20, 0x80	; 128
    2694:	5f e3       	ldi	r21, 0x3F	; 63
    2696:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    269a:	88 23       	and	r24, r24
    269c:	2c f4       	brge	.+10     	; 0x26a8 <LCD_sendCommand+0x7e>
		__ticks = 1;
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	98 ab       	std	Y+48, r25	; 0x30
    26a4:	8f a7       	std	Y+47, r24	; 0x2f
    26a6:	3f c0       	rjmp	.+126    	; 0x2726 <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    26a8:	69 a9       	ldd	r22, Y+49	; 0x31
    26aa:	7a a9       	ldd	r23, Y+50	; 0x32
    26ac:	8b a9       	ldd	r24, Y+51	; 0x33
    26ae:	9c a9       	ldd	r25, Y+52	; 0x34
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	3f ef       	ldi	r19, 0xFF	; 255
    26b4:	4f e7       	ldi	r20, 0x7F	; 127
    26b6:	57 e4       	ldi	r21, 0x47	; 71
    26b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26bc:	18 16       	cp	r1, r24
    26be:	4c f5       	brge	.+82     	; 0x2712 <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c0:	6d a9       	ldd	r22, Y+53	; 0x35
    26c2:	7e a9       	ldd	r23, Y+54	; 0x36
    26c4:	8f a9       	ldd	r24, Y+55	; 0x37
    26c6:	98 ad       	ldd	r25, Y+56	; 0x38
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	40 e2       	ldi	r20, 0x20	; 32
    26ce:	51 e4       	ldi	r21, 0x41	; 65
    26d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d4:	dc 01       	movw	r26, r24
    26d6:	cb 01       	movw	r24, r22
    26d8:	bc 01       	movw	r22, r24
    26da:	cd 01       	movw	r24, r26
    26dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e0:	dc 01       	movw	r26, r24
    26e2:	cb 01       	movw	r24, r22
    26e4:	98 ab       	std	Y+48, r25	; 0x30
    26e6:	8f a7       	std	Y+47, r24	; 0x2f
    26e8:	0f c0       	rjmp	.+30     	; 0x2708 <LCD_sendCommand+0xde>
    26ea:	89 e1       	ldi	r24, 0x19	; 25
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	9e a7       	std	Y+46, r25	; 0x2e
    26f0:	8d a7       	std	Y+45, r24	; 0x2d
    26f2:	8d a5       	ldd	r24, Y+45	; 0x2d
    26f4:	9e a5       	ldd	r25, Y+46	; 0x2e
    26f6:	01 97       	sbiw	r24, 0x01	; 1
    26f8:	f1 f7       	brne	.-4      	; 0x26f6 <LCD_sendCommand+0xcc>
    26fa:	9e a7       	std	Y+46, r25	; 0x2e
    26fc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2700:	98 a9       	ldd	r25, Y+48	; 0x30
    2702:	01 97       	sbiw	r24, 0x01	; 1
    2704:	98 ab       	std	Y+48, r25	; 0x30
    2706:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2708:	8f a5       	ldd	r24, Y+47	; 0x2f
    270a:	98 a9       	ldd	r25, Y+48	; 0x30
    270c:	00 97       	sbiw	r24, 0x00	; 0
    270e:	69 f7       	brne	.-38     	; 0x26ea <LCD_sendCommand+0xc0>
    2710:	14 c0       	rjmp	.+40     	; 0x273a <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2712:	69 a9       	ldd	r22, Y+49	; 0x31
    2714:	7a a9       	ldd	r23, Y+50	; 0x32
    2716:	8b a9       	ldd	r24, Y+51	; 0x33
    2718:	9c a9       	ldd	r25, Y+52	; 0x34
    271a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271e:	dc 01       	movw	r26, r24
    2720:	cb 01       	movw	r24, r22
    2722:	98 ab       	std	Y+48, r25	; 0x30
    2724:	8f a7       	std	Y+47, r24	; 0x2f
    2726:	8f a5       	ldd	r24, Y+47	; 0x2f
    2728:	98 a9       	ldd	r25, Y+48	; 0x30
    272a:	9c a7       	std	Y+44, r25	; 0x2c
    272c:	8b a7       	std	Y+43, r24	; 0x2b
    272e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2730:	9c a5       	ldd	r25, Y+44	; 0x2c
    2732:	01 97       	sbiw	r24, 0x01	; 1
    2734:	f1 f7       	brne	.-4      	; 0x2732 <LCD_sendCommand+0x108>
    2736:	9c a7       	std	Y+44, r25	; 0x2c
    2738:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1); /* delay for processing Tas = 50ns */

	/* Enable LCD E=1 */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    273a:	83 e0       	ldi	r24, 0x03	; 3
    273c:	67 e0       	ldi	r22, 0x07	; 7
    273e:	41 e0       	ldi	r20, 0x01	; 1
    2740:	0e 94 9f 10 	call	0x213e	; 0x213e <GPIO_writePin>
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	a0 e8       	ldi	r26, 0x80	; 128
    274a:	bf e3       	ldi	r27, 0x3F	; 63
    274c:	8f a3       	std	Y+39, r24	; 0x27
    274e:	98 a7       	std	Y+40, r25	; 0x28
    2750:	a9 a7       	std	Y+41, r26	; 0x29
    2752:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2754:	6f a1       	ldd	r22, Y+39	; 0x27
    2756:	78 a5       	ldd	r23, Y+40	; 0x28
    2758:	89 a5       	ldd	r24, Y+41	; 0x29
    275a:	9a a5       	ldd	r25, Y+42	; 0x2a
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	4a e7       	ldi	r20, 0x7A	; 122
    2762:	53 e4       	ldi	r21, 0x43	; 67
    2764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2768:	dc 01       	movw	r26, r24
    276a:	cb 01       	movw	r24, r22
    276c:	8b a3       	std	Y+35, r24	; 0x23
    276e:	9c a3       	std	Y+36, r25	; 0x24
    2770:	ad a3       	std	Y+37, r26	; 0x25
    2772:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2774:	6b a1       	ldd	r22, Y+35	; 0x23
    2776:	7c a1       	ldd	r23, Y+36	; 0x24
    2778:	8d a1       	ldd	r24, Y+37	; 0x25
    277a:	9e a1       	ldd	r25, Y+38	; 0x26
    277c:	20 e0       	ldi	r18, 0x00	; 0
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	40 e8       	ldi	r20, 0x80	; 128
    2782:	5f e3       	ldi	r21, 0x3F	; 63
    2784:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2788:	88 23       	and	r24, r24
    278a:	2c f4       	brge	.+10     	; 0x2796 <LCD_sendCommand+0x16c>
		__ticks = 1;
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	9a a3       	std	Y+34, r25	; 0x22
    2792:	89 a3       	std	Y+33, r24	; 0x21
    2794:	3f c0       	rjmp	.+126    	; 0x2814 <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    2796:	6b a1       	ldd	r22, Y+35	; 0x23
    2798:	7c a1       	ldd	r23, Y+36	; 0x24
    279a:	8d a1       	ldd	r24, Y+37	; 0x25
    279c:	9e a1       	ldd	r25, Y+38	; 0x26
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	3f ef       	ldi	r19, 0xFF	; 255
    27a2:	4f e7       	ldi	r20, 0x7F	; 127
    27a4:	57 e4       	ldi	r21, 0x47	; 71
    27a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27aa:	18 16       	cp	r1, r24
    27ac:	4c f5       	brge	.+82     	; 0x2800 <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ae:	6f a1       	ldd	r22, Y+39	; 0x27
    27b0:	78 a5       	ldd	r23, Y+40	; 0x28
    27b2:	89 a5       	ldd	r24, Y+41	; 0x29
    27b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	40 e2       	ldi	r20, 0x20	; 32
    27bc:	51 e4       	ldi	r21, 0x41	; 65
    27be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c2:	dc 01       	movw	r26, r24
    27c4:	cb 01       	movw	r24, r22
    27c6:	bc 01       	movw	r22, r24
    27c8:	cd 01       	movw	r24, r26
    27ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	9a a3       	std	Y+34, r25	; 0x22
    27d4:	89 a3       	std	Y+33, r24	; 0x21
    27d6:	0f c0       	rjmp	.+30     	; 0x27f6 <LCD_sendCommand+0x1cc>
    27d8:	89 e1       	ldi	r24, 0x19	; 25
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	98 a3       	std	Y+32, r25	; 0x20
    27de:	8f 8f       	std	Y+31, r24	; 0x1f
    27e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27e2:	98 a1       	ldd	r25, Y+32	; 0x20
    27e4:	01 97       	sbiw	r24, 0x01	; 1
    27e6:	f1 f7       	brne	.-4      	; 0x27e4 <LCD_sendCommand+0x1ba>
    27e8:	98 a3       	std	Y+32, r25	; 0x20
    27ea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ec:	89 a1       	ldd	r24, Y+33	; 0x21
    27ee:	9a a1       	ldd	r25, Y+34	; 0x22
    27f0:	01 97       	sbiw	r24, 0x01	; 1
    27f2:	9a a3       	std	Y+34, r25	; 0x22
    27f4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f6:	89 a1       	ldd	r24, Y+33	; 0x21
    27f8:	9a a1       	ldd	r25, Y+34	; 0x22
    27fa:	00 97       	sbiw	r24, 0x00	; 0
    27fc:	69 f7       	brne	.-38     	; 0x27d8 <LCD_sendCommand+0x1ae>
    27fe:	14 c0       	rjmp	.+40     	; 0x2828 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2800:	6b a1       	ldd	r22, Y+35	; 0x23
    2802:	7c a1       	ldd	r23, Y+36	; 0x24
    2804:	8d a1       	ldd	r24, Y+37	; 0x25
    2806:	9e a1       	ldd	r25, Y+38	; 0x26
    2808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	9a a3       	std	Y+34, r25	; 0x22
    2812:	89 a3       	std	Y+33, r24	; 0x21
    2814:	89 a1       	ldd	r24, Y+33	; 0x21
    2816:	9a a1       	ldd	r25, Y+34	; 0x22
    2818:	9e 8f       	std	Y+30, r25	; 0x1e
    281a:	8d 8f       	std	Y+29, r24	; 0x1d
    281c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    281e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2820:	01 97       	sbiw	r24, 0x01	; 1
    2822:	f1 f7       	brne	.-4      	; 0x2820 <LCD_sendCommand+0x1f6>
    2824:	9e 8f       	std	Y+30, r25	; 0x1e
    2826:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2828:	82 e0       	ldi	r24, 0x02	; 2
    282a:	6a ad       	ldd	r22, Y+58	; 0x3a
    282c:	0e 94 69 12 	call	0x24d2	; 0x24d2 <GPIO_writePort>
    2830:	80 e0       	ldi	r24, 0x00	; 0
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	a0 e8       	ldi	r26, 0x80	; 128
    2836:	bf e3       	ldi	r27, 0x3F	; 63
    2838:	89 8f       	std	Y+25, r24	; 0x19
    283a:	9a 8f       	std	Y+26, r25	; 0x1a
    283c:	ab 8f       	std	Y+27, r26	; 0x1b
    283e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2840:	69 8d       	ldd	r22, Y+25	; 0x19
    2842:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2844:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2846:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	4a e7       	ldi	r20, 0x7A	; 122
    284e:	53 e4       	ldi	r21, 0x43	; 67
    2850:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2854:	dc 01       	movw	r26, r24
    2856:	cb 01       	movw	r24, r22
    2858:	8d 8b       	std	Y+21, r24	; 0x15
    285a:	9e 8b       	std	Y+22, r25	; 0x16
    285c:	af 8b       	std	Y+23, r26	; 0x17
    285e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2860:	6d 89       	ldd	r22, Y+21	; 0x15
    2862:	7e 89       	ldd	r23, Y+22	; 0x16
    2864:	8f 89       	ldd	r24, Y+23	; 0x17
    2866:	98 8d       	ldd	r25, Y+24	; 0x18
    2868:	20 e0       	ldi	r18, 0x00	; 0
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	40 e8       	ldi	r20, 0x80	; 128
    286e:	5f e3       	ldi	r21, 0x3F	; 63
    2870:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2874:	88 23       	and	r24, r24
    2876:	2c f4       	brge	.+10     	; 0x2882 <LCD_sendCommand+0x258>
		__ticks = 1;
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	9c 8b       	std	Y+20, r25	; 0x14
    287e:	8b 8b       	std	Y+19, r24	; 0x13
    2880:	3f c0       	rjmp	.+126    	; 0x2900 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    2882:	6d 89       	ldd	r22, Y+21	; 0x15
    2884:	7e 89       	ldd	r23, Y+22	; 0x16
    2886:	8f 89       	ldd	r24, Y+23	; 0x17
    2888:	98 8d       	ldd	r25, Y+24	; 0x18
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	3f ef       	ldi	r19, 0xFF	; 255
    288e:	4f e7       	ldi	r20, 0x7F	; 127
    2890:	57 e4       	ldi	r21, 0x47	; 71
    2892:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2896:	18 16       	cp	r1, r24
    2898:	4c f5       	brge	.+82     	; 0x28ec <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    289a:	69 8d       	ldd	r22, Y+25	; 0x19
    289c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    289e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	40 e2       	ldi	r20, 0x20	; 32
    28a8:	51 e4       	ldi	r21, 0x41	; 65
    28aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ae:	dc 01       	movw	r26, r24
    28b0:	cb 01       	movw	r24, r22
    28b2:	bc 01       	movw	r22, r24
    28b4:	cd 01       	movw	r24, r26
    28b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	9c 8b       	std	Y+20, r25	; 0x14
    28c0:	8b 8b       	std	Y+19, r24	; 0x13
    28c2:	0f c0       	rjmp	.+30     	; 0x28e2 <LCD_sendCommand+0x2b8>
    28c4:	89 e1       	ldi	r24, 0x19	; 25
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	9a 8b       	std	Y+18, r25	; 0x12
    28ca:	89 8b       	std	Y+17, r24	; 0x11
    28cc:	89 89       	ldd	r24, Y+17	; 0x11
    28ce:	9a 89       	ldd	r25, Y+18	; 0x12
    28d0:	01 97       	sbiw	r24, 0x01	; 1
    28d2:	f1 f7       	brne	.-4      	; 0x28d0 <LCD_sendCommand+0x2a6>
    28d4:	9a 8b       	std	Y+18, r25	; 0x12
    28d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d8:	8b 89       	ldd	r24, Y+19	; 0x13
    28da:	9c 89       	ldd	r25, Y+20	; 0x14
    28dc:	01 97       	sbiw	r24, 0x01	; 1
    28de:	9c 8b       	std	Y+20, r25	; 0x14
    28e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e2:	8b 89       	ldd	r24, Y+19	; 0x13
    28e4:	9c 89       	ldd	r25, Y+20	; 0x14
    28e6:	00 97       	sbiw	r24, 0x00	; 0
    28e8:	69 f7       	brne	.-38     	; 0x28c4 <LCD_sendCommand+0x29a>
    28ea:	14 c0       	rjmp	.+40     	; 0x2914 <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ec:	6d 89       	ldd	r22, Y+21	; 0x15
    28ee:	7e 89       	ldd	r23, Y+22	; 0x16
    28f0:	8f 89       	ldd	r24, Y+23	; 0x17
    28f2:	98 8d       	ldd	r25, Y+24	; 0x18
    28f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f8:	dc 01       	movw	r26, r24
    28fa:	cb 01       	movw	r24, r22
    28fc:	9c 8b       	std	Y+20, r25	; 0x14
    28fe:	8b 8b       	std	Y+19, r24	; 0x13
    2900:	8b 89       	ldd	r24, Y+19	; 0x13
    2902:	9c 89       	ldd	r25, Y+20	; 0x14
    2904:	98 8b       	std	Y+16, r25	; 0x10
    2906:	8f 87       	std	Y+15, r24	; 0x0f
    2908:	8f 85       	ldd	r24, Y+15	; 0x0f
    290a:	98 89       	ldd	r25, Y+16	; 0x10
    290c:	01 97       	sbiw	r24, 0x01	; 1
    290e:	f1 f7       	brne	.-4      	; 0x290c <LCD_sendCommand+0x2e2>
    2910:	98 8b       	std	Y+16, r25	; 0x10
    2912:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2914:	83 e0       	ldi	r24, 0x03	; 3
    2916:	67 e0       	ldi	r22, 0x07	; 7
    2918:	40 e0       	ldi	r20, 0x00	; 0
    291a:	0e 94 9f 10 	call	0x213e	; 0x213e <GPIO_writePin>
    291e:	80 e0       	ldi	r24, 0x00	; 0
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	a0 e8       	ldi	r26, 0x80	; 128
    2924:	bf e3       	ldi	r27, 0x3F	; 63
    2926:	8b 87       	std	Y+11, r24	; 0x0b
    2928:	9c 87       	std	Y+12, r25	; 0x0c
    292a:	ad 87       	std	Y+13, r26	; 0x0d
    292c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    292e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2930:	7c 85       	ldd	r23, Y+12	; 0x0c
    2932:	8d 85       	ldd	r24, Y+13	; 0x0d
    2934:	9e 85       	ldd	r25, Y+14	; 0x0e
    2936:	20 e0       	ldi	r18, 0x00	; 0
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	4a e7       	ldi	r20, 0x7A	; 122
    293c:	53 e4       	ldi	r21, 0x43	; 67
    293e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2942:	dc 01       	movw	r26, r24
    2944:	cb 01       	movw	r24, r22
    2946:	8f 83       	std	Y+7, r24	; 0x07
    2948:	98 87       	std	Y+8, r25	; 0x08
    294a:	a9 87       	std	Y+9, r26	; 0x09
    294c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    294e:	6f 81       	ldd	r22, Y+7	; 0x07
    2950:	78 85       	ldd	r23, Y+8	; 0x08
    2952:	89 85       	ldd	r24, Y+9	; 0x09
    2954:	9a 85       	ldd	r25, Y+10	; 0x0a
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	40 e8       	ldi	r20, 0x80	; 128
    295c:	5f e3       	ldi	r21, 0x3F	; 63
    295e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2962:	88 23       	and	r24, r24
    2964:	2c f4       	brge	.+10     	; 0x2970 <LCD_sendCommand+0x346>
		__ticks = 1;
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	9e 83       	std	Y+6, r25	; 0x06
    296c:	8d 83       	std	Y+5, r24	; 0x05
    296e:	3f c0       	rjmp	.+126    	; 0x29ee <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    2970:	6f 81       	ldd	r22, Y+7	; 0x07
    2972:	78 85       	ldd	r23, Y+8	; 0x08
    2974:	89 85       	ldd	r24, Y+9	; 0x09
    2976:	9a 85       	ldd	r25, Y+10	; 0x0a
    2978:	20 e0       	ldi	r18, 0x00	; 0
    297a:	3f ef       	ldi	r19, 0xFF	; 255
    297c:	4f e7       	ldi	r20, 0x7F	; 127
    297e:	57 e4       	ldi	r21, 0x47	; 71
    2980:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2984:	18 16       	cp	r1, r24
    2986:	4c f5       	brge	.+82     	; 0x29da <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2988:	6b 85       	ldd	r22, Y+11	; 0x0b
    298a:	7c 85       	ldd	r23, Y+12	; 0x0c
    298c:	8d 85       	ldd	r24, Y+13	; 0x0d
    298e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	40 e2       	ldi	r20, 0x20	; 32
    2996:	51 e4       	ldi	r21, 0x41	; 65
    2998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	bc 01       	movw	r22, r24
    29a2:	cd 01       	movw	r24, r26
    29a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	9e 83       	std	Y+6, r25	; 0x06
    29ae:	8d 83       	std	Y+5, r24	; 0x05
    29b0:	0f c0       	rjmp	.+30     	; 0x29d0 <LCD_sendCommand+0x3a6>
    29b2:	89 e1       	ldi	r24, 0x19	; 25
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	9c 83       	std	Y+4, r25	; 0x04
    29b8:	8b 83       	std	Y+3, r24	; 0x03
    29ba:	8b 81       	ldd	r24, Y+3	; 0x03
    29bc:	9c 81       	ldd	r25, Y+4	; 0x04
    29be:	01 97       	sbiw	r24, 0x01	; 1
    29c0:	f1 f7       	brne	.-4      	; 0x29be <LCD_sendCommand+0x394>
    29c2:	9c 83       	std	Y+4, r25	; 0x04
    29c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c6:	8d 81       	ldd	r24, Y+5	; 0x05
    29c8:	9e 81       	ldd	r25, Y+6	; 0x06
    29ca:	01 97       	sbiw	r24, 0x01	; 1
    29cc:	9e 83       	std	Y+6, r25	; 0x06
    29ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d0:	8d 81       	ldd	r24, Y+5	; 0x05
    29d2:	9e 81       	ldd	r25, Y+6	; 0x06
    29d4:	00 97       	sbiw	r24, 0x00	; 0
    29d6:	69 f7       	brne	.-38     	; 0x29b2 <LCD_sendCommand+0x388>
    29d8:	14 c0       	rjmp	.+40     	; 0x2a02 <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29da:	6f 81       	ldd	r22, Y+7	; 0x07
    29dc:	78 85       	ldd	r23, Y+8	; 0x08
    29de:	89 85       	ldd	r24, Y+9	; 0x09
    29e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e6:	dc 01       	movw	r26, r24
    29e8:	cb 01       	movw	r24, r22
    29ea:	9e 83       	std	Y+6, r25	; 0x06
    29ec:	8d 83       	std	Y+5, r24	; 0x05
    29ee:	8d 81       	ldd	r24, Y+5	; 0x05
    29f0:	9e 81       	ldd	r25, Y+6	; 0x06
    29f2:	9a 83       	std	Y+2, r25	; 0x02
    29f4:	89 83       	std	Y+1, r24	; 0x01
    29f6:	89 81       	ldd	r24, Y+1	; 0x01
    29f8:	9a 81       	ldd	r25, Y+2	; 0x02
    29fa:	01 97       	sbiw	r24, 0x01	; 1
    29fc:	f1 f7       	brne	.-4      	; 0x29fa <LCD_sendCommand+0x3d0>
    29fe:	9a 83       	std	Y+2, r25	; 0x02
    2a00:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2a02:	ea 96       	adiw	r28, 0x3a	; 58
    2a04:	0f b6       	in	r0, 0x3f	; 63
    2a06:	f8 94       	cli
    2a08:	de bf       	out	0x3e, r29	; 62
    2a0a:	0f be       	out	0x3f, r0	; 63
    2a0c:	cd bf       	out	0x3d, r28	; 61
    2a0e:	cf 91       	pop	r28
    2a10:	df 91       	pop	r29
    2a12:	08 95       	ret

00002a14 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2a14:	df 93       	push	r29
    2a16:	cf 93       	push	r28
    2a18:	cd b7       	in	r28, 0x3d	; 61
    2a1a:	de b7       	in	r29, 0x3e	; 62
    2a1c:	ea 97       	sbiw	r28, 0x3a	; 58
    2a1e:	0f b6       	in	r0, 0x3f	; 63
    2a20:	f8 94       	cli
    2a22:	de bf       	out	0x3e, r29	; 62
    2a24:	0f be       	out	0x3f, r0	; 63
    2a26:	cd bf       	out	0x3d, r28	; 61
    2a28:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    2a2a:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2a2c:	83 e0       	ldi	r24, 0x03	; 3
    2a2e:	65 e0       	ldi	r22, 0x05	; 5
    2a30:	41 e0       	ldi	r20, 0x01	; 1
    2a32:	0e 94 9f 10 	call	0x213e	; 0x213e <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2a36:	83 e0       	ldi	r24, 0x03	; 3
    2a38:	66 e0       	ldi	r22, 0x06	; 6
    2a3a:	40 e0       	ldi	r20, 0x00	; 0
    2a3c:	0e 94 9f 10 	call	0x213e	; 0x213e <GPIO_writePin>
    2a40:	80 e0       	ldi	r24, 0x00	; 0
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	a0 e8       	ldi	r26, 0x80	; 128
    2a46:	bf e3       	ldi	r27, 0x3F	; 63
    2a48:	8d ab       	std	Y+53, r24	; 0x35
    2a4a:	9e ab       	std	Y+54, r25	; 0x36
    2a4c:	af ab       	std	Y+55, r26	; 0x37
    2a4e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a50:	6d a9       	ldd	r22, Y+53	; 0x35
    2a52:	7e a9       	ldd	r23, Y+54	; 0x36
    2a54:	8f a9       	ldd	r24, Y+55	; 0x37
    2a56:	98 ad       	ldd	r25, Y+56	; 0x38
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	4a e7       	ldi	r20, 0x7A	; 122
    2a5e:	53 e4       	ldi	r21, 0x43	; 67
    2a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	89 ab       	std	Y+49, r24	; 0x31
    2a6a:	9a ab       	std	Y+50, r25	; 0x32
    2a6c:	ab ab       	std	Y+51, r26	; 0x33
    2a6e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a70:	69 a9       	ldd	r22, Y+49	; 0x31
    2a72:	7a a9       	ldd	r23, Y+50	; 0x32
    2a74:	8b a9       	ldd	r24, Y+51	; 0x33
    2a76:	9c a9       	ldd	r25, Y+52	; 0x34
    2a78:	20 e0       	ldi	r18, 0x00	; 0
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	40 e8       	ldi	r20, 0x80	; 128
    2a7e:	5f e3       	ldi	r21, 0x3F	; 63
    2a80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a84:	88 23       	and	r24, r24
    2a86:	2c f4       	brge	.+10     	; 0x2a92 <LCD_displayCharacter+0x7e>
		__ticks = 1;
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	98 ab       	std	Y+48, r25	; 0x30
    2a8e:	8f a7       	std	Y+47, r24	; 0x2f
    2a90:	3f c0       	rjmp	.+126    	; 0x2b10 <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    2a92:	69 a9       	ldd	r22, Y+49	; 0x31
    2a94:	7a a9       	ldd	r23, Y+50	; 0x32
    2a96:	8b a9       	ldd	r24, Y+51	; 0x33
    2a98:	9c a9       	ldd	r25, Y+52	; 0x34
    2a9a:	20 e0       	ldi	r18, 0x00	; 0
    2a9c:	3f ef       	ldi	r19, 0xFF	; 255
    2a9e:	4f e7       	ldi	r20, 0x7F	; 127
    2aa0:	57 e4       	ldi	r21, 0x47	; 71
    2aa2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2aa6:	18 16       	cp	r1, r24
    2aa8:	4c f5       	brge	.+82     	; 0x2afc <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aaa:	6d a9       	ldd	r22, Y+53	; 0x35
    2aac:	7e a9       	ldd	r23, Y+54	; 0x36
    2aae:	8f a9       	ldd	r24, Y+55	; 0x37
    2ab0:	98 ad       	ldd	r25, Y+56	; 0x38
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	40 e2       	ldi	r20, 0x20	; 32
    2ab8:	51 e4       	ldi	r21, 0x41	; 65
    2aba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	bc 01       	movw	r22, r24
    2ac4:	cd 01       	movw	r24, r26
    2ac6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aca:	dc 01       	movw	r26, r24
    2acc:	cb 01       	movw	r24, r22
    2ace:	98 ab       	std	Y+48, r25	; 0x30
    2ad0:	8f a7       	std	Y+47, r24	; 0x2f
    2ad2:	0f c0       	rjmp	.+30     	; 0x2af2 <LCD_displayCharacter+0xde>
    2ad4:	89 e1       	ldi	r24, 0x19	; 25
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	9e a7       	std	Y+46, r25	; 0x2e
    2ada:	8d a7       	std	Y+45, r24	; 0x2d
    2adc:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ade:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ae0:	01 97       	sbiw	r24, 0x01	; 1
    2ae2:	f1 f7       	brne	.-4      	; 0x2ae0 <LCD_displayCharacter+0xcc>
    2ae4:	9e a7       	std	Y+46, r25	; 0x2e
    2ae6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ae8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2aea:	98 a9       	ldd	r25, Y+48	; 0x30
    2aec:	01 97       	sbiw	r24, 0x01	; 1
    2aee:	98 ab       	std	Y+48, r25	; 0x30
    2af0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2af2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2af4:	98 a9       	ldd	r25, Y+48	; 0x30
    2af6:	00 97       	sbiw	r24, 0x00	; 0
    2af8:	69 f7       	brne	.-38     	; 0x2ad4 <LCD_displayCharacter+0xc0>
    2afa:	14 c0       	rjmp	.+40     	; 0x2b24 <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2afc:	69 a9       	ldd	r22, Y+49	; 0x31
    2afe:	7a a9       	ldd	r23, Y+50	; 0x32
    2b00:	8b a9       	ldd	r24, Y+51	; 0x33
    2b02:	9c a9       	ldd	r25, Y+52	; 0x34
    2b04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b08:	dc 01       	movw	r26, r24
    2b0a:	cb 01       	movw	r24, r22
    2b0c:	98 ab       	std	Y+48, r25	; 0x30
    2b0e:	8f a7       	std	Y+47, r24	; 0x2f
    2b10:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b12:	98 a9       	ldd	r25, Y+48	; 0x30
    2b14:	9c a7       	std	Y+44, r25	; 0x2c
    2b16:	8b a7       	std	Y+43, r24	; 0x2b
    2b18:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b1a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b1c:	01 97       	sbiw	r24, 0x01	; 1
    2b1e:	f1 f7       	brne	.-4      	; 0x2b1c <LCD_displayCharacter+0x108>
    2b20:	9c a7       	std	Y+44, r25	; 0x2c
    2b22:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2b24:	83 e0       	ldi	r24, 0x03	; 3
    2b26:	67 e0       	ldi	r22, 0x07	; 7
    2b28:	41 e0       	ldi	r20, 0x01	; 1
    2b2a:	0e 94 9f 10 	call	0x213e	; 0x213e <GPIO_writePin>
    2b2e:	80 e0       	ldi	r24, 0x00	; 0
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	a0 e8       	ldi	r26, 0x80	; 128
    2b34:	bf e3       	ldi	r27, 0x3F	; 63
    2b36:	8f a3       	std	Y+39, r24	; 0x27
    2b38:	98 a7       	std	Y+40, r25	; 0x28
    2b3a:	a9 a7       	std	Y+41, r26	; 0x29
    2b3c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b3e:	6f a1       	ldd	r22, Y+39	; 0x27
    2b40:	78 a5       	ldd	r23, Y+40	; 0x28
    2b42:	89 a5       	ldd	r24, Y+41	; 0x29
    2b44:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	4a e7       	ldi	r20, 0x7A	; 122
    2b4c:	53 e4       	ldi	r21, 0x43	; 67
    2b4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b52:	dc 01       	movw	r26, r24
    2b54:	cb 01       	movw	r24, r22
    2b56:	8b a3       	std	Y+35, r24	; 0x23
    2b58:	9c a3       	std	Y+36, r25	; 0x24
    2b5a:	ad a3       	std	Y+37, r26	; 0x25
    2b5c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b5e:	6b a1       	ldd	r22, Y+35	; 0x23
    2b60:	7c a1       	ldd	r23, Y+36	; 0x24
    2b62:	8d a1       	ldd	r24, Y+37	; 0x25
    2b64:	9e a1       	ldd	r25, Y+38	; 0x26
    2b66:	20 e0       	ldi	r18, 0x00	; 0
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	40 e8       	ldi	r20, 0x80	; 128
    2b6c:	5f e3       	ldi	r21, 0x3F	; 63
    2b6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b72:	88 23       	and	r24, r24
    2b74:	2c f4       	brge	.+10     	; 0x2b80 <LCD_displayCharacter+0x16c>
		__ticks = 1;
    2b76:	81 e0       	ldi	r24, 0x01	; 1
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	9a a3       	std	Y+34, r25	; 0x22
    2b7c:	89 a3       	std	Y+33, r24	; 0x21
    2b7e:	3f c0       	rjmp	.+126    	; 0x2bfe <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    2b80:	6b a1       	ldd	r22, Y+35	; 0x23
    2b82:	7c a1       	ldd	r23, Y+36	; 0x24
    2b84:	8d a1       	ldd	r24, Y+37	; 0x25
    2b86:	9e a1       	ldd	r25, Y+38	; 0x26
    2b88:	20 e0       	ldi	r18, 0x00	; 0
    2b8a:	3f ef       	ldi	r19, 0xFF	; 255
    2b8c:	4f e7       	ldi	r20, 0x7F	; 127
    2b8e:	57 e4       	ldi	r21, 0x47	; 71
    2b90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b94:	18 16       	cp	r1, r24
    2b96:	4c f5       	brge	.+82     	; 0x2bea <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b98:	6f a1       	ldd	r22, Y+39	; 0x27
    2b9a:	78 a5       	ldd	r23, Y+40	; 0x28
    2b9c:	89 a5       	ldd	r24, Y+41	; 0x29
    2b9e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ba0:	20 e0       	ldi	r18, 0x00	; 0
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	40 e2       	ldi	r20, 0x20	; 32
    2ba6:	51 e4       	ldi	r21, 0x41	; 65
    2ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bac:	dc 01       	movw	r26, r24
    2bae:	cb 01       	movw	r24, r22
    2bb0:	bc 01       	movw	r22, r24
    2bb2:	cd 01       	movw	r24, r26
    2bb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb8:	dc 01       	movw	r26, r24
    2bba:	cb 01       	movw	r24, r22
    2bbc:	9a a3       	std	Y+34, r25	; 0x22
    2bbe:	89 a3       	std	Y+33, r24	; 0x21
    2bc0:	0f c0       	rjmp	.+30     	; 0x2be0 <LCD_displayCharacter+0x1cc>
    2bc2:	89 e1       	ldi	r24, 0x19	; 25
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	98 a3       	std	Y+32, r25	; 0x20
    2bc8:	8f 8f       	std	Y+31, r24	; 0x1f
    2bca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bcc:	98 a1       	ldd	r25, Y+32	; 0x20
    2bce:	01 97       	sbiw	r24, 0x01	; 1
    2bd0:	f1 f7       	brne	.-4      	; 0x2bce <LCD_displayCharacter+0x1ba>
    2bd2:	98 a3       	std	Y+32, r25	; 0x20
    2bd4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bd6:	89 a1       	ldd	r24, Y+33	; 0x21
    2bd8:	9a a1       	ldd	r25, Y+34	; 0x22
    2bda:	01 97       	sbiw	r24, 0x01	; 1
    2bdc:	9a a3       	std	Y+34, r25	; 0x22
    2bde:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be0:	89 a1       	ldd	r24, Y+33	; 0x21
    2be2:	9a a1       	ldd	r25, Y+34	; 0x22
    2be4:	00 97       	sbiw	r24, 0x00	; 0
    2be6:	69 f7       	brne	.-38     	; 0x2bc2 <LCD_displayCharacter+0x1ae>
    2be8:	14 c0       	rjmp	.+40     	; 0x2c12 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bea:	6b a1       	ldd	r22, Y+35	; 0x23
    2bec:	7c a1       	ldd	r23, Y+36	; 0x24
    2bee:	8d a1       	ldd	r24, Y+37	; 0x25
    2bf0:	9e a1       	ldd	r25, Y+38	; 0x26
    2bf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	9a a3       	std	Y+34, r25	; 0x22
    2bfc:	89 a3       	std	Y+33, r24	; 0x21
    2bfe:	89 a1       	ldd	r24, Y+33	; 0x21
    2c00:	9a a1       	ldd	r25, Y+34	; 0x22
    2c02:	9e 8f       	std	Y+30, r25	; 0x1e
    2c04:	8d 8f       	std	Y+29, r24	; 0x1d
    2c06:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c08:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c0a:	01 97       	sbiw	r24, 0x01	; 1
    2c0c:	f1 f7       	brne	.-4      	; 0x2c0a <LCD_displayCharacter+0x1f6>
    2c0e:	9e 8f       	std	Y+30, r25	; 0x1e
    2c10:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    2c12:	82 e0       	ldi	r24, 0x02	; 2
    2c14:	6a ad       	ldd	r22, Y+58	; 0x3a
    2c16:	0e 94 69 12 	call	0x24d2	; 0x24d2 <GPIO_writePort>
    2c1a:	80 e0       	ldi	r24, 0x00	; 0
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	a0 e8       	ldi	r26, 0x80	; 128
    2c20:	bf e3       	ldi	r27, 0x3F	; 63
    2c22:	89 8f       	std	Y+25, r24	; 0x19
    2c24:	9a 8f       	std	Y+26, r25	; 0x1a
    2c26:	ab 8f       	std	Y+27, r26	; 0x1b
    2c28:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c2a:	69 8d       	ldd	r22, Y+25	; 0x19
    2c2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	4a e7       	ldi	r20, 0x7A	; 122
    2c38:	53 e4       	ldi	r21, 0x43	; 67
    2c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	8d 8b       	std	Y+21, r24	; 0x15
    2c44:	9e 8b       	std	Y+22, r25	; 0x16
    2c46:	af 8b       	std	Y+23, r26	; 0x17
    2c48:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c4a:	6d 89       	ldd	r22, Y+21	; 0x15
    2c4c:	7e 89       	ldd	r23, Y+22	; 0x16
    2c4e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c50:	98 8d       	ldd	r25, Y+24	; 0x18
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	40 e8       	ldi	r20, 0x80	; 128
    2c58:	5f e3       	ldi	r21, 0x3F	; 63
    2c5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c5e:	88 23       	and	r24, r24
    2c60:	2c f4       	brge	.+10     	; 0x2c6c <LCD_displayCharacter+0x258>
		__ticks = 1;
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	9c 8b       	std	Y+20, r25	; 0x14
    2c68:	8b 8b       	std	Y+19, r24	; 0x13
    2c6a:	3f c0       	rjmp	.+126    	; 0x2cea <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2c6c:	6d 89       	ldd	r22, Y+21	; 0x15
    2c6e:	7e 89       	ldd	r23, Y+22	; 0x16
    2c70:	8f 89       	ldd	r24, Y+23	; 0x17
    2c72:	98 8d       	ldd	r25, Y+24	; 0x18
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	3f ef       	ldi	r19, 0xFF	; 255
    2c78:	4f e7       	ldi	r20, 0x7F	; 127
    2c7a:	57 e4       	ldi	r21, 0x47	; 71
    2c7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c80:	18 16       	cp	r1, r24
    2c82:	4c f5       	brge	.+82     	; 0x2cd6 <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c84:	69 8d       	ldd	r22, Y+25	; 0x19
    2c86:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	40 e2       	ldi	r20, 0x20	; 32
    2c92:	51 e4       	ldi	r21, 0x41	; 65
    2c94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	bc 01       	movw	r22, r24
    2c9e:	cd 01       	movw	r24, r26
    2ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	9c 8b       	std	Y+20, r25	; 0x14
    2caa:	8b 8b       	std	Y+19, r24	; 0x13
    2cac:	0f c0       	rjmp	.+30     	; 0x2ccc <LCD_displayCharacter+0x2b8>
    2cae:	89 e1       	ldi	r24, 0x19	; 25
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	9a 8b       	std	Y+18, r25	; 0x12
    2cb4:	89 8b       	std	Y+17, r24	; 0x11
    2cb6:	89 89       	ldd	r24, Y+17	; 0x11
    2cb8:	9a 89       	ldd	r25, Y+18	; 0x12
    2cba:	01 97       	sbiw	r24, 0x01	; 1
    2cbc:	f1 f7       	brne	.-4      	; 0x2cba <LCD_displayCharacter+0x2a6>
    2cbe:	9a 8b       	std	Y+18, r25	; 0x12
    2cc0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cc2:	8b 89       	ldd	r24, Y+19	; 0x13
    2cc4:	9c 89       	ldd	r25, Y+20	; 0x14
    2cc6:	01 97       	sbiw	r24, 0x01	; 1
    2cc8:	9c 8b       	std	Y+20, r25	; 0x14
    2cca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ccc:	8b 89       	ldd	r24, Y+19	; 0x13
    2cce:	9c 89       	ldd	r25, Y+20	; 0x14
    2cd0:	00 97       	sbiw	r24, 0x00	; 0
    2cd2:	69 f7       	brne	.-38     	; 0x2cae <LCD_displayCharacter+0x29a>
    2cd4:	14 c0       	rjmp	.+40     	; 0x2cfe <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cd6:	6d 89       	ldd	r22, Y+21	; 0x15
    2cd8:	7e 89       	ldd	r23, Y+22	; 0x16
    2cda:	8f 89       	ldd	r24, Y+23	; 0x17
    2cdc:	98 8d       	ldd	r25, Y+24	; 0x18
    2cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	cb 01       	movw	r24, r22
    2ce6:	9c 8b       	std	Y+20, r25	; 0x14
    2ce8:	8b 8b       	std	Y+19, r24	; 0x13
    2cea:	8b 89       	ldd	r24, Y+19	; 0x13
    2cec:	9c 89       	ldd	r25, Y+20	; 0x14
    2cee:	98 8b       	std	Y+16, r25	; 0x10
    2cf0:	8f 87       	std	Y+15, r24	; 0x0f
    2cf2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cf4:	98 89       	ldd	r25, Y+16	; 0x10
    2cf6:	01 97       	sbiw	r24, 0x01	; 1
    2cf8:	f1 f7       	brne	.-4      	; 0x2cf6 <LCD_displayCharacter+0x2e2>
    2cfa:	98 8b       	std	Y+16, r25	; 0x10
    2cfc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2cfe:	83 e0       	ldi	r24, 0x03	; 3
    2d00:	67 e0       	ldi	r22, 0x07	; 7
    2d02:	40 e0       	ldi	r20, 0x00	; 0
    2d04:	0e 94 9f 10 	call	0x213e	; 0x213e <GPIO_writePin>
    2d08:	80 e0       	ldi	r24, 0x00	; 0
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	a0 e8       	ldi	r26, 0x80	; 128
    2d0e:	bf e3       	ldi	r27, 0x3F	; 63
    2d10:	8b 87       	std	Y+11, r24	; 0x0b
    2d12:	9c 87       	std	Y+12, r25	; 0x0c
    2d14:	ad 87       	std	Y+13, r26	; 0x0d
    2d16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d18:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	4a e7       	ldi	r20, 0x7A	; 122
    2d26:	53 e4       	ldi	r21, 0x43	; 67
    2d28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d2c:	dc 01       	movw	r26, r24
    2d2e:	cb 01       	movw	r24, r22
    2d30:	8f 83       	std	Y+7, r24	; 0x07
    2d32:	98 87       	std	Y+8, r25	; 0x08
    2d34:	a9 87       	std	Y+9, r26	; 0x09
    2d36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d38:	6f 81       	ldd	r22, Y+7	; 0x07
    2d3a:	78 85       	ldd	r23, Y+8	; 0x08
    2d3c:	89 85       	ldd	r24, Y+9	; 0x09
    2d3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d40:	20 e0       	ldi	r18, 0x00	; 0
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	40 e8       	ldi	r20, 0x80	; 128
    2d46:	5f e3       	ldi	r21, 0x3F	; 63
    2d48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d4c:	88 23       	and	r24, r24
    2d4e:	2c f4       	brge	.+10     	; 0x2d5a <LCD_displayCharacter+0x346>
		__ticks = 1;
    2d50:	81 e0       	ldi	r24, 0x01	; 1
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	9e 83       	std	Y+6, r25	; 0x06
    2d56:	8d 83       	std	Y+5, r24	; 0x05
    2d58:	3f c0       	rjmp	.+126    	; 0x2dd8 <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    2d5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d5c:	78 85       	ldd	r23, Y+8	; 0x08
    2d5e:	89 85       	ldd	r24, Y+9	; 0x09
    2d60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d62:	20 e0       	ldi	r18, 0x00	; 0
    2d64:	3f ef       	ldi	r19, 0xFF	; 255
    2d66:	4f e7       	ldi	r20, 0x7F	; 127
    2d68:	57 e4       	ldi	r21, 0x47	; 71
    2d6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d6e:	18 16       	cp	r1, r24
    2d70:	4c f5       	brge	.+82     	; 0x2dc4 <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d72:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d74:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d76:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d78:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d7a:	20 e0       	ldi	r18, 0x00	; 0
    2d7c:	30 e0       	ldi	r19, 0x00	; 0
    2d7e:	40 e2       	ldi	r20, 0x20	; 32
    2d80:	51 e4       	ldi	r21, 0x41	; 65
    2d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	bc 01       	movw	r22, r24
    2d8c:	cd 01       	movw	r24, r26
    2d8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d92:	dc 01       	movw	r26, r24
    2d94:	cb 01       	movw	r24, r22
    2d96:	9e 83       	std	Y+6, r25	; 0x06
    2d98:	8d 83       	std	Y+5, r24	; 0x05
    2d9a:	0f c0       	rjmp	.+30     	; 0x2dba <LCD_displayCharacter+0x3a6>
    2d9c:	89 e1       	ldi	r24, 0x19	; 25
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	9c 83       	std	Y+4, r25	; 0x04
    2da2:	8b 83       	std	Y+3, r24	; 0x03
    2da4:	8b 81       	ldd	r24, Y+3	; 0x03
    2da6:	9c 81       	ldd	r25, Y+4	; 0x04
    2da8:	01 97       	sbiw	r24, 0x01	; 1
    2daa:	f1 f7       	brne	.-4      	; 0x2da8 <LCD_displayCharacter+0x394>
    2dac:	9c 83       	std	Y+4, r25	; 0x04
    2dae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db0:	8d 81       	ldd	r24, Y+5	; 0x05
    2db2:	9e 81       	ldd	r25, Y+6	; 0x06
    2db4:	01 97       	sbiw	r24, 0x01	; 1
    2db6:	9e 83       	std	Y+6, r25	; 0x06
    2db8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dba:	8d 81       	ldd	r24, Y+5	; 0x05
    2dbc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dbe:	00 97       	sbiw	r24, 0x00	; 0
    2dc0:	69 f7       	brne	.-38     	; 0x2d9c <LCD_displayCharacter+0x388>
    2dc2:	14 c0       	rjmp	.+40     	; 0x2dec <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dc4:	6f 81       	ldd	r22, Y+7	; 0x07
    2dc6:	78 85       	ldd	r23, Y+8	; 0x08
    2dc8:	89 85       	ldd	r24, Y+9	; 0x09
    2dca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd0:	dc 01       	movw	r26, r24
    2dd2:	cb 01       	movw	r24, r22
    2dd4:	9e 83       	std	Y+6, r25	; 0x06
    2dd6:	8d 83       	std	Y+5, r24	; 0x05
    2dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dda:	9e 81       	ldd	r25, Y+6	; 0x06
    2ddc:	9a 83       	std	Y+2, r25	; 0x02
    2dde:	89 83       	std	Y+1, r24	; 0x01
    2de0:	89 81       	ldd	r24, Y+1	; 0x01
    2de2:	9a 81       	ldd	r25, Y+2	; 0x02
    2de4:	01 97       	sbiw	r24, 0x01	; 1
    2de6:	f1 f7       	brne	.-4      	; 0x2de4 <LCD_displayCharacter+0x3d0>
    2de8:	9a 83       	std	Y+2, r25	; 0x02
    2dea:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2dec:	ea 96       	adiw	r28, 0x3a	; 58
    2dee:	0f b6       	in	r0, 0x3f	; 63
    2df0:	f8 94       	cli
    2df2:	de bf       	out	0x3e, r29	; 62
    2df4:	0f be       	out	0x3f, r0	; 63
    2df6:	cd bf       	out	0x3d, r28	; 61
    2df8:	cf 91       	pop	r28
    2dfa:	df 91       	pop	r29
    2dfc:	08 95       	ret

00002dfe <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2dfe:	df 93       	push	r29
    2e00:	cf 93       	push	r28
    2e02:	00 d0       	rcall	.+0      	; 0x2e04 <LCD_displayString+0x6>
    2e04:	cd b7       	in	r28, 0x3d	; 61
    2e06:	de b7       	in	r29, 0x3e	; 62
    2e08:	9a 83       	std	Y+2, r25	; 0x02
    2e0a:	89 83       	std	Y+1, r24	; 0x01
    2e0c:	0a c0       	rjmp	.+20     	; 0x2e22 <LCD_displayString+0x24>
	while((*Str) != '\0')
	{
		LCD_displayCharacter(*Str);
    2e0e:	e9 81       	ldd	r30, Y+1	; 0x01
    2e10:	fa 81       	ldd	r31, Y+2	; 0x02
    2e12:	80 81       	ld	r24, Z
    2e14:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <LCD_displayCharacter>
		Str++;
    2e18:	89 81       	ldd	r24, Y+1	; 0x01
    2e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e1c:	01 96       	adiw	r24, 0x01	; 1
    2e1e:	9a 83       	std	Y+2, r25	; 0x02
    2e20:	89 83       	std	Y+1, r24	; 0x01
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	while((*Str) != '\0')
    2e22:	e9 81       	ldd	r30, Y+1	; 0x01
    2e24:	fa 81       	ldd	r31, Y+2	; 0x02
    2e26:	80 81       	ld	r24, Z
    2e28:	88 23       	and	r24, r24
    2e2a:	89 f7       	brne	.-30     	; 0x2e0e <LCD_displayString+0x10>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
}
    2e2c:	0f 90       	pop	r0
    2e2e:	0f 90       	pop	r0
    2e30:	cf 91       	pop	r28
    2e32:	df 91       	pop	r29
    2e34:	08 95       	ret

00002e36 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2e36:	df 93       	push	r29
    2e38:	cf 93       	push	r28
    2e3a:	00 d0       	rcall	.+0      	; 0x2e3c <LCD_moveCursor+0x6>
    2e3c:	00 d0       	rcall	.+0      	; 0x2e3e <LCD_moveCursor+0x8>
    2e3e:	0f 92       	push	r0
    2e40:	cd b7       	in	r28, 0x3d	; 61
    2e42:	de b7       	in	r29, 0x3e	; 62
    2e44:	8a 83       	std	Y+2, r24	; 0x02
    2e46:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2e48:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4a:	28 2f       	mov	r18, r24
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	3d 83       	std	Y+5, r19	; 0x05
    2e50:	2c 83       	std	Y+4, r18	; 0x04
    2e52:	8c 81       	ldd	r24, Y+4	; 0x04
    2e54:	9d 81       	ldd	r25, Y+5	; 0x05
    2e56:	81 30       	cpi	r24, 0x01	; 1
    2e58:	91 05       	cpc	r25, r1
    2e5a:	c1 f0       	breq	.+48     	; 0x2e8c <LCD_moveCursor+0x56>
    2e5c:	2c 81       	ldd	r18, Y+4	; 0x04
    2e5e:	3d 81       	ldd	r19, Y+5	; 0x05
    2e60:	22 30       	cpi	r18, 0x02	; 2
    2e62:	31 05       	cpc	r19, r1
    2e64:	2c f4       	brge	.+10     	; 0x2e70 <LCD_moveCursor+0x3a>
    2e66:	8c 81       	ldd	r24, Y+4	; 0x04
    2e68:	9d 81       	ldd	r25, Y+5	; 0x05
    2e6a:	00 97       	sbiw	r24, 0x00	; 0
    2e6c:	61 f0       	breq	.+24     	; 0x2e86 <LCD_moveCursor+0x50>
    2e6e:	19 c0       	rjmp	.+50     	; 0x2ea2 <LCD_moveCursor+0x6c>
    2e70:	2c 81       	ldd	r18, Y+4	; 0x04
    2e72:	3d 81       	ldd	r19, Y+5	; 0x05
    2e74:	22 30       	cpi	r18, 0x02	; 2
    2e76:	31 05       	cpc	r19, r1
    2e78:	69 f0       	breq	.+26     	; 0x2e94 <LCD_moveCursor+0x5e>
    2e7a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e7c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e7e:	83 30       	cpi	r24, 0x03	; 3
    2e80:	91 05       	cpc	r25, r1
    2e82:	61 f0       	breq	.+24     	; 0x2e9c <LCD_moveCursor+0x66>
    2e84:	0e c0       	rjmp	.+28     	; 0x2ea2 <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address=col;
    2e86:	8b 81       	ldd	r24, Y+3	; 0x03
    2e88:	89 83       	std	Y+1, r24	; 0x01
    2e8a:	0b c0       	rjmp	.+22     	; 0x2ea2 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address=col+0x40;
    2e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8e:	80 5c       	subi	r24, 0xC0	; 192
    2e90:	89 83       	std	Y+1, r24	; 0x01
    2e92:	07 c0       	rjmp	.+14     	; 0x2ea2 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address=col+0x10;
    2e94:	8b 81       	ldd	r24, Y+3	; 0x03
    2e96:	80 5f       	subi	r24, 0xF0	; 240
    2e98:	89 83       	std	Y+1, r24	; 0x01
    2e9a:	03 c0       	rjmp	.+6      	; 0x2ea2 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address=col+0x50;
    2e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9e:	80 5b       	subi	r24, 0xB0	; 176
    2ea0:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2ea2:	89 81       	ldd	r24, Y+1	; 0x01
    2ea4:	80 68       	ori	r24, 0x80	; 128
    2ea6:	0e 94 15 13 	call	0x262a	; 0x262a <LCD_sendCommand>
}
    2eaa:	0f 90       	pop	r0
    2eac:	0f 90       	pop	r0
    2eae:	0f 90       	pop	r0
    2eb0:	0f 90       	pop	r0
    2eb2:	0f 90       	pop	r0
    2eb4:	cf 91       	pop	r28
    2eb6:	df 91       	pop	r29
    2eb8:	08 95       	ret

00002eba <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2eba:	df 93       	push	r29
    2ebc:	cf 93       	push	r28
    2ebe:	00 d0       	rcall	.+0      	; 0x2ec0 <LCD_displayStringRowColumn+0x6>
    2ec0:	00 d0       	rcall	.+0      	; 0x2ec2 <LCD_displayStringRowColumn+0x8>
    2ec2:	cd b7       	in	r28, 0x3d	; 61
    2ec4:	de b7       	in	r29, 0x3e	; 62
    2ec6:	89 83       	std	Y+1, r24	; 0x01
    2ec8:	6a 83       	std	Y+2, r22	; 0x02
    2eca:	5c 83       	std	Y+4, r21	; 0x04
    2ecc:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2ece:	89 81       	ldd	r24, Y+1	; 0x01
    2ed0:	6a 81       	ldd	r22, Y+2	; 0x02
    2ed2:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eda:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <LCD_displayString>
}
    2ede:	0f 90       	pop	r0
    2ee0:	0f 90       	pop	r0
    2ee2:	0f 90       	pop	r0
    2ee4:	0f 90       	pop	r0
    2ee6:	cf 91       	pop	r28
    2ee8:	df 91       	pop	r29
    2eea:	08 95       	ret

00002eec <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2eec:	df 93       	push	r29
    2eee:	cf 93       	push	r28
    2ef0:	cd b7       	in	r28, 0x3d	; 61
    2ef2:	de b7       	in	r29, 0x3e	; 62
    2ef4:	62 97       	sbiw	r28, 0x12	; 18
    2ef6:	0f b6       	in	r0, 0x3f	; 63
    2ef8:	f8 94       	cli
    2efa:	de bf       	out	0x3e, r29	; 62
    2efc:	0f be       	out	0x3f, r0	; 63
    2efe:	cd bf       	out	0x3d, r28	; 61
    2f00:	9a 8b       	std	Y+18, r25	; 0x12
    2f02:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */

	/* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
	itoa(data,buff,10);
    2f04:	89 89       	ldd	r24, Y+17	; 0x11
    2f06:	9a 89       	ldd	r25, Y+18	; 0x12
    2f08:	9e 01       	movw	r18, r28
    2f0a:	2f 5f       	subi	r18, 0xFF	; 255
    2f0c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f0e:	b9 01       	movw	r22, r18
    2f10:	4a e0       	ldi	r20, 0x0A	; 10
    2f12:	50 e0       	ldi	r21, 0x00	; 0
    2f14:	0e 94 99 19 	call	0x3332	; 0x3332 <itoa>

	LCD_displayString(buff); /* Display the string */
    2f18:	ce 01       	movw	r24, r28
    2f1a:	01 96       	adiw	r24, 0x01	; 1
    2f1c:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <LCD_displayString>
}
    2f20:	62 96       	adiw	r28, 0x12	; 18
    2f22:	0f b6       	in	r0, 0x3f	; 63
    2f24:	f8 94       	cli
    2f26:	de bf       	out	0x3e, r29	; 62
    2f28:	0f be       	out	0x3f, r0	; 63
    2f2a:	cd bf       	out	0x3d, r28	; 61
    2f2c:	cf 91       	pop	r28
    2f2e:	df 91       	pop	r29
    2f30:	08 95       	ret

00002f32 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2f32:	df 93       	push	r29
    2f34:	cf 93       	push	r28
    2f36:	cd b7       	in	r28, 0x3d	; 61
    2f38:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2f3a:	81 e0       	ldi	r24, 0x01	; 1
    2f3c:	0e 94 15 13 	call	0x262a	; 0x262a <LCD_sendCommand>
}
    2f40:	cf 91       	pop	r28
    2f42:	df 91       	pop	r29
    2f44:	08 95       	ret

00002f46 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const usart_ConfigType * Config_Ptr,uint32 baud_rate)
{
    2f46:	df 93       	push	r29
    2f48:	cf 93       	push	r28
    2f4a:	cd b7       	in	r28, 0x3d	; 61
    2f4c:	de b7       	in	r29, 0x3e	; 62
    2f4e:	28 97       	sbiw	r28, 0x08	; 8
    2f50:	0f b6       	in	r0, 0x3f	; 63
    2f52:	f8 94       	cli
    2f54:	de bf       	out	0x3e, r29	; 62
    2f56:	0f be       	out	0x3f, r0	; 63
    2f58:	cd bf       	out	0x3d, r28	; 61
    2f5a:	9c 83       	std	Y+4, r25	; 0x04
    2f5c:	8b 83       	std	Y+3, r24	; 0x03
    2f5e:	4d 83       	std	Y+5, r20	; 0x05
    2f60:	5e 83       	std	Y+6, r21	; 0x06
    2f62:	6f 83       	std	Y+7, r22	; 0x07
    2f64:	78 87       	std	Y+8, r23	; 0x08
	uint16 ubrr_value = 0;
    2f66:	1a 82       	std	Y+2, r1	; 0x02
    2f68:	19 82       	std	Y+1, r1	; 0x01

	/* U2X =0 Normal Speed OR =1 double transmission speed */
	UCSRA = (Config_Ptr->speed<<U2X);
    2f6a:	ab e2       	ldi	r26, 0x2B	; 43
    2f6c:	b0 e0       	ldi	r27, 0x00	; 0
    2f6e:	eb 81       	ldd	r30, Y+3	; 0x03
    2f70:	fc 81       	ldd	r31, Y+4	; 0x04
    2f72:	80 81       	ld	r24, Z
    2f74:	88 0f       	add	r24, r24
    2f76:	8c 93       	st	X, r24
	 * UDRIE   	 Disable OR Enable USART Data Register Empty Interrupt
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2  	 For 8-bit data mode
	 ***********************************************************************/
	UCSRB  = (Config_Ptr->receiveInterrupt<<RXCIE) ;
    2f78:	aa e2       	ldi	r26, 0x2A	; 42
    2f7a:	b0 e0       	ldi	r27, 0x00	; 0
    2f7c:	eb 81       	ldd	r30, Y+3	; 0x03
    2f7e:	fc 81       	ldd	r31, Y+4	; 0x04
    2f80:	81 81       	ldd	r24, Z+1	; 0x01
    2f82:	87 95       	ror	r24
    2f84:	88 27       	eor	r24, r24
    2f86:	87 95       	ror	r24
    2f88:	8c 93       	st	X, r24
	UCSRB |= (1<<RXEN) | (1<<TXEN);
    2f8a:	aa e2       	ldi	r26, 0x2A	; 42
    2f8c:	b0 e0       	ldi	r27, 0x00	; 0
    2f8e:	ea e2       	ldi	r30, 0x2A	; 42
    2f90:	f0 e0       	ldi	r31, 0x00	; 0
    2f92:	80 81       	ld	r24, Z
    2f94:	88 61       	ori	r24, 0x18	; 24
    2f96:	8c 93       	st	X, r24
	UCSRB |= (((Config_Ptr->CharacterSize & 0x04) >>2) <<UCSZ2);
    2f98:	aa e2       	ldi	r26, 0x2A	; 42
    2f9a:	b0 e0       	ldi	r27, 0x00	; 0
    2f9c:	ea e2       	ldi	r30, 0x2A	; 42
    2f9e:	f0 e0       	ldi	r31, 0x00	; 0
    2fa0:	80 81       	ld	r24, Z
    2fa2:	98 2f       	mov	r25, r24
    2fa4:	eb 81       	ldd	r30, Y+3	; 0x03
    2fa6:	fc 81       	ldd	r31, Y+4	; 0x04
    2fa8:	83 81       	ldd	r24, Z+3	; 0x03
    2faa:	84 70       	andi	r24, 0x04	; 4
    2fac:	89 2b       	or	r24, r25
    2fae:	8c 93       	st	X, r24
	 * UPM1:0   parity bit
	 * USBS    = 0 One stop bit OR =1 Two stop bit
	 * UCSZ1:0  For data mode
	 * UCPOL    Used with the Synchronous operation only =0
	 ***********************************************************************/
	UCSRC  = (1<<URSEL) |(Config_Ptr->modeSelect<<UMSEL);
    2fb0:	a0 e4       	ldi	r26, 0x40	; 64
    2fb2:	b0 e0       	ldi	r27, 0x00	; 0
    2fb4:	eb 81       	ldd	r30, Y+3	; 0x03
    2fb6:	fc 81       	ldd	r31, Y+4	; 0x04
    2fb8:	84 81       	ldd	r24, Z+4	; 0x04
    2fba:	88 2f       	mov	r24, r24
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	00 24       	eor	r0, r0
    2fc0:	96 95       	lsr	r25
    2fc2:	87 95       	ror	r24
    2fc4:	07 94       	ror	r0
    2fc6:	96 95       	lsr	r25
    2fc8:	87 95       	ror	r24
    2fca:	07 94       	ror	r0
    2fcc:	98 2f       	mov	r25, r24
    2fce:	80 2d       	mov	r24, r0
    2fd0:	80 68       	ori	r24, 0x80	; 128
    2fd2:	8c 93       	st	X, r24

	/*
	 * Masking to get the value of UPM0 bit from 2 bit number
	 * Masking to get the value of UPM1 bit from 2 bit number
	 */
	UCSRC |= ((Config_Ptr->ParityMode &0x01)<<UPM0) |(((Config_Ptr->ParityMode &0x02)>>1) <<UPM1);
    2fd4:	a0 e4       	ldi	r26, 0x40	; 64
    2fd6:	b0 e0       	ldi	r27, 0x00	; 0
    2fd8:	e0 e4       	ldi	r30, 0x40	; 64
    2fda:	f0 e0       	ldi	r31, 0x00	; 0
    2fdc:	80 81       	ld	r24, Z
    2fde:	38 2f       	mov	r19, r24
    2fe0:	eb 81       	ldd	r30, Y+3	; 0x03
    2fe2:	fc 81       	ldd	r31, Y+4	; 0x04
    2fe4:	85 81       	ldd	r24, Z+5	; 0x05
    2fe6:	88 2f       	mov	r24, r24
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	81 70       	andi	r24, 0x01	; 1
    2fec:	90 70       	andi	r25, 0x00	; 0
    2fee:	82 95       	swap	r24
    2ff0:	92 95       	swap	r25
    2ff2:	90 7f       	andi	r25, 0xF0	; 240
    2ff4:	98 27       	eor	r25, r24
    2ff6:	80 7f       	andi	r24, 0xF0	; 240
    2ff8:	98 27       	eor	r25, r24
    2ffa:	28 2f       	mov	r18, r24
    2ffc:	eb 81       	ldd	r30, Y+3	; 0x03
    2ffe:	fc 81       	ldd	r31, Y+4	; 0x04
    3000:	85 81       	ldd	r24, Z+5	; 0x05
    3002:	88 2f       	mov	r24, r24
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	82 70       	andi	r24, 0x02	; 2
    3008:	90 70       	andi	r25, 0x00	; 0
    300a:	95 95       	asr	r25
    300c:	87 95       	ror	r24
    300e:	88 0f       	add	r24, r24
    3010:	99 1f       	adc	r25, r25
    3012:	82 95       	swap	r24
    3014:	92 95       	swap	r25
    3016:	90 7f       	andi	r25, 0xF0	; 240
    3018:	98 27       	eor	r25, r24
    301a:	80 7f       	andi	r24, 0xF0	; 240
    301c:	98 27       	eor	r25, r24
    301e:	82 2b       	or	r24, r18
    3020:	83 2b       	or	r24, r19
    3022:	8c 93       	st	X, r24
	UCSRC |= (Config_Ptr->stopBitSelect<<USBS);
    3024:	a0 e4       	ldi	r26, 0x40	; 64
    3026:	b0 e0       	ldi	r27, 0x00	; 0
    3028:	e0 e4       	ldi	r30, 0x40	; 64
    302a:	f0 e0       	ldi	r31, 0x00	; 0
    302c:	80 81       	ld	r24, Z
    302e:	28 2f       	mov	r18, r24
    3030:	eb 81       	ldd	r30, Y+3	; 0x03
    3032:	fc 81       	ldd	r31, Y+4	; 0x04
    3034:	86 81       	ldd	r24, Z+6	; 0x06
    3036:	88 2f       	mov	r24, r24
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	88 0f       	add	r24, r24
    303c:	99 1f       	adc	r25, r25
    303e:	88 0f       	add	r24, r24
    3040:	99 1f       	adc	r25, r25
    3042:	88 0f       	add	r24, r24
    3044:	99 1f       	adc	r25, r25
    3046:	82 2b       	or	r24, r18
    3048:	8c 93       	st	X, r24
	/*
	 * Masking to take the first bit in CharacterSize and write it in UCSZ0
	 * Masking to take the Second bit in CharacterSize and write it in UCSZ1
	 * To Configure the number of bit you want to send or receive
	 */
	UCSRC |= ((Config_Ptr->CharacterSize & 0x01)<<UCSZ0) | (((Config_Ptr->CharacterSize & 0x02)>>1) <<UCSZ1);
    304a:	a0 e4       	ldi	r26, 0x40	; 64
    304c:	b0 e0       	ldi	r27, 0x00	; 0
    304e:	e0 e4       	ldi	r30, 0x40	; 64
    3050:	f0 e0       	ldi	r31, 0x00	; 0
    3052:	80 81       	ld	r24, Z
    3054:	38 2f       	mov	r19, r24
    3056:	eb 81       	ldd	r30, Y+3	; 0x03
    3058:	fc 81       	ldd	r31, Y+4	; 0x04
    305a:	83 81       	ldd	r24, Z+3	; 0x03
    305c:	88 2f       	mov	r24, r24
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	81 70       	andi	r24, 0x01	; 1
    3062:	90 70       	andi	r25, 0x00	; 0
    3064:	88 0f       	add	r24, r24
    3066:	99 1f       	adc	r25, r25
    3068:	28 2f       	mov	r18, r24
    306a:	eb 81       	ldd	r30, Y+3	; 0x03
    306c:	fc 81       	ldd	r31, Y+4	; 0x04
    306e:	83 81       	ldd	r24, Z+3	; 0x03
    3070:	88 2f       	mov	r24, r24
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	82 70       	andi	r24, 0x02	; 2
    3076:	90 70       	andi	r25, 0x00	; 0
    3078:	95 95       	asr	r25
    307a:	87 95       	ror	r24
    307c:	88 0f       	add	r24, r24
    307e:	99 1f       	adc	r25, r25
    3080:	88 0f       	add	r24, r24
    3082:	99 1f       	adc	r25, r25
    3084:	82 2b       	or	r24, r18
    3086:	83 2b       	or	r24, r19
    3088:	8c 93       	st	X, r24
	UCSRC |=  (Config_Ptr->Edge <<UCPOL);
    308a:	a0 e4       	ldi	r26, 0x40	; 64
    308c:	b0 e0       	ldi	r27, 0x00	; 0
    308e:	e0 e4       	ldi	r30, 0x40	; 64
    3090:	f0 e0       	ldi	r31, 0x00	; 0
    3092:	90 81       	ld	r25, Z
    3094:	eb 81       	ldd	r30, Y+3	; 0x03
    3096:	fc 81       	ldd	r31, Y+4	; 0x04
    3098:	87 81       	ldd	r24, Z+7	; 0x07
    309a:	89 2b       	or	r24, r25
    309c:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    309e:	8d 81       	ldd	r24, Y+5	; 0x05
    30a0:	9e 81       	ldd	r25, Y+6	; 0x06
    30a2:	af 81       	ldd	r26, Y+7	; 0x07
    30a4:	b8 85       	ldd	r27, Y+8	; 0x08
    30a6:	88 0f       	add	r24, r24
    30a8:	99 1f       	adc	r25, r25
    30aa:	aa 1f       	adc	r26, r26
    30ac:	bb 1f       	adc	r27, r27
    30ae:	88 0f       	add	r24, r24
    30b0:	99 1f       	adc	r25, r25
    30b2:	aa 1f       	adc	r26, r26
    30b4:	bb 1f       	adc	r27, r27
    30b6:	88 0f       	add	r24, r24
    30b8:	99 1f       	adc	r25, r25
    30ba:	aa 1f       	adc	r26, r26
    30bc:	bb 1f       	adc	r27, r27
    30be:	9c 01       	movw	r18, r24
    30c0:	ad 01       	movw	r20, r26
    30c2:	80 e4       	ldi	r24, 0x40	; 64
    30c4:	92 e4       	ldi	r25, 0x42	; 66
    30c6:	af e0       	ldi	r26, 0x0F	; 15
    30c8:	b0 e0       	ldi	r27, 0x00	; 0
    30ca:	bc 01       	movw	r22, r24
    30cc:	cd 01       	movw	r24, r26
    30ce:	0e 94 40 19 	call	0x3280	; 0x3280 <__udivmodsi4>
    30d2:	da 01       	movw	r26, r20
    30d4:	c9 01       	movw	r24, r18
    30d6:	01 97       	sbiw	r24, 0x01	; 1
    30d8:	9a 83       	std	Y+2, r25	; 0x02
    30da:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    30dc:	e0 e4       	ldi	r30, 0x40	; 64
    30de:	f0 e0       	ldi	r31, 0x00	; 0
    30e0:	89 81       	ldd	r24, Y+1	; 0x01
    30e2:	9a 81       	ldd	r25, Y+2	; 0x02
    30e4:	89 2f       	mov	r24, r25
    30e6:	99 27       	eor	r25, r25
    30e8:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    30ea:	e9 e2       	ldi	r30, 0x29	; 41
    30ec:	f0 e0       	ldi	r31, 0x00	; 0
    30ee:	89 81       	ldd	r24, Y+1	; 0x01
    30f0:	80 83       	st	Z, r24
}
    30f2:	28 96       	adiw	r28, 0x08	; 8
    30f4:	0f b6       	in	r0, 0x3f	; 63
    30f6:	f8 94       	cli
    30f8:	de bf       	out	0x3e, r29	; 62
    30fa:	0f be       	out	0x3f, r0	; 63
    30fc:	cd bf       	out	0x3d, r28	; 61
    30fe:	cf 91       	pop	r28
    3100:	df 91       	pop	r29
    3102:	08 95       	ret

00003104 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3104:	df 93       	push	r29
    3106:	cf 93       	push	r28
    3108:	0f 92       	push	r0
    310a:	cd b7       	in	r28, 0x3d	; 61
    310c:	de b7       	in	r29, 0x3e	; 62
    310e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3110:	eb e2       	ldi	r30, 0x2B	; 43
    3112:	f0 e0       	ldi	r31, 0x00	; 0
    3114:	80 81       	ld	r24, Z
    3116:	88 2f       	mov	r24, r24
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	80 72       	andi	r24, 0x20	; 32
    311c:	90 70       	andi	r25, 0x00	; 0
    311e:	00 97       	sbiw	r24, 0x00	; 0
    3120:	b9 f3       	breq	.-18     	; 0x3110 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3122:	ec e2       	ldi	r30, 0x2C	; 44
    3124:	f0 e0       	ldi	r31, 0x00	; 0
    3126:	89 81       	ldd	r24, Y+1	; 0x01
    3128:	80 83       	st	Z, r24
}
    312a:	0f 90       	pop	r0
    312c:	cf 91       	pop	r28
    312e:	df 91       	pop	r29
    3130:	08 95       	ret

00003132 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3132:	df 93       	push	r29
    3134:	cf 93       	push	r28
    3136:	cd b7       	in	r28, 0x3d	; 61
    3138:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    313a:	eb e2       	ldi	r30, 0x2B	; 43
    313c:	f0 e0       	ldi	r31, 0x00	; 0
    313e:	80 81       	ld	r24, Z
    3140:	88 23       	and	r24, r24
    3142:	dc f7       	brge	.-10     	; 0x313a <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    3144:	ec e2       	ldi	r30, 0x2C	; 44
    3146:	f0 e0       	ldi	r31, 0x00	; 0
    3148:	80 81       	ld	r24, Z
}
    314a:	cf 91       	pop	r28
    314c:	df 91       	pop	r29
    314e:	08 95       	ret

00003150 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3150:	df 93       	push	r29
    3152:	cf 93       	push	r28
    3154:	00 d0       	rcall	.+0      	; 0x3156 <UART_sendString+0x6>
    3156:	0f 92       	push	r0
    3158:	cd b7       	in	r28, 0x3d	; 61
    315a:	de b7       	in	r29, 0x3e	; 62
    315c:	9b 83       	std	Y+3, r25	; 0x03
    315e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3160:	19 82       	std	Y+1, r1	; 0x01
    3162:	0e c0       	rjmp	.+28     	; 0x3180 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3164:	89 81       	ldd	r24, Y+1	; 0x01
    3166:	28 2f       	mov	r18, r24
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	8a 81       	ldd	r24, Y+2	; 0x02
    316c:	9b 81       	ldd	r25, Y+3	; 0x03
    316e:	fc 01       	movw	r30, r24
    3170:	e2 0f       	add	r30, r18
    3172:	f3 1f       	adc	r31, r19
    3174:	80 81       	ld	r24, Z
    3176:	0e 94 82 18 	call	0x3104	; 0x3104 <UART_sendByte>
		i++;
    317a:	89 81       	ldd	r24, Y+1	; 0x01
    317c:	8f 5f       	subi	r24, 0xFF	; 255
    317e:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3180:	89 81       	ldd	r24, Y+1	; 0x01
    3182:	28 2f       	mov	r18, r24
    3184:	30 e0       	ldi	r19, 0x00	; 0
    3186:	8a 81       	ldd	r24, Y+2	; 0x02
    3188:	9b 81       	ldd	r25, Y+3	; 0x03
    318a:	fc 01       	movw	r30, r24
    318c:	e2 0f       	add	r30, r18
    318e:	f3 1f       	adc	r31, r19
    3190:	80 81       	ld	r24, Z
    3192:	88 23       	and	r24, r24
    3194:	39 f7       	brne	.-50     	; 0x3164 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    3196:	0f 90       	pop	r0
    3198:	0f 90       	pop	r0
    319a:	0f 90       	pop	r0
    319c:	cf 91       	pop	r28
    319e:	df 91       	pop	r29
    31a0:	08 95       	ret

000031a2 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    31a2:	0f 93       	push	r16
    31a4:	1f 93       	push	r17
    31a6:	df 93       	push	r29
    31a8:	cf 93       	push	r28
    31aa:	00 d0       	rcall	.+0      	; 0x31ac <UART_receiveString+0xa>
    31ac:	0f 92       	push	r0
    31ae:	cd b7       	in	r28, 0x3d	; 61
    31b0:	de b7       	in	r29, 0x3e	; 62
    31b2:	9b 83       	std	Y+3, r25	; 0x03
    31b4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    31b6:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    31b8:	89 81       	ldd	r24, Y+1	; 0x01
    31ba:	28 2f       	mov	r18, r24
    31bc:	30 e0       	ldi	r19, 0x00	; 0
    31be:	8a 81       	ldd	r24, Y+2	; 0x02
    31c0:	9b 81       	ldd	r25, Y+3	; 0x03
    31c2:	8c 01       	movw	r16, r24
    31c4:	02 0f       	add	r16, r18
    31c6:	13 1f       	adc	r17, r19
    31c8:	0e 94 99 18 	call	0x3132	; 0x3132 <UART_recieveByte>
    31cc:	f8 01       	movw	r30, r16
    31ce:	80 83       	st	Z, r24
    31d0:	0f c0       	rjmp	.+30     	; 0x31f0 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    31d2:	89 81       	ldd	r24, Y+1	; 0x01
    31d4:	8f 5f       	subi	r24, 0xFF	; 255
    31d6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    31d8:	89 81       	ldd	r24, Y+1	; 0x01
    31da:	28 2f       	mov	r18, r24
    31dc:	30 e0       	ldi	r19, 0x00	; 0
    31de:	8a 81       	ldd	r24, Y+2	; 0x02
    31e0:	9b 81       	ldd	r25, Y+3	; 0x03
    31e2:	8c 01       	movw	r16, r24
    31e4:	02 0f       	add	r16, r18
    31e6:	13 1f       	adc	r17, r19
    31e8:	0e 94 99 18 	call	0x3132	; 0x3132 <UART_recieveByte>
    31ec:	f8 01       	movw	r30, r16
    31ee:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    31f0:	89 81       	ldd	r24, Y+1	; 0x01
    31f2:	28 2f       	mov	r18, r24
    31f4:	30 e0       	ldi	r19, 0x00	; 0
    31f6:	8a 81       	ldd	r24, Y+2	; 0x02
    31f8:	9b 81       	ldd	r25, Y+3	; 0x03
    31fa:	fc 01       	movw	r30, r24
    31fc:	e2 0f       	add	r30, r18
    31fe:	f3 1f       	adc	r31, r19
    3200:	80 81       	ld	r24, Z
    3202:	83 32       	cpi	r24, 0x23	; 35
    3204:	31 f7       	brne	.-52     	; 0x31d2 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3206:	89 81       	ldd	r24, Y+1	; 0x01
    3208:	28 2f       	mov	r18, r24
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	8a 81       	ldd	r24, Y+2	; 0x02
    320e:	9b 81       	ldd	r25, Y+3	; 0x03
    3210:	fc 01       	movw	r30, r24
    3212:	e2 0f       	add	r30, r18
    3214:	f3 1f       	adc	r31, r19
    3216:	10 82       	st	Z, r1
}
    3218:	0f 90       	pop	r0
    321a:	0f 90       	pop	r0
    321c:	0f 90       	pop	r0
    321e:	cf 91       	pop	r28
    3220:	df 91       	pop	r29
    3222:	1f 91       	pop	r17
    3224:	0f 91       	pop	r16
    3226:	08 95       	ret

00003228 <__vector_11>:

/*********************************************************************************
 * 								ISR's Code		    							 *
 *********************************************************************************/
ISR(USART_RXC_vect)
{
    3228:	1f 92       	push	r1
    322a:	0f 92       	push	r0
    322c:	0f b6       	in	r0, 0x3f	; 63
    322e:	0f 92       	push	r0
    3230:	11 24       	eor	r1, r1
    3232:	2f 93       	push	r18
    3234:	3f 93       	push	r19
    3236:	4f 93       	push	r20
    3238:	5f 93       	push	r21
    323a:	6f 93       	push	r22
    323c:	7f 93       	push	r23
    323e:	8f 93       	push	r24
    3240:	9f 93       	push	r25
    3242:	af 93       	push	r26
    3244:	bf 93       	push	r27
    3246:	ef 93       	push	r30
    3248:	ff 93       	push	r31
    324a:	df 93       	push	r29
    324c:	cf 93       	push	r28
    324e:	cd b7       	in	r28, 0x3d	; 61
    3250:	de b7       	in	r29, 0x3e	; 62
	g_recieved_message=UART_recieveByte();
    3252:	0e 94 99 18 	call	0x3132	; 0x3132 <UART_recieveByte>
    3256:	80 93 47 01 	sts	0x0147, r24


}
    325a:	cf 91       	pop	r28
    325c:	df 91       	pop	r29
    325e:	ff 91       	pop	r31
    3260:	ef 91       	pop	r30
    3262:	bf 91       	pop	r27
    3264:	af 91       	pop	r26
    3266:	9f 91       	pop	r25
    3268:	8f 91       	pop	r24
    326a:	7f 91       	pop	r23
    326c:	6f 91       	pop	r22
    326e:	5f 91       	pop	r21
    3270:	4f 91       	pop	r20
    3272:	3f 91       	pop	r19
    3274:	2f 91       	pop	r18
    3276:	0f 90       	pop	r0
    3278:	0f be       	out	0x3f, r0	; 63
    327a:	0f 90       	pop	r0
    327c:	1f 90       	pop	r1
    327e:	18 95       	reti

00003280 <__udivmodsi4>:
    3280:	a1 e2       	ldi	r26, 0x21	; 33
    3282:	1a 2e       	mov	r1, r26
    3284:	aa 1b       	sub	r26, r26
    3286:	bb 1b       	sub	r27, r27
    3288:	fd 01       	movw	r30, r26
    328a:	0d c0       	rjmp	.+26     	; 0x32a6 <__udivmodsi4_ep>

0000328c <__udivmodsi4_loop>:
    328c:	aa 1f       	adc	r26, r26
    328e:	bb 1f       	adc	r27, r27
    3290:	ee 1f       	adc	r30, r30
    3292:	ff 1f       	adc	r31, r31
    3294:	a2 17       	cp	r26, r18
    3296:	b3 07       	cpc	r27, r19
    3298:	e4 07       	cpc	r30, r20
    329a:	f5 07       	cpc	r31, r21
    329c:	20 f0       	brcs	.+8      	; 0x32a6 <__udivmodsi4_ep>
    329e:	a2 1b       	sub	r26, r18
    32a0:	b3 0b       	sbc	r27, r19
    32a2:	e4 0b       	sbc	r30, r20
    32a4:	f5 0b       	sbc	r31, r21

000032a6 <__udivmodsi4_ep>:
    32a6:	66 1f       	adc	r22, r22
    32a8:	77 1f       	adc	r23, r23
    32aa:	88 1f       	adc	r24, r24
    32ac:	99 1f       	adc	r25, r25
    32ae:	1a 94       	dec	r1
    32b0:	69 f7       	brne	.-38     	; 0x328c <__udivmodsi4_loop>
    32b2:	60 95       	com	r22
    32b4:	70 95       	com	r23
    32b6:	80 95       	com	r24
    32b8:	90 95       	com	r25
    32ba:	9b 01       	movw	r18, r22
    32bc:	ac 01       	movw	r20, r24
    32be:	bd 01       	movw	r22, r26
    32c0:	cf 01       	movw	r24, r30
    32c2:	08 95       	ret

000032c4 <__prologue_saves__>:
    32c4:	2f 92       	push	r2
    32c6:	3f 92       	push	r3
    32c8:	4f 92       	push	r4
    32ca:	5f 92       	push	r5
    32cc:	6f 92       	push	r6
    32ce:	7f 92       	push	r7
    32d0:	8f 92       	push	r8
    32d2:	9f 92       	push	r9
    32d4:	af 92       	push	r10
    32d6:	bf 92       	push	r11
    32d8:	cf 92       	push	r12
    32da:	df 92       	push	r13
    32dc:	ef 92       	push	r14
    32de:	ff 92       	push	r15
    32e0:	0f 93       	push	r16
    32e2:	1f 93       	push	r17
    32e4:	cf 93       	push	r28
    32e6:	df 93       	push	r29
    32e8:	cd b7       	in	r28, 0x3d	; 61
    32ea:	de b7       	in	r29, 0x3e	; 62
    32ec:	ca 1b       	sub	r28, r26
    32ee:	db 0b       	sbc	r29, r27
    32f0:	0f b6       	in	r0, 0x3f	; 63
    32f2:	f8 94       	cli
    32f4:	de bf       	out	0x3e, r29	; 62
    32f6:	0f be       	out	0x3f, r0	; 63
    32f8:	cd bf       	out	0x3d, r28	; 61
    32fa:	09 94       	ijmp

000032fc <__epilogue_restores__>:
    32fc:	2a 88       	ldd	r2, Y+18	; 0x12
    32fe:	39 88       	ldd	r3, Y+17	; 0x11
    3300:	48 88       	ldd	r4, Y+16	; 0x10
    3302:	5f 84       	ldd	r5, Y+15	; 0x0f
    3304:	6e 84       	ldd	r6, Y+14	; 0x0e
    3306:	7d 84       	ldd	r7, Y+13	; 0x0d
    3308:	8c 84       	ldd	r8, Y+12	; 0x0c
    330a:	9b 84       	ldd	r9, Y+11	; 0x0b
    330c:	aa 84       	ldd	r10, Y+10	; 0x0a
    330e:	b9 84       	ldd	r11, Y+9	; 0x09
    3310:	c8 84       	ldd	r12, Y+8	; 0x08
    3312:	df 80       	ldd	r13, Y+7	; 0x07
    3314:	ee 80       	ldd	r14, Y+6	; 0x06
    3316:	fd 80       	ldd	r15, Y+5	; 0x05
    3318:	0c 81       	ldd	r16, Y+4	; 0x04
    331a:	1b 81       	ldd	r17, Y+3	; 0x03
    331c:	aa 81       	ldd	r26, Y+2	; 0x02
    331e:	b9 81       	ldd	r27, Y+1	; 0x01
    3320:	ce 0f       	add	r28, r30
    3322:	d1 1d       	adc	r29, r1
    3324:	0f b6       	in	r0, 0x3f	; 63
    3326:	f8 94       	cli
    3328:	de bf       	out	0x3e, r29	; 62
    332a:	0f be       	out	0x3f, r0	; 63
    332c:	cd bf       	out	0x3d, r28	; 61
    332e:	ed 01       	movw	r28, r26
    3330:	08 95       	ret

00003332 <itoa>:
    3332:	fb 01       	movw	r30, r22
    3334:	9f 01       	movw	r18, r30
    3336:	e8 94       	clt
    3338:	42 30       	cpi	r20, 0x02	; 2
    333a:	c4 f0       	brlt	.+48     	; 0x336c <itoa+0x3a>
    333c:	45 32       	cpi	r20, 0x25	; 37
    333e:	b4 f4       	brge	.+44     	; 0x336c <itoa+0x3a>
    3340:	4a 30       	cpi	r20, 0x0A	; 10
    3342:	29 f4       	brne	.+10     	; 0x334e <itoa+0x1c>
    3344:	97 fb       	bst	r25, 7
    3346:	1e f4       	brtc	.+6      	; 0x334e <itoa+0x1c>
    3348:	90 95       	com	r25
    334a:	81 95       	neg	r24
    334c:	9f 4f       	sbci	r25, 0xFF	; 255
    334e:	64 2f       	mov	r22, r20
    3350:	77 27       	eor	r23, r23
    3352:	0e 94 ca 19 	call	0x3394	; 0x3394 <__udivmodhi4>
    3356:	80 5d       	subi	r24, 0xD0	; 208
    3358:	8a 33       	cpi	r24, 0x3A	; 58
    335a:	0c f0       	brlt	.+2      	; 0x335e <itoa+0x2c>
    335c:	89 5d       	subi	r24, 0xD9	; 217
    335e:	81 93       	st	Z+, r24
    3360:	cb 01       	movw	r24, r22
    3362:	00 97       	sbiw	r24, 0x00	; 0
    3364:	a1 f7       	brne	.-24     	; 0x334e <itoa+0x1c>
    3366:	16 f4       	brtc	.+4      	; 0x336c <itoa+0x3a>
    3368:	5d e2       	ldi	r21, 0x2D	; 45
    336a:	51 93       	st	Z+, r21
    336c:	10 82       	st	Z, r1
    336e:	c9 01       	movw	r24, r18
    3370:	0c 94 ba 19 	jmp	0x3374	; 0x3374 <strrev>

00003374 <strrev>:
    3374:	dc 01       	movw	r26, r24
    3376:	fc 01       	movw	r30, r24
    3378:	67 2f       	mov	r22, r23
    337a:	71 91       	ld	r23, Z+
    337c:	77 23       	and	r23, r23
    337e:	e1 f7       	brne	.-8      	; 0x3378 <strrev+0x4>
    3380:	32 97       	sbiw	r30, 0x02	; 2
    3382:	04 c0       	rjmp	.+8      	; 0x338c <strrev+0x18>
    3384:	7c 91       	ld	r23, X
    3386:	6d 93       	st	X+, r22
    3388:	70 83       	st	Z, r23
    338a:	62 91       	ld	r22, -Z
    338c:	ae 17       	cp	r26, r30
    338e:	bf 07       	cpc	r27, r31
    3390:	c8 f3       	brcs	.-14     	; 0x3384 <strrev+0x10>
    3392:	08 95       	ret

00003394 <__udivmodhi4>:
    3394:	aa 1b       	sub	r26, r26
    3396:	bb 1b       	sub	r27, r27
    3398:	51 e1       	ldi	r21, 0x11	; 17
    339a:	07 c0       	rjmp	.+14     	; 0x33aa <__udivmodhi4_ep>

0000339c <__udivmodhi4_loop>:
    339c:	aa 1f       	adc	r26, r26
    339e:	bb 1f       	adc	r27, r27
    33a0:	a6 17       	cp	r26, r22
    33a2:	b7 07       	cpc	r27, r23
    33a4:	10 f0       	brcs	.+4      	; 0x33aa <__udivmodhi4_ep>
    33a6:	a6 1b       	sub	r26, r22
    33a8:	b7 0b       	sbc	r27, r23

000033aa <__udivmodhi4_ep>:
    33aa:	88 1f       	adc	r24, r24
    33ac:	99 1f       	adc	r25, r25
    33ae:	5a 95       	dec	r21
    33b0:	a9 f7       	brne	.-22     	; 0x339c <__udivmodhi4_loop>
    33b2:	80 95       	com	r24
    33b4:	90 95       	com	r25
    33b6:	bc 01       	movw	r22, r24
    33b8:	cd 01       	movw	r24, r26
    33ba:	08 95       	ret

000033bc <_exit>:
    33bc:	f8 94       	cli

000033be <__stop_program>:
    33be:	ff cf       	rjmp	.-2      	; 0x33be <__stop_program>
